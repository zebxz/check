when u login to AWS u choose the AMI (LINUS, macoS , ubuntu, windows, redhat etc) 
my Ami is like my operatin sys u wnt the ec2 instance to be based on 
then instance type e.g t2 micro, it specifies what your memory is and what your cpu is
then the key pair n that is if you hv the intention to log into the instance bc you can lauch an instance without a key pair ********************************
forb the netwrk, u can select the ntwrk the ec2 instance will be e.g the subnet , security grp , all these re optional
u hv the option to configure the storage , vol, hw much ebs vol the instance wil hv when its launched
all these are optional, 
but we saw that one of the requirments when creating an instance is to select the AMI and also the instance type which mounts or maps hw many vpc or memory u wil hv on ur instance 
once these 2 hv been selected you can then launch your instance.


bt if i ask u in 2wks to create the same instance nxrt week , chnaces are you may nt remember the exact securty grp , or key that u used b4 
so dis prosces of creatin a resource on the console is nr repeatalbe, thats why in the industry they want a sys that is repeatable, they wnt u to create infrsature that is always 
consistent, an infrastrue that u can crate d same tin over n over again, cos if i hv a sysytem that is repeatble then its easy to manage.

THIS BRINGS US TO THE PROCESS CALLED INFRASTURE AS A CODE  6:17
we ar nt craetying infrasture on the console but instead we ar creating infrasture as a code 
when ever u hv anytin written in code format that process is repeatabe bc the code will reamain the same n evrytime u execute the code u get the same result e.g u hv a script to
instal a jenkins server that script is repeatable bc as long as u run the script evrytime, it wil always provision the same thing evrytime,  that
process is what is called infrasture as a code. 

SO  as we start off this series of terraform going tru infastructure as a code some of the thins we ar going to be looking at as we do tonight just abt our introduction 
wea re gouin to b focuing on a tool called terraform

INTRODUTION TO TERRAFORM  ... 7:50
Terraform is a tool that helps us build our infrasture in a code format so that we no ,longer nid to go on the console to provision our infrasture bnc we want 
process to be repeatbel. so that 2wks/onths  frm now i can run the sam ecod3e n when i do that i can always provison the same resources. 
so bc of that it enhnaces speed , enhances a process that is repaetalbe, over and over  n u get the same result just bc u ar using code.

we wil look at the key concepts 
definition, benefits, vendor, workflow, syntax  etc
b4 we use terrform, we hv to install it

********************************  READ UP THE POWER POINT SCRIPT******************************* 11: 30 
TErraform: MEANING   
1)managing and provisoning of infrsatruture tru code instaed of manually.
so instaed of u going to the console to manage or provison infrasture , u can write a code n use the particulr coseb to craeet infrasture
so intaed of creatuing ec2 instance in aws , we are able to wirte it  i bliv (ec2 instance ) n v terraform go to aws and create the same ec2 instance for us.
this process is repeatable bc i can create 20 of the same ec2 instance and all of them wil be exactly the same bc they ar using the same code
and that swhat infrasture as a code is 
2)files that contain configurations are created n makes it easy to edit and contribute
so we are goin to create this terraform files n bc we v created these files,its easy to distribute bc we can push theSE files in our SCM 

****** helps avoid undocumented, ad-hoc  configuration changes 
this means that if i hv an ec2 instance, i can easily go on the console n add a tag on the console, when i do dis its is called ad-hoc configuration changes,
theses are changes that am editing manually but they are undocument bc no one knws who changed the code , no one knws who added the tag ,so that is undocumented ad-hoc 
configuration




