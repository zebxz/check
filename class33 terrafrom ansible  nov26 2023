USING A LOCAL PROVIDER , Creating a LOCAL FILE , DEFAULT PROVIDER, PACKAGE MANAGER IS UNIVERSAL

59.03
************   the default provider in terrafrm is harshicorp/local  ie the local provider
1:0:40******* the resource block is the most important block
******  each terfrm blk is a module 
1:13:53  ******  u can pnly initialize in a dir where you hv terfrm code/file
1:41:11 *********    OR INSTEAD OF Using yum, ill use pacakge module, its universal, it works for ubuntu & redhat

******* 1:03:14      interview 

1. Terraform   -- Provisioning
-------------------------------

the traditioanl approach of managing infrastructure was was tidious and cumbersome
but you cant visualize your infrastructure form one spot and its prone tonlots of mistakes and erros 
also it cant be version controlled
by version control we can create a terraform script aND PUSH the script to some github repository but the command used to create our servers its difficult
but with IAC with terfrm is able to solve problem resulting form the traditional approach
with IAC we can create a file, it can be version controlled and we can visualize our resorces with relative ease

1) Infrastructure as Code (IaC)
o Understand Problems with Traditional way of Managing Infrastructure
    - GUI/console   
    - commands , the CLI 
o How IaC with Terraform Solves them

o Infrastructure as Code (IaC) VS Configuration Management
o Install Tools on Mac OS, Linux OS and Windows OS
o Command Basics
    terraform init
    terraform plan             ****** gives us the scope of the work to be done 
    terraform validate   
    terraform apply   
    terraform destroy   
    terraform import                    ******* to mg8 a resource terafrm didnt create
    terraform fmt 
    terraform show/ cat terraformstate.tf    
     

1:044:49 ****************
     HOW THE TERRAFORM STATEFILE IS MANGED 
     remote backend like s3 , ALLOWS For collaboration
       simon / 
       mary / 
       kelvin     


o HCL Language Syntax

2) Terraform Top Level Blocks
o Fundamental Blocks
o terraform block
o providers block   : types of providers we can hv in a resource block
     aws / azure / github / local  (used to run task just inside your terraform
if you dont pass a provider, it will use the local provider
o resources block
o Variable Blocks       *** we can use it to use the same code in terfrm n deploy it in multiple env by just changing the variables
o Input Variables
o Output Values
o Local Values
o Referencing Block
o Data sources Block
o Modules Block


your main task is you shud be able to create a configuration file in terfrm to deploy your resources
********** 23:40 
terfrm has a very rich resource online 
search for a local provider   ... ....  e.g in google seacrh for a local provide:  terraform local provider 
brings up his vscode

                                    USING A LOCAL PROVIDER (we want to craete a local file 
  32:49  ******* 

   terraform {
         required_providers{
            local = {                               *********  the default provider, we ant to use the default provider to create a file           
               source = "hashicorp/local"
            }
           }
}
resource "local_file" "dev"{                    ****** the file is recognised in terfrm here as "dev"
 content = "terraform is good"
 filename = "test.sh"
}     


****** now run terfrm init
if i run ls -a,  we hv a .terraform file created
terfrm plan 
terfrm apply
ls 
we now hv a terafrm.tfstate file , test.sh
terraform show   ,,  i can also cat the file
we see the content of the state file 
a resoure called local_file.dev was created 
content: terrafrm is good 
file name test.sh
cat test.sh
we see: terraform is good

######## 
in the terfrm woklow, we hv to define the scope, what do we want to achieve?
frm the scope we can get the plan but before that we must first initialize with terfrm init

                         
                                             TO CREATE A  NEW FILE 

 terraform {
         required_providers{
            local = {                                       
               source = "hashicorp/local"
            }
           }
}
resource "local_file" "dev"{                   
 content = "terraform is good"
 filename = "test.sh"
}                                                 45:10 
resource "local_file" "qa"{                        ***** we have to change the name , we cant use the same name as "dev"            
 content = "devops is the best"
 filename = "deploy.java"
}

*******  to destroy 
tefrm destroy  
 * to recreate it 
terrafrm apply --auto approve 
ls
we see the file recreated
***** to destroy a particular file 
terraform destroy --target resource name  or comment the resource



59.00                  DEFAULT PROVIDER IS LOCAL
******
created a resource blk with a provider and we saw
download from harshicorp/local
ls -a
.terraform/
ls. terraform
providers/
ls .terraform/provisers/
resgisry.terraform.io/
ls.terraform/providers/registry.terraform.io/
hasrshicorp
ls ls.terraform/providers/registry.terraform.io/harshicorp
local
ls 
ls ls.terraform/providers/registry.terraform.io/harshicorplocal
2.4.0/                                                                  ***********  we see the version
ls
ls ls.terraform/providers/registry.terraform.io/harshicorplocal/2.4.0
windows                                                                 ************ we see its installed in windows

*********  so in the terrafrm work flow, we hv been able to see how a couple of stuffs can work with relative ease

                                       EXPLAIN YOUR EXPERIENCE USING TERRAFORM
1:10:39                                
********** our env is heavy on aws 
HV USED AWS to provision resources in aws :

AWS:
   ec2-instances  \ VPC / EKS  / S3  / ETC.  
  my experience in terfrm is nt just provivisng ec2 instances , i hv also :
installing terraform on windows and linux systems 
hv been able to mg8 terfm workflow
    define scope / 
    init / 
    writing & modifying terraform scripts [ vars.tf main.tf modules]   

1:13:53  ********* u can pnly initialize in a dir where you hv terfrm code/file

************* 1:18:37nn

2. Ansible  is a Configuration Management tool  
for e.g w ehv 5clusters we are managing 
we can use ansible to mg8 this configuration

    appServers = 50    ,,, without ansible yo will be deploying the application manually one after the other on the 50 app servers bt with the help of ansible w can automate
    webservers = 40  
    dbservers  = 44 
    kubernetes = 5  

******1:25:50    apart frm ssh pluggin, anisble can also use winrm plugging to connect to the windws server and ssh for the linux servers
********* 1.27.28   fr ansible, we can mg8 our k8 cluster 

    deployment of applications in the 50 appServers 
    commissioning the 50 appServers 
    securing the  50 appServers
    installing tomcat in the 50 appServers

Ansible control server is able to mg8 all the servers

tasks that ansible can perform/run on its hosts:( all these fall under configuration)
    FileMGT  
    userMGT  
    deployment  
    securityMGT  
    system monitoring  
    patching  
    packageMGT  


How to perform the tasks and ansible workflow:
   modules 
   playbooks:
     variables  
     plays   
     tasks  
     handlers   
     modules [ yum / copy / service / template / apt / package / shell ] 
               command / setup / systemd / 
     roles    
   roles    
   inventory/host file  
     [ appServer ]
       10.10.0.55
       10.10.0.91
     [ dbServer ]
       10.10.0.77
       10.10.0.100

     [ k8s ]
       10.10.0.10
       10.10.0.30


1.35.00
                            A simple ansible playbook
                             (multiple plays in one playbk )
app.yml  
=======
                             ****** this is a playbk with multiple plays
host:appservers
host:dbservers
host:k8s
host:docker

  
*********************************************************
            this playbk is making use of package module, making use of conditions like when

host:all
vars:
tasks:
  name: install apache                        1:40:08
  yum: name-httpd state=latest       ** this will use the yum module to install apache on all my servers bt if some of my servers are ubuntu,window, redhat, ill pass a condition
  when:os_family="redhat"                    OR INSTEAD OF Using yum, ill use pacakge module, its universal, it works for ubuntu & redhat, bt am still specifying the condition                                                   
  name: start apache                         
  systemd: name=httpd state=started          ****** we can use the service module or systemd module to start apache
  ignore_errors: yes                      1:43:35 *****another condition, if there is an error proceed to the next phase
   name:   copy index file  
  copy: 
    src: index.html
    dest: /var/www/html/
  handlers:                                       ******* we can use the service module or the systemd module to restart apache
       name: restart apache                          hnadler is a task that can only be executed if there are some changes                     
       service: name=httpd state=started 







destroy options :
  terraform destroy --auto-approve  
  terraform destroy --target local_file.test      
  terraform destroy --target aws_instance.web         
How have you applied terraform in your environment/landmark??? 


output block:
   create ec2-instances :
      metadata = 
        ipAddresses
        az/ami/dns/
        Instance ID
       
   vpc : vpc-id  / cidr block   
   eks cluster:
     kubeconfig    

kubernetes vm  


















 
















 
