*** docker 5&6 
******** bt very soon i wont need to check stuffs externally bc am now a DEVOPS engr.
#### if i wnt to knw if my appl is running or nt i can run commands inside my docker container


KEY CONCEPTS
Docker images :
Docker containers  
Dockerfile 
Docker Networks 
Docker volumes  
Docker compose  
Docker swarm 
*********************************************************************


Docker containers: Run time instance of a docker image. 
     If you execute: docker run, 
     a container is created from the image

Dockerfile :
    FROM tomcat:8.0.20-jre8    ......so tomcat:8.0.20-jre8 ... this is the tag
    COPY target/*.war /usr/local/tomcat/webapps/tesla.war  
***** so we hv tomcat 8.0.20 and java runtime 8


1)BUILD IMAGE
so we wnat to build our image and the command is  
  docker build -t teslaimage:1 -f Dockerfile /home/ubuntu/web/  
  docker build -t teslaimage:1 -f Dockerfile-tesla .  

we wnt to build our image, the command is docker build, + so i give a name to my image called telsa image, what version:version 1
am building frm a file , the file is called docker fileand its found in /home/ubuntu/web,,...wher am i building, docker build image 1


2)lets do docker run...  ie to create & deploy containers
docker run -d -p 80:8080 --name webapp teslaimage:1

we wn to deploy this application.. docker run , -d for detachable conatiner ,-p for port forwarding , port 80: marked to port 8080,wich is the port for tomcat
i wnt to deploy my appli and i can attach a name to my application (name webapp 0r tesla), so am deploying dis appl frm this image that has a tag as 1, bc docker
container is a runtime instance of a docker image 
so if i execute dis command:  docker build -t teslaimage:1 .  my webapp container wil be created frm dis docker image 

 after running dis : docker run -d -p 80:8080 --name webapp teslaimage:1
if i execute docker ps , i hv a container running 
docker run --name containerName -d -p hostPort:containerPort image:tag
  -d = detachable mode  
  -p = port Forwarding


share images
with the help of the repository u can push images to therepository
docker push markwellams/tesla-web-app:tagname



Docker images commands:
  docker build    = create a docker image from a Dockerfile  
  docker tag      = assigns repository name to images 
  docker tag  ,, we can tag an image
  docker images   = list images
  docker image ls = list images
  docker images -q = list image ids ONLY
 docker images  .,,, list images
- docker Registry - Where docker images are stored and distributed    
  - docker engine==- - Use by the docker service to execute tasks  e.g when u run docker build, u ar inform the daocker engine, tk dis instruction n build a docker image
the emgnine tks the instructions n assihn a tag to an image 



we can run "docker build" or "docker image build, but docker build is shorter
 also thers docker image history, docker image imort 
Commands:
  build       Build an image from a Dockerfile
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Display detailed information on one or more images
  load        Load an image from a tar archive or STDIN
  ls          List images
  prune       Remove unused images ..  docker5&6.. IMAGES without a name or tag are called dangling images
ubuntu@docker:~/web/laps$ docker system prune      **************** it deleted all the dangling images
WARNING! This will remove:
  - all stopped containers
  - all networks not used by at least one container
  - all dangling images
  - all dangling build cache  ........**************** it deleted all the dangling images

  pull        Download an image from a registry  eg  Docker pull nginx
  push        Upload an image to a registry
  rm          Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
DELETE ALL IMAGES = ubuntu@docker:~$ docker rmi -f $(docker images -q)
 FORCE DELETE AN IMAGE = docker rmi -f mylandmarktech/hello:latest = FORCE DELETE AN IMAGE  
DELETE SELECTED IMAGES USING THEIR ID :  docker rmi -f 61395b4c586d e88a065848be
docker stop container ids
to remove stopped container : docker rm container ids



  docker ps we see containers that are running like myapp,stop & app
to stop them; docker stop myapp app hello




DElETING IMAGES
  docker rmi imageName/imageID /imagetag      = DELETE AN IMAGE   
   FORCE DELETE AN IMAGE = docker rmi -f mylandmarktech/hello:latest = FORCE DELETE AN IMAGE  
                            docker rmi -f mylandmarktech/hello:latest 
                            docker rmi -f 

  to list image ids only = ubuntu@docker:~$ docker images -q  
61395b4c586d e88a065848be


Pull images from Public registry [dockerhub] : 
    No athentication is required

Pull images from private registry [ecr/dockerhub/nexus/JFrog] :
    Authentication is required   
    docker login -u username -p password 

push images to Public registry [dockerhub] :
      Authentication is required   
      docker login -u username -p password 

push images to private registry [dockerhub] :
      Authentication is required   
      docker login -u username -p password 


VIDEO 4

docker container commands:
============================
docker ps    = List running containers  
docker ps -a = List all containers [running and stopped/excited] 
docker ps -q   = List running containers IDs
docker ps -aq  = List all containers IDs 
docker stop containerName/ID  
docker stop

List Running Containers
=======================
docker ps -a --filter  status="running" 
docker ps 
docker container ls

List All Containers
================== 
docker ps -a
docker container ls -a

List ONLY stopped Containers
=================================
docker ps -aq --filter  status="exited" 
docker ps -a --filter  status="exited" 

List only running container ids
==============================
docker ps -q
docker container ls -q


List all container ids
==============================
docker ps -aq
docker container ls -aq


deletes stopped containers 
===========================zs
docker rm containerName/ID  
docker rm $(docker ps -aq --filter status='exited' ) 

zForce Delete a running container  
===============-----------------
docker rm -f containerName/ID 
 docker rm -f $(docker ps -aq --filter  status="running") 

Delete an exited/stopped container  
===============-----------------
docker rm containerName/ID  

Delete all exited/stopped container
====================================  
docker rm $(docker ps -aq --filter status='exited' )

Delete all  container
====================================  
docker rm -f $(docker ps -aq )


Delete all excited/stopped Containers
================================
docker rm $(docker ps -aq --filter  status="exited")




DOCKER 5&5B

if they are unable to access these links if ders  u'll get this 
https Errors and httpsError codes:
  httpStatus codes:
  400 errors = client side errors  
    401 = not authorised  
    402 = permission denied
    403 = forbidden
    404 = not found 
  500 errors = server side errors  
    501 / 502 / 503 =  mayb the server is down
  200 = in the 200 family means its ok  
  300 = redirect 


docker container commands:
docker kill wil stop the container without any waring, while docker stop will give u a warning
  docker run/create/start/stop/kill/inspect/logs/top/stats/
  docker diff/update/cp/commit/pause/unpause/ps/ps-a/exec
  docker rm/rm-f/ps -q/   

docker images commands:
  docker build/login/push/pull/tag/images/images prune/  
  docker rmi/rmi -f/system prune 

docker images --help   
docker containers --help 



netstat" TO KNW WHAT PORT NUMBER TO USE AS THE HOST PORT 
to check the ports in use, we can run netstat -tulpn , n i can see the all the ports in use
to install netstat : sudo apt install net-tools


How to troubleshoot issues or debug applications running as docker containers?
1. docker ps -a =
= will check if the container is running, paused or exited
 docker start/unpause
then docker ps -a ,to check if it stopped
if its in stop state , u strt the container
but if it not stopped but the process is stopped u hv to unpause it
﻿﻿﻿2) docker top = check resources, to check the process running inside a container 
﻿﻿﻿3) docker stats containerNAME/ID
﻿﻿﻿4) docker logs containerNAME/ID      docker 5&6 ********* also if der ar issues in the container, we can track them frm the log files
5) ﻿﻿﻿docker exec = run command inside the container
docker exec app 1s 
***meee*** interactive mode****  docker exec -it app/bin/bash
7)﻿﻿﻿docker inspect containerNAME/ID   
 docker inspect  ... "will show us network ie is the container in a ntwrk" does it v ip adress, a container thats running we shud see the ip address in networks
and we can see the state as shown below that the container is nt running based on my inspeection, so we can start d container to solve the problem bc d container is exited
e.g
***  most of the time when we look at networking after we kill a container n start a container, we ll see the ipadresss will change
8)99﻿﻿﻿docker attach containerNAME/ID
﻿﻿﻿netstat -tulpn
5) docker update container name/id
can be used to change some settings and parametsr on  running conatiners e.g we can change d memory limit of a container,bc a container can be killed bc of out of memeory 
so we shud be able to modify such parameter so that we can keep our container running

6)docker rename : to rename an application

 7)docker diff 
 RUN commands or instructions will be executed while creating an image on top of the previous layers(Image)
Docker history (image name OR image ID) : this will define all the layers on/of the image e.g files that were added on the image 


docker 5&6 ********* also if der ar issues in the container, we can track them frm the log files
 How processes are running.     1.21.00*** a container can be killed bc of resources issues

we can also check the statistics
docker stats containerNAME/ID = = check resources 
      "OOMKilled": false,  (out of memeory)

INSIDE CONTAINER
to run command inside a container
﻿﻿﻿docker exec app pwd 
﻿﻿﻿docker exec app ls   .. to see the files

INTERCATIVE MODE
we can actually get into the container to execute command by accessing the container in intercative mode
docker exec -it app   .. for interactive mode
to interact with the container we nid a shell
so we can use a bash shell  .. : docker exec -it app bash
or bond shell sh


                              COPY FROM & TO A CONTAINER
 A)  copy from a container ; docker cp webapp:/usr/local/tomcat/webapps/tesla/jsps/home.jsp
                                 ***online
                             docker cp my_container:/app/source_directory/container_file.log ./local_destination/
                                       
    B) Copy to a/(same) container ;  docker cp home.jsp webapp:/usr/local/tomcat/webapps/tesla/jsps/
                                    ** online
                             Copying a file from the host to a container:
    docker cp ./local_file.txt my_container:/app/destination_directory/


DOCKER 5B 
about pausing the process   
i can pause to TS
if u deploy an appli n its running , n now thers an info u wnt to update on the container
so u can pause the container process so that users cant access it until u v fixed it
### WE pause and hv to unpause when we are done updating


DOCKER 5&6


Dockerfile instructions/keywords:  instructions can be used to execute commands/scripts
        in writing a docker file these ar the keywords we shud tk specific note of 
===================
FROM   ,, this defines the dependencies , this is the most imp key work 
FROM:   The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions
MAINTAINER/COPY/ADD/RUN/CMD/ENTRYPOINT
WORKDIR/ENV/EXPOSE/
USER/VOLUME/LABEL/ARG
*****  Docker ADD does the same tin as docker COPY but it has some advantages bc it can be used to copy files from external sources e.g to download files
 from remote https location
 RUN commands or instructions will be executed while creating an image on top of the previous layers(Image)
Docker history (image name OR image ID) : this will define all the layers on/of the image e.g files that were added on the image



DOCKER7
Usage:  docker network COMMAND

Manage networks

Commands:
docker exec app ping webapp   To ping 2containers  *** got no response bt when he got into the container ie ran 'docker exec -it webapp bash'
& ran 'ping containername', it worked.
ping containername                  To ping 2containers
docker network connect tesla webapp       to connect a container to a netwrk, ie i bliv the weapp is in a diff netwrk, not the tesla ntwrk
  connect     Connect a container to a network    ****I Bliv this should be  conecting to a diff network
  create      Create a network
  disconnect  Disconnect a container from a network
  inspect     Display detailed information on one or more networks
  ls          List networks
  prune       Remove all unused networks
  rm          Remove one or more networks
cant delete a ntwrk that has containers connected to it, must first disconnect the container from the netwrk 

docker network ls    To list the netwrks

CUSTOM BRIDGE NETWRK
 docker network create tesla        ***to create the tesla netwrk

HOST NETWRK
docker run --name javaapp -d --network host mylandmarktech/java-web-app   
   ContainerPort: 8080  

NONE/NULL NETWRK
If we create container in none/null network. Container will not have IP Address.
We can't access  containers in this network  Internal or external 

docker run --name hello -d --network none mylandmarktech/hello   


DOCKER8&9

Docker Peristent Volumes(Docker Named Volumes)
=============================================
docker volume create mongodata  ... we hv to create our own vol; mongodata .... this is now using persistent vol which is being manged by docker
docker volume create mongodata -d local   ... ..  here am passing a driver 
docker volume create mongo33   ............ here am nt 
docker volume create -d local data 
docker volume ls  


ubuntu@docker:~$ docker-compose
Command 'docker-compose' not found, but can be installed with:
sudo snap install docker          # version 20.10.24, or
sudo snap install docker          # version 20.10.24
sudo apt  install docker-compose  # version 1.29.2-1
See 'snap info <snapname>' for additional versions.

ubuntu@docker:~$ sudo apt  install docker-compose -y      ... successful
docker compose -version to see the version of docker compose that we v created  ... version 1.29.2 build unknown

vi docker-compose.yml  and paste the file 


**************** nxt
5) check if the syntax are ok
docker-compose config      ................if ders an errror, it will tell you

6) create the containers/DEPLOY THE APPLICATION
docker-compose up -d 
       docker ps .... the containers are running


# Remove Services/Contianers  .................  to destroy the containers
    docker-compose down




Docker Compose Commands: will give u all the docker compose command

docker compose commands 
Commands:
  build              Build or rebuild services
  config             Validate and view the Compose file
  create             Create services
  down               Stop and remove resources
  events             Receive real time events from containers
  exec               Execute a command in a running container
  help               Get help on a command
  images             List images
  kill               Kill containers
  logs               View output from containers
  pause              Pause services
  port               Print the public port for a port binding
  ps                 List containers
  pull               Pull service images
  push               Push service images
  restart            Restart services
  rm                 Remove stopped containers
  run                Run a one-off command
  scale              Set number of containers for a service
  start              Start services
  stop               Stop services
  top                Display the running processes
  unpause            Unpause services
  up                 Create and start containers
  version            Show version information and quit
