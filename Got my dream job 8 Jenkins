developers write and comit codes to github, we will use jenkins for automation, with jenkins you are sure to automate these processes. once this is committed to github, a
new commit/version of the application for eg, jenkins will pull, so we are goin to configure an automation for between jenkins and github that automation can be configured
using pull SCM or github webhook.
once jnekins clone the version, it will communicate with another tool called maven and the use of maven is to create packages before the packages are deployed jenkins is 
comunicating with sonarqube/ sonarcloud for code quality to check if the software written by developers is good enough for deployment .
if code quality analysis results to a pass, it means the application can be deployed to an app server which can be running on tomcat or JBOSS ie our client environment.

56:30
************* before we deploy we make sure it is backedup in artifacts 


we need to create a backup for our artifacts so that if in the process of deploying tesla there happens to be a failure our backup system is called nexus or Jfrog and our 
artifacts will be bcakedup here, so we are going to have repositories and and inside the repo eg, we will have teslar.war
there should be a monitoring system to monitor our system. 
therfore, jenkins will connect with a notifier so we are configuring a notification called newRelic . if there is a problem an alert will be triggerred that will send out 
email notification so members of the team will be notified that something is going wrong 
jenins acts as a distributor.




LINUX , scripting, git , maven, tomat/ngnix tomcat, sonar, nexus, jenkins , aws, docker, k8, terraform, ansible, k8/helm 
In our env, we use LINUX OS for file,process,package,security mgt, GIT FOR VERSIONING, MAVEN FOR BUILD, jenkins automates the end to end process, 





   (includes jenkins1&2 and jenkins3, INTEGRATING ALL THE SOFTWARES)  while jenkins 4 is types of jenkins project/RUN JOBS( Using the diff jenkins options)
HOW DO WE EXPOSE THE APPLICATION TO ENDUSERS, DEVOPS, WHAT IS JENKINS AUTOMATION, CI/CONTINOUS INTEGRATION, CD/CONTIONOUS DELIVERY, CD/CONTINOUS DEPLOYMENT, WHO IS DEVOPS ENGR,
 TYPES OF JENKINS PROJECTS,types of jenkins project/RUN JOBS (steps in Using the jenkins options) PLUGINS MANAGEMENT: How to use plugins to achieve 
automation,JENKINS MASTER -SLAVE ARCHITECTURE:, JENKINS PIPELINE PROJECT/JENKINS SRIPT , 7&8 MULTI PIPELINE JOBS, SHARED LIB & JENKINS SECURITY

JEN7&8
the reason why devops engr are paid so much moni is bc they can write jenkins file and its dif frm writing codes by developers wich is very complex 
writing code is more complex


JEN6
maven is running in jenkins so we 
2:13:00   day1)start runinng, day2)keep runinn, day3)continue to run, 4)dnt stop running


Jenkins portNumber: 8080  



  youa re a build and release enggr if you are able to deploy to tomact 
if you are able to carry out the automation where everything is configured to be able to deploy to tomcat. not even to deploy to tomcat, if you are able to upload artifacts to 
nexus, you are a build and release engr or CI, continous integration which falls under build and release engr which means you are a build and release engr



                                        WHAT IS JENKINS AUTOMATION  ??  Jenkins portNumber: 8080  

      DEVOPS

     Its not (just) tools      eg maven is not equal to devops
 git is not equals to devops
 thefore, devops is the never ending process of continous improvement 
for eg it includes continous integration, continous development, continous testing, continous deployment and continous monitoring
thats what devops is all about 
one can ask why continous integration?
continous integration helps in the early detection of bugs, helps in determining code-break, enables continous deployment, enables automated testing, reduce risk of longer time consuming project, increases the quality of software via 
continous code quality 

when developers comit their code thers a build, unit testing is done, integration testing is done and thats our CI piple , once that is performed, (2nd part) we can now deploy the appl into production, so this entire process if it is
automated the first part is the CI proces and the 2nd is the CD process.
  
 (we are able to automate the task)
continous integration ensures continous deployment such that wherever our CI job succeeds we are going to trigger what is called cd jobs, cd is all baout continous delivery/
deployment 

   47:30                  
                jenkins      CI = continous integration
                 ci/cd        CD = continous delivery
                              CD = Ccontinous deployment

   jenkins      CI = continous integration
                 ci/cd        CD = continous delivery
                              CD = Ccontinous deployment


48.30  Ci pipeline


49:00                                   CD = Continous Delivery

       code            build        staging          MANUAL
     gitgithub     >>>>  test  >>>>> QA/UAT   >>>>   APPROVAL   >>>>>> PRODUCTION


                                   CD = Continous Deployment

        code            build        staging          
     gitgithub     >>>>  test  >>>>> QA/UAT   >>>>   AUTO  >>>>>> PRODUCTION
 

       CONTIONOUS DELIVERY
52:27 when ther is namual approval it falls under continous delivery

CONTIONUS DEPLOYMENT
 when it is automated

   Developers commit code using git& github once thers a commit we want to build, after build its testing then we deploy to a test environment, eithr to the staging env or 
QA or user acceptance testing from there we deploy to production bt before deployment we need to perform additional testing, the process of additional testing can be manual 
or automated, it its manual it could include integration testing and so on.
mauual testing implies thers a manual approval, maual gate somebpdy need to maullay approve and say the job done, its good, take it to the market and mauual approval is 
called continous delivery but when its automated its continous deployment and the process of deploying this to the staging environment is continous integration 


 A devOPS ENGR IS A subject matter expert bc he has subskills form all thses guys, he sits in the middle and connects with all these guys


         CODE                               PLAN                                MONITOR 


OPERATE                            D....... E......V..... O......P......S            DEPLOY



                  RELEASE                TEST                            BUILD


 The operation team that is configuring the entire infrastructure, they ensure all servers are up and running 



 JENKINS IS An automation tool
its an open source continous integration (CI) Tool within in java

 Saas ( software as a service) doesnt take much time like Iaas which requires server installation
 GITHUB is a SaaS tool ---  server Installation NOT required    
      - Nexus is an IaaS tool ---  server Installation required        
 github is a software as a service while Nexus is an infrastructure as a service, Nexus needs an infrastructure to install nexus software 


1;14:54   Jenkins can be installed in multiple platforms 
linux, windows, MacOs, Solaris

Jenkins, is an open source Continuous Integration (ci/cd)
tool written in Java. 
Jenkins can be installed in Multiple Platforms:  
  Linux /Windows /macOS /Solaris 


***** not all software can be installed on all platform eg Ansible 
ansible  can be installed in Linux Platforms ONLY  : 



What is Jenkins automating ?
  
How do you use Jenkins for CI/CD automation ?
In Landmark, we manage federated JAVA based web & enterprise applications
(web.ear) for Fintech Clients/ DOD/ E-commerce.
We also manage a few python, NodeJs and .net web applications

FinTech = Financial Technology : 

Financial Technology can perform the following;
1. payment Gateways   
2. account creation 
3. credit management 
2. etc. 

FinTech = Financial Technology can be use by any company.  
POS Machine =   
  Banks     = TD / RBC / BOA / CHASE / Barclays / UBA / Ecobank / BICEC
  Insurance = STATEFARM, belair, Alstate/BeneficialLife 

  Payment Gateways = paypal, visa, master, interac, 
                     pushpay, cashapp, zelle, mobileMoney  

  E-commerce = amazon, ebay, alibaba, jumia, facebook MarketPlace / Telecoms  = MTN, Vadofone, Glo, verizon, tmobile, at&t/  Health care = NIS, NIH, 

  Retail = Walmart, cotsco, tesco, /  Airlines = AA, UA, BA, KLM, AC, westJet, emirates, airpeace, camairco/ sports = FIFA, UEFA, CAF, FECAFOOT, NBA, UFC, ETC./  Governments = DOD, IRS, CRA, FIRS , 
  
  betting = LOTTO, 1XBET, / Oil & Gas = shell, total, BP, NNPC /Crypto = coinbase, FTX, bitcoin/ over 95% of companies uses FinTech today =
  
  Taxi =  uber, Lyft, yango, bolt, swift /Food chain = pizza, ubereats, doordash, / IT Companies = AWS, AZURE, GCP, Landmarktech /auto = Tesla, Toyota, Mercedes, BMW, Honda, GMC, 



Saas ( software as a service) doesnt take much time like Iaas which requires server installation

Nature of application:
  We support critical applications for a FinTech/e-commerce CLIENTS 

DevOps/JENKINS is all about automation   

7Cs:  to take note of
   CD,t---> Continuous Development [Git/GitHub/IDEs /GitBranch/gitTag
   
   CI --> Continuous Integration [Git/GitHub/Jenkins/maven/sonarqube/nexus] 
              [Build and Release Engineering]
   
   CD --> Continuous Delivery [build=packages/artifacts-->testing/UAT--manualApproval--- prod]   but wahen it goes to auto from UAT/testing = continous deployment
   
   CD --> Continuous Deployment [build=packages/artifacts-->testing/UAT--auto--- prod]
   
   CM --> Continuous Monitoring
            https://www.tesla.com/en_ca/powerwall  
            https://www.tesla.com/en_ca/modelx

   CS --> Continuous security
   CT --> Continuous Testing 



JENKINS 3
                             
AUTOMATING BUILD IN JENKINS 

Build Now:  is a limited measure of automation  

Automate builds using build triggers.

1:35:35
if u are doing software builds where developers are creating new version of the application, they are changing stuff constantly, we can configure pull SCM 

use cases:
     Software builds 
     application build and Deployment
     Started by an SCM change
   

     Started by user: LandmarkTechnologies = BuildNow  
     Started by timer: build periodically 
     Changes in SCM  : pollSCM

when we configure pull SCM , a build will be triggered but this only happens if theres a new version of the application

******* so i have a job java base fintech project in jenkins and bc i hv configured pull SCM, every minute will make a REq IN GITHUB  searching for new version to do a 
a build  ( its all about versiong) if theres no new version , it doesnt do a build .    **** scm changes ie changes in SCM

1:45
3. GitHub-webhook :
   GitHub will notify Jenkins to trigger a build once there is a change in the scm [src]  

****** so in github, we will create a webhook, if thers any change inour application , software or code, github will notify jenkins so therfore no need for a
timer 
if thers a new version of the applictaion , if developers commit new version 
we can also configure webhook for something else eg if we want to do code quality analysis with sonarcloud , we can configure github webhook so that if
developers commit new version of the applictaion, code quality analysis will be executed in sonarcloud and report will be created

1:48:00
we will know thers a new version bc of new commits or pushes, the webhook will be triggered


JEN4&5
 TYPES OF JENKINS PROJECTS,types of jenkins project/RUN JOBS (steps in Using the jenkins options) PLUGINS MANAGEMENT: How to use plugins to achieve 
automation,JENKINS MASTER -SLAVE ARCHITECTURE:

--Plugins extends the functionality of jenkins, maven, etc.  (check jen4&5 (B) for how to install/manage 

FREE Style project            when u use maven to do a build under free style project, u take more time &nid to do a lot of configurations(we ar always clicking on configure
software builds            so instaed of using freestyle we can use maven projects. to ensure d time used to configure d project is kept to the barest minimum, we use maven project
application deployent
server monitoring/application performance monitoring=APM

******** we can also build using graddle

jenkins pipeline is just a file we want to create a file , everytin will run inside a node, jenkins server is a node




 JEN6   PIPELINE JENKINS PROJECTS:    (comit id helps identify the diff versions)

FREE-style
maven
we want to create a pipeline that can automate the test and build process  
pipeline:  
  Jenkins Pipeline scripts are generally written in groovy ,, what is a groovy language?
  Jenkins Pipelines scripts are called Jenkinsfile   **(we hv pipeline script that u can write, we also hv pipeline script from scm)



              JENKINS FILE
Jenkinsfile is a file generally written in the groovy language:
Jenkinsfile helps to better manage and automate jenkins jobs/tasks .Jenkinsfile introduces infrastructure as a code concept with all its benefits 

         TYPES OF JENKINS SCRIPT
  we have scripted and  declarative Pipeline scripts
scripted file starts with a node while declarative starts with pipeline
scripted file is restricted to a particular node e.g in pipeline we hv  "agent any

**** BUILDING FROM PRIVATE REPO  wil be done 9 out of 10 in the coy

JEN7
multiBranch Pipeline job : we can build in multiple branches
=========================
Project private repo - https://github.com/LandmakTechnology/maven-web-app  
   we are expected to see line of development
               Git Branches - Are Lines of development 

 someone is aking we hv nt deployed to tomcat ,, we are going to be deploying containerized app, tomcat was an introduction
  1:12:18 all of these is nt happening in one agent , mvn package will tk place in maven build server, sonar,the code quality analysis will talk to a 3rd party server wich is sonarqube server

our jenkins is running in linux

=======================
SHARED LIBRARIES    .. we execute jenkins shared lib to ease hw we write n manage jenkins file, so if i hv 24 jenkins files to write that are performing similar task 
                           ill use shared lib to simplify my job

Jenkins security: where we do the changes depends on where jenkins was installed 

we need users to access  Sonarqube, nexus, jenkins, github, kubernetes. it will be too much manual work to create these users in all the servers so we can integrate
jenkins with LDAP authentication server,, so we'll hv all the login credentials of users , username n passwd stored in the LDAP then connect LDAP to communicate withjenkins
and each of the servers.then all the users are able to access jenkins automatically its called a single signup, where the signup credentials is configured in the LDAP server,
once u connect to LDAP sucessfully, u can connect to any other resource in ur environment. this all securing our jenkins environment. 


the reason why devops engr are paid so much moni is bc they can write jenkins file and its dif frm writing codes by developers wich is very complex 
writing code is more complex












********************  INTERVIEW****************
***** from sonarqube2*********8 
developers write and comit codes to github, we will use jenkins for automation, with jenkins you are sure to automate these processes. once this is committed to github, a
new commit/version of the application for eg, jenkins will pull, so we are goin to configure an automation for between jenkins and github 
*****IGNORE **********that automation can be configured using pull SCM or github webhook.
**********ignore**********  we need Jenkins Git Integration  ie, installing git in jenkins , we need this integration to be able to clone/pull the code/application from SCM - Github
once jnekins clone the version, it will communicate with another tool called maven and the use of maven is to create packages before the packages are deployed jenkins is 
comunicating with sonarqube/ sonarcloud for code quality to check if the software written by developers is good enough for deployment .
if code quality analysis results to a pass, it means the application can be deployed to an app server which can be running on tomcat or JBOSS ie our client environment.

in our env,before we deploy we make sure it is backedup in artifacts 
we need to create a backup for our artifacts so that if in the process of deploying,In a situation where the MAVEN server goes down in the deployment, we just discontinue the process and pull from our artifactories 
and our backup system is called nexus or Jfrog and our artifacts will be bcakedup there, 
for our deployment;
we do not recommend to deploy to one appserver/tomcat bc if the app goes down it will be a problem, therefore in our deployment we use ansible or universal code UCD deploY, to deploy to multiple servers for high availability
for high availabilty we have multiple app servers eg app server 1, app server 2, app server3 with the help of another automation tool called ansible
ALso,there should be a monitoring system to monitor our system. 
therfore, jenkins will connect with a notifier so we are configuring a notification called newRelic . if there is a problem an alert will be triggerred that will send out 
email notification so members of the team will be notified that something is going wrong 
 this is the pipeline process, JENKINS is all about automation and jenkins can help to automates the end to end process 
 so for automation; we integrate Jenkins with: Git/Github ,maven, Sonarqube, nexus ,tomcat, nginx webserver, all of these ensures continous deployment.
 we automate using build triggers in jenkins, we can schedule/programe our jenkins job to do a build whenever developers commit a code/diff versions, developers nid git for versioning
we can shedule when deployment is taking place by using build triggers
using  IDEs = Integrated Development Environment simplifies the deployment process  and pluggins; which extends the functionality of jenkins, maven, etc.   
 





START 

DevOps/JENKINS is all about automation   
Jenkins portNumber: 8080  


 JENKINS IS An automation tool
its an open source continous integration (CI) Tool within in java


DEVOPS
  Its not (just) tools      eg maven is not equal to devops
 git is not equals to devops
 thefore, devops is the never ending process of continous improvement 
for eg it includes continous integration, continous development, continous testing, continous deployment and continous monitoring
thats what devops is all about 
one can ask why continous integration?
continous integration helps in the early detection of bugs, helps in determining code-break, enables continous deployment, enables automated testing, reduce risk of longer time consuming project, increases the quality of software via 
continous code quality 

  (we are able to automate the task OF our CI pipline
when developers comit their code thers a build, unit testing is done, integration testing is done  , once that is performed we can now deploy the appl into production, been continous deployment bc we automated the process.

 Ci pipeline


49:00                                   CD = Continous Delivery

       code            build        staging          MANUAL
     gitgithub     >>>>  test  >>>>> QA/UAT   >>>>   APPROVAL   >>>>>> PRODUCTION


                                   CD = Continous Deployment

        code            build        staging          
     gitgithub     >>>>  test  >>>>> QA/UAT   >>>>   AUTO  >>>>>> PRODUCTION
 

       CONTIONOUS DELIVERY
52:27 when ther is namual approval it falls under continous delivery

CONTIONUS DEPLOYMENT
 when it is automated

 CONTINOUS INTGRATION
the process of deploying this to the staging environment is continous integration

   Developers commit code using git& github once thers a commit we want to build, after build its testing then we deploy to a test environment, eithr to the staging env or 
QA or user acceptance testing from there we deploy to production bt before deployment we need to perform additional testing, the process of additional testing can be manual 
or automated, it its manual it could include integration testing and so on.
mauual testing implies thers a manual approval, maual gate somebpdy need to maullay approve and say the job done, its good, take it to the market and mauual approval is 
called continous delivery but when its automated its continous deployment and the process of deploying this to the staging environment is continous integration 


Nature of application:
  We support critical applications for a FinTech/e-commerce CLIENTS 

 FinTech = Financial Technology can be use by any company.  
POS Machine =   
  Banks     = TD / RBC / BOA / CHASE / Barclays / UBA / Ecobank / BICEC
  Insurance = STATEFARM, belair, Alstate/BeneficialLife 

  Payment Gateways = paypal, visa, master, interac, 
                     pushpay, cashapp, zelle, mobileMoney  

  E-commerce = amazon, ebay, alibaba, jumia, facebook MarketPlace / Telecoms  = MTN, Vadofone, Glo, verizon, tmobile, at&t/  Health care = NIS, NIH, 


7Cs:  to take note of
   CD,t---> Continuous Development [Git/GitHub/IDEs /GitBranch/gitTag
   
   CI --> Continuous Integration [Git/GitHub/Jenkins/maven/sonarqube/nexus] 
              [Build and Release Engineering]
   
   CD --> Continuous Delivery [build=packages/artifacts-->testing/UAT--manualApproval--- prod]   but wahen it goes to auto from UAT/testing = continous deployment
   
   CD --> Continuous Deployment [build=packages/artifacts-->testing/UAT--auto--- prod]
   
   CM --> Continuous Monitoring
            https://www.tesla.com/en_ca/powerwall  
            https://www.tesla.com/en_ca/modelx

   CS --> Continuous security
   CT --> Continuous Testing 


AUTOMATING BUILD IN JENKINS 

we can Automate builds using build triggers.
if u are doing software builds where developers are creating new version of the application, they are changing stuff constantly, we can configure pull SCM 
and every minute will make a REq IN GITHUB  searching for new version to do a 
a build  ( its all about versiong) if theres no new version , it doesnt do a build .    **** scm changes ie changes in SCM
 also we can configure  GitHub-webhook :
   GitHub will notify Jenkins to trigger a build once there is a change in the scm [src]  

**** so in github, we will create a webhook, if thers any change inour application , software or code, github will notify jenkins so therfore no need for 
a timer 
if thers a new version of the applictaion , if developers commit new version 
we can also configure webhook for something else eg if we want to do code quality analysis with sonarcloud , we can configure github webhook so that if
developers commit new version of the applictaion, code quality analysis will be executed in sonarcloud and report will be created
we will know thers a new version bc of new commits or pushes, the webhook will be triggered



