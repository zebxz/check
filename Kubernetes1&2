when we talk abt kub, we classify an all imp tool bc of its imp  of to me as a devops engr, its so important that one of the jobs i can do is a kubernetes administrator 


WHAT IS KUBERNEYES??????????????????????????
IT is an ochestration engine, an open source platform for managing containerized applications... kubernetes is responsible for container deployment, scaling, descaling of
containers and lB.. 
so u can deploy ur containers using kuber, u can scale, descale  and u can LB traffic 
actually, kubernetes is nt a replacement for docker bt can be considered as a replacement for docker swamp , kuber is basically more complex than swarm and REQ more work to 
deploy.. born in google written in go and go lang , it was donated to claud native computing foundation in 2014, kuber version1.o was relaesed on july 21st 2015
TK NOTE ITS imp to v that understanding or that initial discussion when it comes to kuber n some of its features
3.33
fEATURES:
1)the first feature it has is that it supports what is called automatic scheduling ie it provides advance scheduler to launch contianers on node
2) it has self hidden capabilities, rescheduling, replacinging and rescheduling containers which are dead and the bauty abt it is that if u deploy a wrong application u can 
go back to what was running before so it has automATED ROLBACKS AND rollouts 
so kuben supports rollouts and rollbacks for the desired state of containerized application therfore, if u had a version running and u v a deploy a new version n ders a 
problem, u can rollback 
3) it has horizomtal scaling and LB , kub can be scaled up and down d appl as per REQuirment
4) service discovery & LB
5)WITH kuber DERS no nid to worry about netwrkn n communicatn bc kub wil automatically assign ip address to containers n a single dns name for a set of containers that can LB
TRAFFIC inside the cluser .... 5:00
containers get their ips so u can put a set of containers behind a single L Balancer ... this is a very key aspect service discovery n LB , hw powerful is that 
6)it also supports storage ochestration, u can mount the storage system of your choice , u can either opt for local storage or cjoose a public cloud 



How is the kubernetes architecture like  5:50
so far we v looked at containerization, hw appl are containerized and under containerization u realise that we can use sfwares like docker so when it comes to container , we 
use docker to containerize our application, we can also use rocket, container-d 
CONTAINERIZation involves writing and modifying docker files and using those file sto create images and shipping the images to image registries n from the registries this 
images can be shippe dto any environment , now therefore all ur discussion in docker can be limited to just creating and managing docker files . we cud also use sfwares 
like docker to deploy applications , to deploy n mange containers bt is it recommanded, shud we use docker ??? we shud nt and u are going to see that shortly, we shud rather
use container managers or ochestration tools like docker swarm kub n open sheet.
when we studied dodcker, we deployed appl using docker bt what are the limitations using docker to deploy applications .,.. we ar going to look at that shortly 7: 43 
bt these ar the contarization software




Kubernetes:
Containerization:
 --> Docker, Rocket(Rkt),Container-d
   Containerization involves writing/modifying Dockerfiles and using those files
   to create images and shipping the images to image registries.  
   From the registries these images can be distributed to any environment.  

  We could also use Containerization softwares like Docker to deploy 
  and manage Containers


Container Orchestration Tools --> :
   Docker Swarm,
   Kubernetes,
   OpenShift

7:58    ###########################
Kubernetes:  began in 2015 which implies that it has been around for 8yrs, so if u go to an interview u cant claim that u have 10years kuber exp
  these are things to tk note of ..... bc the way dis course is deployed by d time u go tru kub u ar like somebody with atleast 7years of kub exp
  July 2015  --- 2023  = 8years    


we also hv tools like : that began 2023 ..... so u cant go to an interview n tell dem u v 10yrs of experience in it
chartGPT started in 2023.     

*************************************    10:59 
NOW LETS LOOK AT HW POWERFUL KUB is with a diagramatic illustration:
when we did docker we realise that if u hv docker there wil be docker engine, with d help of the engine we ar abl to crtae images n run containers
now if i run my containere.g webapp der ar some problems that dodcker has : if i run my container and thers a problem with the container it goes offline, docker is nt able 
to recreate the container , so i shud nt deploy my appl using a system that will nt intervenene in a diaster wher a sys is down bt cannot be recreated,,, 
we can use docker to do 2things: e.g , we v a docker build server wer we ar executing command like docker build, so in d build server, we ar creating images , frm the build 
server we wnt to run containers in the deployment sevrer ...
with docker i cannot v more than 1 replica of webapp for e.g u are deploying ur appl n ders a spike , no i cant v multiple replicas in docker , e.g: so if u decide to run
docker run -name webapp -replicas 5 , ie trying to get the number of replicas u wnat, it wont work.. docker doesnt support it
also, if my engine goes down , my contaiiners will stop running 
also docker doesnt support a scenario wher i can v multiple serveers in a cluster  e.g docker engine1 (with container), docker engine2(with containers) such that if one 
engine is down the 2nd engine can support it ,, docker doesnt v such sys bc the docker ntwrk dose nt support multi hostng wger we can v a cluster of servers, docker 
netwrking sys doesnt support multi hosting and thats a big problem ,, the docker system doesnt v an overlay ntwrk wher u can v a cluster of server, no overlsy ntwrk support
and d worst is that when appl ar deplloyed, to expose them to endusers is very limited and we wil see hw it is diff with kub... bc in docker we do port forwarding bt we wil
see what kub brings to the table


16:00
kubernetes architecture:  why are we doing kub and why is kub imp in my devops journey , that in all thy knowings u must knw kub
                                ############  kubernetes comes with a cluster in the cluster we v :
controller noder or controlPlane/MasterNodes: this has some components to tk note of:
  apiServer  : this is the main entry point into the cluster, it performs admin task in the cluster
  etcd  : the key value store ,,, this is like a database
  scheduler  : 
  controllerManagers   : 
workerNodes:  this is wher appl are running and here we can v node1, to node9  . the components of the nodes includes:
  kubelet   : this is the main agent that runs on the worker node. its the pry node agent
  container runtime : and d container runtime we ar going to be seeing is = [Container-d] 
 kube-proxy 
21:30
############### in kub if u wnt to perform any task e.g u want to deploy an appl , for that deployment to happen ther are a few things that kub uses, w ecall it d client
kub client   for e.g we hv docker client , the docker cli
22:11
kubernetes-client: we also hv kub cli , command line interface ,, command line interface here is kubectl
  kubectl  :
     kubectl create/delete/get/describe/apply/run/expose 
     kubeconfig [.kube/config ] file will authenticate the admin  
  
so we v the cli which we can use to make some api calls and we also v other apis
the caller admin/Developer/Engineer  
  ui- DASHBOARD  
  api 
=====================================
kubernetes: 
   cluster:
   nodes:  
   pods:  
   containers :  

cluster ---> nodes ---> pods  ---> containers  :

kubernetes security - RBAC:
  Developers [ Paul, Joyce, Chidi ] 
  Engineers  [ James, Dominion, Janet ] 

authentication via kubeconfig : 
authorisation via RBAC:

Installation:
============
K8S=Kubernetes
Local K8s Cluster(Single Node K8s Cluster)
------------------------------------------
   minikube
       choco install minikube  = windows   
       brew install minikube   = macOS  
       minikube start  
   Kind   = 
   Docker Desktop 
      https://docs.docker.com/desktop/kubernetes/
  POC = 

Multi Nodes Kubernetes Clusters:
================================
1. Self Managed Kubernetes [k8s] Cluster = IaaS--EC2  :
    kubeadm --> We can setup multi node k8's cluster using kubeadm.
    kubespray --> We can setup multi node k8s cluster using kubespray
     (Ansible Playbooks Used internally by kubespray).
WITH  Self Managed Kubernetes [k8s] Clusters both the    
     controlPlane: [apiServer, etcd, scheduler, Controller Managers] 
      and 
     workerNodes: [  kubelet, containerRuntime-Container-d, kube-proxy]  
  are managed by the Admin/Kubernetes/DevOps Engineers

2. Managed k8s Cluster  (Cloud Services) = PaaS  : 
   The controlPlane is managed by a cloud provider or third party.  
   The controlPlane and all it components are managed by the Cloud provider 
   The workerNodes are managed by the Admins
   EKS --> Elastic Kubernetes Service(AWS)
   AKS --> Azure Kubernetes Service(Azure)
   GKE --> Google Kubernetes Engine(GCP)
   IKE --> IBM K8s Engine(IBM Cloud)
    Kubernetes Cluster = k8s  

3. KOPS: is a software use to create production GRADE/ready k8s in AWS and  
         azure for the kops beta version  
         It creates a highly available kubernetes services in Cloud like AWS.
            KOPS will leverage Cloud Sevices like:
              vpc, 
              AutoScaling Groups, 
              LoadBalancer, 
              Launch Template/configuration
              ec2-instances nodes [workerNodes and masterNodes]
              s3  

 kops create cluster --name mycluster --az us-east-2b nodes-4 master 3    

    iam role/user  

Rancher: - Using Rancher we can deploy both managed and self managed k8s
           Rancher serves as a glass to access and manage multiple k8s  
           from the rancher dashboard [UI]  - rancher dashboard 
           authentication and authorisation: EKS/AKS/GKE/IKE 
           IAM Role for EKS 

Ticket 001:
  Setup a multi nodes self Managed kubernetes cluster using kubeadm.
  requirements -- 

1. check the kubernetes official documentation  :
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

2. check the company's documentation for kubeadm setup    : 
https://github.com/LandmakTechnology/package-management/blob/master/kubeadm/READme.md


master publicIP= 3.128.206.139

node  
node9 publicIP = 3.148.106.135  


docker resources/objects use to deploy applications:
  Dockerfiles/images/networks/volumes/docker-compose.yml/etc.

ticket002
========
Deploy workloads in kubernetes;
kubernetes resources/objects used to deploy application includes:
kubernetes Orchestrate and managed containerised Applications  
This applications run as containers  
These containers are housed in pods  
Pods are housed in nodes    
nodes are housed in the cluster   

kubernetes resources/objects used to deploy application include:
   Pod :
or    
 controllerManagers:
      Replication Controller
      ReplicaSet
      DaemonSet
      StatefulSets
      Deployment
      Volume
      Job       

Exposing/accessing applications = Service Discovery:
    Service Types:
    ClusterIP
    NodePort
    LoadBalancer
    ExternalName  
  ingress 
  networkPolicy 


Namespace:
  It is a virtual cluster inside your cluster 
     [ dev / uat / prod ],
     [sales, accounts, cs, payroll]
  pros:
    isolation  
    permissions 
       dev  - Developers
       prod - Engineers
    resource utilisation  
       dev  - cpu=5Gi mem=1000Mi 
       prod - cpu=1000Gi mem=8000Mi 
    performance
       High priority 
    RBAC - Security: 
      NameSpace
      Role   = dev [list/read]
      RoleBinding  
         Users  
         groups  
         ServiceAccounts  
  ClusterRole  
  ClusterRoleBinding
  ServiceAccounts  

ubuntu@master:~$ kubectl get ns
NAME              STATUS   AGE
default           Active   57m
kube-node-lease   Active   57m
kube-public       Active   57m
kube-system       Active   57m

Ticke3:
  Create fintech and ecommerce Namespaces   
kubernetes uses the kubectl client or the UI to run workloads.
  kubectl get namespace
  kubectl get ns 

 create create namespace fintech --v=8 
 create create namespace dev         

ubuntu@master:~$ kubectl get nodes
NAME     STATUS   ROLES           AGE   VERSION
master   Ready    control-plane   61m   v1.28.2
node1    Ready    <none>          50m   v1.28.2
node5    Ready    <none>          42m   v1.28.2
node9    Ready    <none>          47m   v1.28.2
ubuntu@master:~$ kubectl get pod
No resources found in default namespace.
ubuntu@master:~$ kubectl get pod -A
NAMESPACE     NAME                             READY   STATUS    RESTARTS      AGE
kube-system   coredns-5dd5756b68-75vwg         1/1     Running   0             61m
kube-system   coredns-5dd5756b68-qmtz8         1/1     Running   0             61m
kube-system   etcd-master                      1/1     Running   0             61m
kube-system   kube-apiserver-master            1/1     Running   0             61m
kube-system   kube-controller-manager-master   1/1     Running   0             61m
kube-system   kube-proxy-9bhvd                 1/1     Running   0             42m
kube-system   kube-proxy-cl4lt                 1/1     Running   0             47m
kube-system   kube-proxy-jbkcx                 1/1     Running   0             51m
kube-system   kube-proxy-wnf8k                 1/1     Running   0             61m
kube-system   kube-scheduler-master            1/1     Running   0             61m
kube-system   weave-net-9d22b                  2/2     Running   1 (42m ago)   42m
kube-system   weave-net-nnhrk                  2/2     Running   1 (58m ago)   58m
kube-system   weave-net-qwg7q                  2/2     Running   1 (46m ago)   47m
kube-system   weave-net-rzndz                  2/2     Running   0             51m

https://kubernetes.io/docs/setup/best-practices/cluster-large/
For very large clusters NB:
   No more than 5,000 nodes
   No more than 110 pods per node
   No more than 150,000 total pods
   No more than 300,000 total containers

we deploy workloads using Imperative and declarive approaches    
-#Create Name Space Using Imperative approach =  Command
    kubectl create namespace <nameSpaceName>
    kubectl create namespace dev  

-declarive approach = files and less commands  
-# Using Declarative Manifest file 

Ticket4: Create prod namespace using the declarive approach.  
========
kubectl create namespace prod    

apiVersion: v1    
kind: Namespace
metadata:
   name: prod  
================
  kubectl apply -f ns.yml  

PODS:
====
POD --> Pod is the smallest building block use to deploy applications in k8s.
Pod represents running processes. Pod can contains one or more containers.
These container will share same network, storage and any other specifications.
Pod will have unique IP Address in k8s cluster. 

Pods
 SingleContainerPods --> Pod will have only one container.       98%
 
 MultiContainerPods(SideCar) --> POD with two or more containers. 2%  
         application Container :
           webapp  
         SideCar containers:
           logMgt  container  
           utility Container [ Truck = ]
         

How to deploy run/execute tasks/workloads in kubernetes??
   1. Imperative  approach 
        By using commands 

   2. Declarative approach
        By using files [manifests files]  

-# Create POD Using Command
kubectl run <podName> --image=<imageName> --port=<containerPort> -n <namespaceName>
kubectl run hello --image=mylandmarktech/hello --port=80 -n dev  

Docker images = dockerHub other registries:
-- python-web-app
   nodeweb-app 
   net-webapp 
   mylandmarktech/hello
   nginx 
   mysql  
   mongo  
   jenkins  
   sonarqube  
   nexus 

Use the declarive approach to deploy workloads in kubernetes:
  Manifest files = kams 
  Manifest files are written in yaml/yml language 

key:value  pairs 
name: simon    
dictionary: number of key:value  pairs 
list:


pod.yml template
======
apiVersion: v1    
kind: Pod     
metadata:
  name: <podName>
  namespace: <namespaceName>
  lables:
    key: <value> 
    key: <value> 
spec:
  containers:
  - name: containerName   
    image: imageName  
    ports:
    - containerPort: podNumber

    
pod.yml  
=======
kind: Pod  
apiVersion : v1   
metadata:
   name: webapp    
   labels:
     app: web  
     tier: fe  
   namespace: dev  
spec:
   containers:
   - name: web 
     image: mylandmarktech/hello   
     ports:
     - containerPort: 80  

   - name: logmgt 
---
EXPOSE 80     
