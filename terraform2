whenever you are installing a package, you have to make sur eyou an adminstrator or it wont allow you

depending on ther version am running the version dert the syntax, though most of them are backward compartibkle, it wii jst give u warning that this has been depricated,u nid to upgrade
when it cms to prod u nid to constrin ur version of terfrm so ur code doesnt break
the syntax of code that was written 5years ago will be dif frm code 

INTERVIW QUESTION   ................. 54:44
terrfrm setting blocks 
 e.g 
if the code is running in produ n terfrm version is version 1.0, then i nid to constrain the ccode to 0.9 so that my code wil stil run .if i run trfrm init it wil download the ryt version 
of trfrm (ver 9), the ryt plugin bc am constraining it  bt if i leave it open , if i dnt pass the version then init will always download the current version n when that happens my code 
may nt be comparible n it wil break n give me error 
so thats how we use terfrm setting block

 when we dnt pass credential we say its goin to use a default prorfile

RESOURCE BLK
we use a resource blk to create anytin we want to create
inorder nt to hardcode the values, we use variables
and when we ar workin with modules, we see that we v given users the flexibility to pass in their own values

OUTPUT VALUES BLK
after our resource hs been create an d we wnt to get a n attribute out of the resource then we use an output blk
we hvc to configure an output, we hv to give it d value 
and the value of our output it uses dot (.) notation
we hv to reference our (resource type.the resource name.the attribute) 
e.g aws_instance.instl.public_ip       .... so this is referencing the resource that we interested in.

LOCAL BLK  ..........1:09 
local.name
we use local blk if we hv long names that we dnt want to repeat writing it in the code , we can define them in my locals blk and then just reference it in my code if this
is smt that is repeatative bc i may hv concatenating variables  e.g the BD  value is the (variable "vpc_name" and variable "my_env ), so i can jst define a locals blk n just 
referencd it, so that makes my codes mangeable and easy to read bc hv done all my definitions in my local blk and am just referencing local
so i can put as many values in the local as i want if its a long name i might use inside of my code and then i just reference local
this is hw we use a locals blk


resource "aws_vpc" "my_vpc" {
   cidr _block ="10.0.0.0/16"

   tags = {
      Name = var.vpc_name
      Env = var.my_env
      BD = $(Var.vpc_name)-$(var.my_env)    .... bc this is too long , iil rather reference the locals blk
      BD = local.business       ... so am referencing this as jst a local, it is frm the locals blk but its a key called business n d value of this takes the whole value 
     }                                     of this:  "$(var.vpc_name)"-"$(var.my_env)"  , n this value is read frm these variables (variable "vpc_name and variable "my_env)
   }     BD , ie business division                                                                                  wich wil translate to "my-vpc"_"prod"

variable "vpc_name" {
    type = string
    default = "my-vpc"
}

variable "my_env" {
  type = string
  default = "prod"
}

locals {
business = "$(var.vpc_name)"-"$(var.my_env)"

bucket_business = local.business   ( i did this myself based on the github note)

*********************** bc its a long name, i declare it in a locals blk 




DATA SOURCE     ...... 1:17:35      create a data source for an AMI , we wnt to return a certain AMI 
first create n name the file and open it and startt56
YOU start create a data source oR using a data blk with the keyword data, n data block needs 2 labels 
        data "aws_ami" "amazon_linux" {
          most_recent = true             .... we can check the date the ami was =created and req for the most recent ............1:21:01
         owners = ["amazon"] 


        filter {                  we wnt to filter the AMI bc when we are doing our search, it is goin to return all AMIs that ar owned by amazon n also d most recent
           name= "name"                                                  so we ar goin to apply filters on the specific AMI that we wnt
           values ="al2023-ami-*-kernel-6.1-x86_64"          ( we can remove the date n put* so it captures all the AMIs) dnt understand what he means


          filter {
             name = "root-device-type"
             values = ["ebs"] 












