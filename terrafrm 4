RECAP , PROVISIONERS AND BACKENDSRECAP,
PROVISIONERS, TYPES OF PROVISIONERS, LETS SEE HOW REMOTE EXEC WORKS, PASING A SUBNET, REFACTORING, PASSING A PROVIDER 
 create a subnet/subnets inside of the vpc 


what is meta data ??

tefrm gives you what are called mata arguments
these are arguments that alter the normal behaviur of our resources 
by default resources that we create in trfrm has a certain convention/behaior
the normal convention is that if i declare 1resource block , itwil cratea 1 resource bt if i want to reuse d same code to create multiple resources of d same tin then i can pass
in an arguemt thta wil manipulate the behavior ... that is what is a mata argument 

WHILE , 
an ARGUMENT, acts as an input, if u  wnt to input inf into a resource ,u can pass an argument so that it becomes part of the input into your resource
so we put in arguments 

BUT, 
ATTRIBUTES , is what we need to get out of our resource

A MODULE:
we say that you can create a module and a module is just resources (terfrm resources) that you can put inside a dir, now that becomes a module and we can ( call that) can create 
those rsources just by using the module block
so this is one of the trfrm blks among the 10 tfrrm blks that we hv used so far
so u can use a module blk to actually create resources


Tonight we wil continue wit our exploration of teRRAFORM

we'll go over PROVISIONERS AND BACKENDS

PROVISIONERS:
You can use provisioners to model specific actions on the local machine or on a remote machine 
in order to prepare servers or other infrastructure objects for service

9:15
illustration:
i have my laptop here , and i want to craete an ec2 instance, in my aws account, i can use trfrm in my laptop to provision the ec2 instance in aws
i can have a resource blk, run trefrm init, terfrm apply , it wil create the ec2 instance
***************** but what if, lets say i have a file in (laptop) my local env and i want it transferred into my ec2 instance once that instance has been created and launchd
and bootstrapped.
this now becosmes a process of configuration, am tryin to config this ec2 instance by transfering a file into it , or i want to run a script once the instance has created

********11:20
one way we saw we can run a script is by using user data, we can use user data to run a script, that is a porcess of configuraton, this is hw i can configure my instance
usingtfrm by using user data
but what if i have a script on my local env that am nt passing as user data bt i wnat such that after my instance has created i want to transfer the script into my instance
then once this script has been transferred run this script on the instance
so trfrm gives you what is called provisioners, u can use provisioners to do that
so i have used this process of provisioners to craete my instance bt then am using what we call a provisioner to do what we call configuration

############ when u look at the documentaion, trfrm gives a strong warning that *************** PROVISIONERS ARE OUR LAST RESORT****************
WHEN ur using provioners, it is recommended that only use them when neccesssary jst bc of the nature of hw provisioners wrk
onof the things u wil realise as u work with provisioners is that if a provisioner fails e.g  if d script ur trying to install fails then the provisioner wil b deleted
and when this happens , if the provisiner was working on a resource like an ec2 instance , the instance will be deleted and recreated
thats why we hv to use provisioners as last resort.

TYPES OF PROVISIONERS

1) file provisioner
The file provisioner copies files or directories from the machine running Terraform to the newly created resource. The file provisioner supports both ssh and winrm
type connections.

that is :if i have a file on my local env, i can use a file provisoner that will copy the file and tk it to the destination which is the remote machine (the machine that is been
provioned)

2) LOCAL-EXEC PROVISIONER
he local-exec provisioner invokes a local executable after a resource is created. This invokes a process on the machine running Terraform, not on the resource. See the remote-exec
provisioner to run commands on the resource.

Note that even though the resource will be fully created when the provisioner is run, there is no guarantee that it will be in an operable state - for example system services
such as sshd may not be started yet on compute resources.

THAT IS:
A local exec basically runs on your local env ,i can run a command on my local env after my remote instance has been craeted
and we will see exactly what i mean once we use it 

3)  REMOTE- EXEC
The remote-exec provisioner invokes a script on a remote resource after it is created. This can be used to run a configuration management tool, bootstrap into a cluster, etc.
To invoke a local process, see the local-exec provisioner instead. The remote-exec provisioner requires a connection and
supports both ssh and winrm.

THAT IS:
it perfroms a task on your remote resource, if am creatin an ec2 instance , i can use a remote exec, i can run commands on the remote instance ie the instance hv jst created
if i use a remote exec provisioner but for me to be able to run command inside of the instanc e(the remote instance), iil need to connect to it 
hw do i connect to an instance , il use ssh , iil need to ssh into that particular instance for me to be able to conect to the instance after wich am then able to run either
my script or command after the connection.

resource "aws_instance" "web" {
  # ...

  # Establishes connection to be used by all
  # generic remote provisioners (i.e. file/remote-exec)
  connection {
    type     = "ssh"
    user     = "root"
    password = var.root_password
    host     = self.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "puppet apply",
      "consul join ${aws_instance.web.private_ip}",
    ]



^^^^^^^^^^^^^^^ 16;00

  LETS SEE HOW REMOTE EXEC WORKS
we have this provisioners file 

WE want to create our ec2 instance 
this ec2 instance we will use a data source
we hv dis data source which is creating an ubuntu server sowe wil use this data source to get our AMI 
this wil gnerate an AMI for ubnutu

data "aws_ami" "ubuntu" {
  most_recent = true
  owners    = { 09879009}

filter {
   name    = "aws"
   values  = 
}
 filter {
   name = 

***********  once we get AMI, we are goin to use it in our resource block

resource "aws_instance" "my_ekl_instance" {
ami           = data.aws_ami.amzlinux2.id                             *** am reading my instance type frm  a variabale
instance type = var.myInstance                          **i can use what we call camal casing (he changed d i in instance to I and he changed it in the var file too)
subnet_id        =data.taerraform_remote_state.networks.outputs.public_subnet[0]             ********* am passin a subnet id bt d subnet is , i dnt hv d subnet yet
key_name         = var. my_key                                19:15  so lets try n create d vpc first, so bc am in dis provisoner lets create anoda dir here n create a 
                                                                                                      module for my vpc
 


 ##########variable.tf file     (variable for the instance)

varaiable "region" {
  type      = list(string)
  default   = ["us-west1", "us-west-2", "us-east-1"]
}
varaiable "myInstance" {
    type = list(string)
    default = ["t2.micro", "t2.medium"]
}
varaiable "my_key" {
    type     = list(string)
    default  =  "eks-instance"
}
varaiable "my_path" {
    description   = "private key path"
    default  =  "mykey/elk-instance.pem"
}
varaiable "instance_user" {
    default  =  "ubuntu"
}




19:15
 ********* am passin a subnet id bt d subnet is , i dnt hv d subnet yet so lets try n create d vpc first, so bc am in dis provisoner lets create anoda dir here n create a 
module for my vpc, i  now hv a dir here called vpc
now ill go to the trfrm registry ND TYPES aws_vpc as a resource 
he copied the basic usage :
    
resource "aws_vpc" "main" {
   cidr_block = "10.0.0.0/16"

in the vpc dir, he created a new file (vpc.tf)
and pasted it
so this will craete my vpc
so on this vpc he added some tags


********* vpc.tf file

resource "aws_vpc" "main" {
   cidr_block = "10.0.0.0/16"

tags = {
   Name = " Demo-vpc"}

                                  REFACTORING
                    ******** then let , REFACTOR this code, ie i can pass this as variables 

vpc.tf file

resource "aws_vpc" "main" {
   cidr_block = "var.cidr"       *********** so we are referencing the CIDR variable below
 

tags = {
   Name = " var.tags"}
 }
}

varaiable "cidr" {
    type  =  "string"
Default   = "10.0.0.0/16"
}

varaiable "tags" {
    type  =  "string"
Default   = "Demo-vpc"
}

                                                     PASSING MY PROVIDER 
************* so have declared 2 varaiables...... 
after have done this, for this particular vpc  i need to pass a provider 
i NEED  to PASS MY PROVIDER block 

provider "aws" {
   region = "us-west-1"      ********so this is where am creating my vpc 


************* so now inside of the vpc dir, i can create anoda file and call it varaiables.tf
so ill remove the variables from the vpc file and paste them inside its own file (the varaiables.tf file) .....********** the is the process called REFACTORING******** 
SO THAT it is easy to read , 
am making sure i only have resources in one file
providers in one file, so now ill create a file for providers ........................     25.03

variables.tf file 

varaiable "cidr" {
    type  =  "string"
Default   = "10.0.0.0/16"
}

varaiable "tags" {
    type  =  "string"
Default   = "Demo-vpc"
}


remove the provider from my vpc and put it on its file
  provider.tf

provider "aws" {
   region = "us-west-1"


******************** so bc i have declared my provider and variables and vpc on their own file , so this in itself and bc its inside of the vpc dir 
so i can call this as my vpc module bc everything in this vpc dir has to do with jsut the vpc only
so i can go ahead and create the vpc first
bt before i create the vpc, i realise that in my code (resourec block) to create my instance
i need a certain subnet
bt ill wnat to get the subnet frm this vpc that am craeting 
now since this vpc is a module on its on, for u to get something out of a module you must create an output, 
there must be an output for you to access the attribute of the module
right now we are creating this vpc but we do not hv any output, so ders no way of accessing the attributes of the vpc
so for us to be able to access the attributes we will need to craete an output 


vpc.tf file

resource "aws_vpc" "main" {
   cidr_block = "10.0.0.0/16"

tags = {
   Name = " Demo-vpc"}
 }
}

output "vpc_id" {                                   ************so this output will return the vpc id 
  value = "aws_vpc.main.id                              so am using an output to access the attribute of that value (an attribute of the vpc)
                                                         so i have to declare this particular output

28:25    ********** so i probably want to create a subnet/subnets inside of the vpc 






















resource "aws_vpc" "myec2" {
   cidr_block = "10.0.0.0/16"
     depends_on = {aws_instance.myec2}


provider "aws" {
   alias = "east"
   region = "us-east-1"
}




   provider = aws.east                     ************* here ill pass the provider
for each = toset(var.instance_type)
ami           = data.aws_ami.amzlinux2.id                             *** am reading my instance type frm  a variabale
instance type = var.myInstance                          **i can use what we call camal casing (he changed d i in instance to I and he changed it in the var file too)
subnet_id        =data.taerraform_remote_state.networks.outputs.public_subnet[0]             ********* am passin a subnet id 
key_name         = var. my_key
user_data    = file("${path.module}/app1-install.sh")        
tag = {                                                           
   "Name" = "EC2Demo-${count.index)"














