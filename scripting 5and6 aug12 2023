 *****   vi index.html  ( when it opened, i didnt see the previous content, Jesus is lord ) does it mean it was sent directly to the web & not the file  .... ???


  USING Scripts for package management, FILE MGT,  CONTROL COMMANDS = CONDITIONS, LOOPS, WHILE LOOPS, USES OF LOOPS, SWITCH CASES, FUNCTION, SCP COMMANDS , PATHS (Absolute/
relative ), CRONTABLES



                                      USING Scripts for package management:
                                      ====================================
we can use script for packages installing


We can install, remove, updates and upgrade packages in our servers.

examples of packages:
  nano, tree, vim, httpd, 
  java, maven, tomcat, jenkins,
  kubernetes, kubelet, docker
  terraform, etc.  


We can download and install packages 
using package managers like:
   yum/dnf          -- centos, redhat
   apt/apt-get      -- ubuntu, debain
   chocolatey/choco -- windows OS  
   brew             --  mac  
   helm,  -- kubernetes 
   pip,   -- python 
   rpm 

centos/redhat/amazon linux/:
eg:  yum install nano 

TICKET0017 - Write a simple script to install and start apache
========
-#!/bin/bash
[root@demo33 ec2-user]# cat package.sh
#!/bin/bash
##This script will install and start the apache http webServer
 sudo yum install httpd -y
 sudo systemctl start httpd
 sudo systemctl enable httpd
 systemctl status httpd
 sudo echo " JESUS IS LORD " > /var/www/html/index.html  ** this file is called uindex.html, it is a webserver ( Jesus is lord directed into the index.html file)
 sudo echo " I am rich " >> /var/www/html/index.html

#curl ifconfig.me  to verify line 6&7 ..  ( the curl command to check if certian stuff is running as expected)
#curl 44.208.35.48  (ip address)
  ********** we can also use file mgt to enter our content   ... 15.00

**** i run ifconfig but it doesnt show JEsus
i run it in debug mode but nothing 


                                        FILE MGT
 fileMGT_index.html
 ------------------

Vi index.html (we write the script using html code) ie <h1> h2   ( opening and closing tags)
 [oke@demo22 ~]$ cat index.hmtl
                vi index.html  ( when it opened, i didnt see the previous content, Jesus is lord ) does it mean it was sent directly to the web & not the file 

<h1> Welcome to LandmarkTech </h1>
<h2>The Pride of Africa</h2>

sudo vi  /var/www/html/index.html
<h1> Welcome to LandmarkTech </h1>
<h2>The Pride of Africa</h2>
<h2>The Pride of Africa</h2>
<h3>The Pride of Africa</h3>
<h4>The Pride of Africa</h4>

                                                 PACKAGE MGT
                                             Ticket oo7

package2.sh  
==========
yum install ksh zsh tsh -y  
yum install vim git -y   

=========================================

                                      CONTROL COMMANDS = CONDITIONS

control commands = conditions:                   WE can use if, else "statement " in the property market
==============================                           we can also use 'if,else' statement to authenticate users
                                                        Add multiple conditions with 'elif'
*** IT starts with "if and ends with fi"

if statements:
Syntax:  
  if [ conditions ] 
  then 
  commands  
  else  
  commands
  fi 

Syntax:  
  if (( conditions ))  
  then 
  commands  
  else  
  commands
  fi 


if1.sh  
echo " Please enter your prediction "
read p
if [ $p == 4008 ]
then
echo "Congratulations"
echo "you are the winner"
else
echo "Your prediction is wrong,"
echo "Please, try again"
fi

if2.sh 
echo 'ENTER YOUR GPA'
read gpa
if [ $gpa -gt 4 ]
then
echo "Congratulations,"
echo "You are a 1st class student"
elif [ $gpa -ge 3 ]
then 
echo "Congratulations,"
echo "You are a 2nd class student"
elif [ $gpa -ge 2 ]
then 
echo "Congratulations,"
echo "You are a 3rd class student"
else
echo "You can do better, please work harder"
fi

36:00
vi if4.sh
#realtor selling a property
echo "how much is customer 1 offerring ?
read offer1
echo "how much is customer2 offerring?
read offer2
if [offer1 -gt $ offer2]
then
echo "customer1 has a better offer"
echo "sell to customer1"
elif [$offer1 -lt $ offer2]
then 
echo "customer2 offer is better"
echo "sell to customer2"
else
echo "we have a tie of $offer 1
echo "Request for an increase and choose the best possible counter offer



[ec2-user@demo33 ~]$ cat if5.sh
echo "Please enter your pin"
read p
if [ $p == 5032 ]
then
echo "You enter a valid pin "
echo "Welcome to TD Bank "
elif [ $p == 5068 ]
then
echo "This  pin was changed 3weeks ago "
echo "Please try again "
else
echo "You entered the wrong pin"
echo "You have 2 more attempts"
fi

if6.sh 
------
if [ uid == 0 ]
then
echo read username
read username
echo "Creating $username user account"
useradd $username
else
echo "sorry only the root can run this script"
fi





if [ condition ]
then 
command1 
command2
elif [ condition ]
then 
command1 
command2
elif [ condition ]
then 
command1 
command2
else 
command1 
command2
fi   


                                       LOOPS ( a situstion where we have a repeated scenario)

Loops: When a condition can be satisfied multiple times.
======        condition with multiple iterations 
for  loop  starts with a "do" and ends with "done"
=========
Loops: condition with multiple iterations 

eg
x < 100      ie  can be satisfied multiple times because X can be 1, 10 , 25, 14, 7, 35, 80 , etc , so x can abe satified until all these is exhausted
x= [0, 1, 2, 3, ..., 99] 
    lets looks at for loop syntax

Syntax:
for loop  
for [ initiallation;conditions;increasing/decreasing ]
for
execute all command/script until the condition is 
longer met/satisfied. 
(And repeat all statement between do and done) 
done 

for loops:
==========
for (( initiation;conditions;inc/dec ))
do 
commands 
commands 
done

eg
for loop.sh (fl.sh)  
for  (( a=1;a<=5;a++ )) 
do  
echo $a   
done  

Expected output:
a=1  
a=1 + 1 = 2 
a=2 + 1 = 3 
a=3 + 1 = 4  
a=4 + 1 = 5 
look breaks when condition is no longer satisfied bc 5+1 is greater than 5
a=5 + 1 = 6 

1:00  ***** so what we see when we run the script is:
[root@demo33 ec2-user]# sh fl.sh
1
2
3
4
5


Assignment:
Write a shell script to print numbers from 100-90 
using for-loop [100, 99, 98, ---, 90]

my ANS:
vi for loopasg.sh
for ((a=90; a<=100; a+1))
do 
echo $a
done


                                                  WHILE LOOP
                            Also conditions with multiple iterations

while loop
=========
Syntax for while loop
initiallation 
while [ condition ]
do 
commands/statements
done


****** he didnt give the question

yl.sh   
echo "while loop starts"
echo "performing load testing for tesla"
l=10000
while [ $l -le 90000 ]  *** l is < or = to 90,000 .. ie the max load l can carry is 90,000
do
echo "Carrying load of "
echo $l
l=`expr $l + 10000  ( the expr $l is to add value)
done
echo "while loop ends"

each iteration wil tell hw much load it is carrying bt our expected output will be:

Expected output:                         (it is increasing by 10,000 bc the expr says $l + 10,000 and the value of $l is 10,000, 
  and when we run the script: sh yl.sh;                                so it continues like this until the load is < or =90000
performing load testing for tesla 
  Carrying load of       (for each of this iteration, bc this is a loop, it wil be looping tru and saying carrying load of 10,000,20000 etc
  l = 10000
  Carrying load of
  l = 10000 + 10000 = 20000
  Carrying load of
  l = 20000 + 10000 = 30000
  Carrying load of
  l = 30000 + 10000 = 40000



yl2.sh   
echo "while loop starts"
echo "performing load testing for tesla"
l=10000
while [ $l -ge 10000 ]
do
echo "Carrying load of "
echo $l
l=`expr $l + 10000 `
done
echo "while loop ends"


                              USES OF LOOPS
use cases for loops:
===================
WE CAN use loops to run load test
we can use loops to get a range of values




Assignment:
Write a shell script to print numbers from 1-9 
using while-loop 
----
i=9  
while [ $i -ge 1 ]   
do  
echo $i 
i=`expr $i - 1 `  
done   


                                   SWITCH CASES
                THis is when you have multiple conditions to manage


switch case:
==========

eg

for systemctl we can  start|status|restart|stop|enable|disable sshd 
  yum install/remove/updates/upgrade

********* so when we hv situation like this we use "switch case"

tomcat:
  catalina.sh | status | start | stop | restart | version
  catalina.sh start tomcat 
  catalina.sh stop  tomcat   
  catalina.sh restart  tomcat   

sonarQube:
  sonar.sh  | status | restart | stop | start | version

 sh sonar.sh start 
 sh catalina.sh stop tomcat
     $0         $1    $2           ***** these numbers can change

Syntax for switch case:
case $1 in  
    option1)                ******* start
      Commands;;
    option2)                   ******* stop
      Commands;;
    option3)                    ******** restart
      Commands;;
    option4)                    ******** status
      Commands;;
      *)
       commands;;
esac 

case $1 in  
    start)
      echo "sonarQube server starting"
      echo "sonarQube server started" ;;
    stop)
      echo "sonarQube server stopping"
      echo "sonarQube server stopped" ;; 
    restart)
      echo "sonarQube server restarting"
      echo "sonarQube server restarted" ;;
    status)
      echo "sonarQube server running"
      echo "The process ID is $$ " ;;
    *)
      echo "you entered an invalid option"
      echo "Please enter start, stop, status or restart option" ;;
esac 


******* 
1)the syntax starts with 'case' and ends with 'esac'
2) anything entered that doesnt fall under (stop/start/restart and status) will be represented under * wildcat
3) the cases entered (start/stop/restart/status) must end with ";;"



ticket 0014:
create a new user in our env :
1) import/call/invoke the usermgt function


                                     FUNCTIONS

functions : we can use functions to write repetitive tasks without rewriting codes
  Functions:   
 A function is a piece of code that perfoms
 a specific task and avoids code repetition/duplication.
********** we invoke the function by writing the name of the function at the end of the script  ...... 1:35:28
}
uermgt



                        SYNtaax for functions
   we can write multiple functions, diff functions to perform specific tasks

usermgt(){
   echo "Enter the username of the new user"
   read name
   sudo adduser $name
   grep $name /etc/passwd  ***** to confirm new user was created, we can grep the name in the etc/passwd file OR id $name
   id $name   
}
filemgt(){
  if [ -e /etc/passwd ]
  then
   echo "File management is easy with scripting"
   echo "The file exist. Please proceed ..."
   grep simon /etc/passwd
   touch test.java /tmp  
  else
    echo "It doesn't exist"
  fi
}
packagemgt(){
  sudo yum update -y
  sudo yum install tree nano vim unzip -y
}
db_backup(){
  mkdir /tmp/backup  
  cp -r * /tmp/backup/
}
monitoring(){
  df -h
  free -m
  top
}  
usermgt     ****** if i want to call only this 3functions but if i want to create a user then il call only usermgt function
filemgt  
db_backup         1:31:00


to invoke this function script, ill 
vi fn.sh
then paste the script
then sh fn.sh



Ticker00147_create a new user in our environment:
============================================= 
1. import/call/invoke the usermgt function

IQ: Examples of autamted tasks:
  Explain your experience in bash shell scripting??
AMSWER:
 In my environment I have written, Maintained/modified
  shell scripts to:
    monitor_servers.sh    - to monitor servers
    dataBase_backup.sh     -  to backup databases
    deploy_app.sh          - to display application
    access_account.sh      - access accounts
    user_management.sh    -     to mg8 users
    file_management.sh     -       for filr mgt


******** have equally written functions to avoid repetition of codes


                               SCP COMMANDS

scp command:
  It is use to transfer files from one server to another and vice-versa
  It is good for data migration, application deployment, etc. 
  scp tranfer files and directory securely using the ssh protocol 

TICKET0019 -- 
 Tranfer files from your Windows system to your Linux server


COMMAND:
  scp fileName username@ip:/path/to/dir  
  scp app.yml simon@52.10.100.198:/home/simon/      ***simon is the name of the user we are copying to
ssh-key: scp -i key.pem filename username@ip address


TICKET0020 -- 
 Tranfer directory from your Windows system to your Linux server
 scp -r app simon@52.10.100.198:/home/simon/                         ***** if your server is configured for password authentication
 scp -r -i key.pem app simon@52.10.100.198:/home/simon/                ******* using ssh key

Password for authentication:
   scp filename ubuntu@52.201.217.3 
   scp filename username@ipaddress   

   scp -r direname ubuntu@52.201.217.3 
   scp -r direname username@ipaddress 

ssh-key for authentication:
   scp -i key.pem app.war  ubuntu@52.201.217.3 
   scp -i key.pem filename username@ipaddress              ******* for file

   scp -i key.pem -r direname ubuntu@52.201.217.3 
   scp -i key.pem -r direname username@ipaddress           **** for difrectory



                                               PATHS

                       1) (WE must use the absolute path when automating , why??? )
                        2)  what did we use generator link bc i didnt use it but my log showedup 
                         3) what next to do with the log file created 


Path to files and directories: 
=============================
  Relative path: start From pwd    
  Absolute path: start From / (root)


[simon@demo33 ~]$ tail -3 hello.yml
    image: mylandmarktech/hello
    ports:
    - containerPort: 80
[simon@demo33 ~]$
[simon@demo33 ~]$ tail -3 /home/simon/hello.yml
    image: mylandmarktech/hello
    ports:
    - containerPort: 80
 
                                                              CRONTABLES
 CRON TABLES : contains scheduled tasks

 most times when we write our scripts we wont be there to observe them run, so we shall use cron tables and cron
jobs to achieve the expected automation and schedule the task to run as expected
==========
Scheduling Tasks/Workloads for automation.
Assignment/Ticket:
  1. Write a script that monitors servers every minutes 
     This script should alert management of anomalies 
  2. Write a script that backup dbServers every midnight

Execution:
1. We shall use cronJobs and create cron tables to achieve this 
   Automation and Schedule the tasks to run as expected. 

   cron table   = contains scheduled tasks   
   crontab -e   = To edit the cron table 
   crontab -l   = List the cron table

***** 1:58:24
sudo yum install cronie
- yum -y update
- sudo yum install vixie-cron



Create a ticket to monitor_servers every minute
============================================== 
/home/ec2-user/monitor_server.sh > /tmp/log                          
* * * * * /home/ec2-user/monitor_server.sh > /dev/null 2>&1  (redirecting result into /dev/null )
* * * * * /home/ec2-user/monitor_server.sh > /tmp/log 2>&1   (redirecting result into /tmp/log )


**** to fill the command to generate , we go this link:
https://crontab-generator.org/
and select evry minute, hour, day, month and week 


*  = every minute 
*  = every hour
*  = every day 
*  = every month 
*  = every week 



2:02:00
create the: monitor_server.sh  (redirected both standard output& error into a log file) /tmp/log 
1)  vi home/ec2-user/monitor_server.sh > /tmp/log         **** this is the absolute path
#!/bin/bash
date             ****we want to also run these command in the script
free -m
whoami
Pwd 

2:07:00
**** to run the script:
sh home/ec2-user/monitor_server.sh         **** using the absolute path
and we can see the standard output & standard error 
 monitor_server.sh **** using the relative path we get the same result but when am automating, i must use the absolute path

*** we run ls /tmp/  bt thers no log file yet bc its scheduled to run every minute 
******* the log file is created when the script starts running because it is scheduled to run every minute


****  check the 
crontab generator online: 
  https://crontab-generator.org/

* * * * * /home/simon/monitor_servers.sh >/dev/null 2>&1
* * * * * /home/simon/monitor_servers.sh >/tmp/log 2>&1

* * * * * /home/simon/monitor_servers.sh >>/tmp/log 2>&1

*  = every minute 
*  = every hour
*  = every day 
*  = every month 
*  = every week 

2) crontab -e       **** to edit the file to introduce tasks to be run by cron
* * * * * /home/ec2-user/monitor_server.sh > /dev/null 2>&1
* * * * * /home/ec2-user/monitor_server.sh > /tmp/log 2>&1


to verify :
ls /tmp/

#########################################    END 





Team:
project 1
========
1. AWS Accounts are created for all team members 
2. Create a redhat8 linux server 
3. Connect to the redhat8 server using mobaXterm/terminal ssh-cleint 
4. Program or configure the server for password authentication   
5. Create a user call dominion and assign a password [admin123] 
6. Connect to your server using dominion's user
7. Run commands in the server as dominion's user 
    
project 2
========    
7. Connect to your server using dominion user's details  
8. Run your scripts as dominion user

