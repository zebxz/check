Docker networks & Micro-services:
===================================
What is a network ?
Group of servers/devices connected to each other in a specific network. If Servers
are in same network each one can talk to another server.



Docker network
=============
If One Container has to talk to another Container 
Using ContainerIP/Name(DNS) in Docker.
Both has to created under same docker network.

If Containers are in two different networks. 
They can't access each other.
 
How to list networks in docker?

ubuntu@docker:~$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
7403f6b74f30   bridge    bridge    local
f9f9a99c2c85   host      host      local
0f1d053a3f91   none      null      local

Default bridge network 

custom bridge network
host network
none network

ebay webapp: monolithic architecture 
   login/registration/cart/pay/order/return  

microservices architecture:
 ebay.war  = decoupled   
   login.jar
   registration.jar
   cart.jar
   pay.jar
   order.jar
   return.jar  

easy to manage/
  monolithic = ebay / 20,000 lines of code 

  microservices architecture:
   login 2,000 lines of code 
   registration 4,000 lines of code 
   cart 2,000 lines of code 
   pay 6,000 lines of code 
   order 2,000 lines of code 
   return 8,000 lines of code   
easy to  scale  :
    login=20m - 28m /
    reg=20 /
    cart=8m /
    pay=7m/
    order=7m /
    returns=1m ] 

better/efficient resource usage : 

versioning is easier to manage with microservices

We support Java based applications:
===================================
We support nodeJS and .net based applications:
==============================================
Ticket024:
  Deploy a microservice application for tesla.  
  - GitHub repository
    https://github.com/LandmakTechnology/spring-boot-docker
  - dockerHub repository
    mylandmarktech/sping-boot-mongo

spring:
  data:
    mongodb:
      host: ${MONGO_DB_HOSTNAME}
      port: 27017
      username: ${MONGO_DB_USERNAME}
      password: ${MONGO_DB_PASSWORD}
      database: users
      authentication-database: admin
server:
  port: 8080
spring:
  data:
    mongodb:
      host: dbserver
      port: 27017
      username: devdb
      password: devdb123
      database: users
      authentication-database: admin

we need to deploy the springapp and the database - mongo
vi sp.sh    
  docker pull mylandmarktech/sping-boot-mongo
  docker pull mongo
  docker network create tesla
  docker run --name springapp -d -p 8080:8080
  docker run --name mongodb    


vi sp.sh    
  docker pull mylandmarktech/sping-boot-mongo
  docker pull mongo
  docker network create tesla
  
docker run --name mongodb --network tesla -e MONGO_INITDB_ROOT_USERNAME=devdb -e MONGO_INITDB_ROOT_PASSWORD=devdb@123   

docker run --name springapp -d -p 8080:8080 --network tesla -e MONGO_DB_HOSTNAME=mongodb -e MONGO_DB_USERNAME=devdb -e MONGO_DB_PASSWORD=devdb@123  mylandmarktech/sping-boot-mongo

 database:  HOSTNAME      USERNAME       PASSWORD   network  
            mongodb       devdb          devdb@123   tesla    
1.spingapp: mongodb       devdb          devdb@123   tesla  


      host: ${MONGO_DB_HOSTNAME}
      port: 27017
      username: ${MONGO_DB_USERNAME}
      password: ${MONGO_DB_PASSWORD}


      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example


 3.22.217.29:8080/
docker run --name mongodb --network tesla -e MONGO_INITDB_ROOT_USERNAME=devdb -e MONGO_INITDB_ROOT_PASSWORD=devdb@123 -v /tmp/mydata:/data/db mongo 

docker run --name app -d -p 8000:8080 --network tesla mylandmarktech/java-web-app 
docker run --name webapp -d -p 7000:8080 mylandmarktech/maven-web-app 


ubuntu@docker:~$ docker network

Usage:  docker network COMMAND

Manage networks

Commands:
  connect     Connect a container to a network
  create      Create a network
  disconnect  Disconnect a container from a network
  inspect     Display detailed information on one or more networks
  ls          List networks
  prune       Remove all unused networks
  rm          Remove one or more networks

 docker network connect webapp tesla  

docker run --name app -d -p 8000:8080 mylandmarktech/java-web-app 

docker network create/inspect/ls/disconnect/connect/rm/prune:
============================================================

-# Remove unused networks
docker network prune 

-# Remove Network
docker network rm <networkNameOrId>

Docker Host Network.:
If we create containers in host network. 
Container will not have IP Address.
 Container will be created in a system network.

docker run --name webapp -d -p 7000:8080 mylandmarktech/maven-web-app 

docker run --name javaapp -d --network host mylandmarktech/java-web-app
   ContainerPort: 8080 

docker run --name apps -d --network host mylandmarktech/java-web-app
   ContainerPort: 8080 

docker run --name hello -d --network host mylandmarktech/hello  
  ContainerPort: 80



ContainerPort: 8080    

We can't create more than one container with same container port in host network.
   landmark-web-app  = containerPort,  EXPOSE=8080  
   java-web-app      = containerPort,  EXPOSE=8080  
   maven-web-app     = containerPort,  EXPOSE=8080  

Docker none/null network
========================
If we create container in none/null network. Container will not have IP Address.
We can't access  containers in this network  
docker run --network none                     
Internal or external 

docker run --name hello -d --network none mylandmarktech/hello   

Isolation
  docker run --ebay host -d --name hello mylandmarktech/hello   
  docker disconnect hello ebay  
  docker connect hello none  


docker volumes and docker compose:
