USING A LOCAL PROVIDER

1. Terraform   -- Provisioning
-------------------------------

the traditioanl approach of managing infrastructure was was tidious and cumbersome
but you cant visualize your infrastructure form one spot and its prone tonlots of mistakes and erros 
also it cant be version controlled
by version control we can create a terraform script aND PUSH the script to some github repository but the command used to create our servers its difficult
but with IAC with terfrm is able to solve problem resulting form the traditional approach
with IAC we can create a file, it can be version controlled and we can visualize our resorces with relative ease

1) Infrastructure as Code (IaC)
o Understand Problems with Traditional way of Managing Infrastructure
    - GUI/console   
    - commands , the CLI 
o How IaC with Terraform Solves them

o Infrastructure as Code (IaC) VS Configuration Management
o Install Tools on Mac OS, Linux OS and Windows OS
o Command Basics
    terraform init
    terraform plan  
    terraform validate   
    terraform apply   
    terraform destroy   
    terraform import   
    terraform fmt 
    terraform show/ cat terraformstate.tf    
       remote backend like s3 
       simon / 
       mary / 
       kelvin     


o HCL Language Syntax

2) Terraform Top Level Blocks
o Fundamental Blocks
o terraform block
o providers block   : types of providers we can hv in a resource block
     aws / azure / github / local  (used to run task just inside your terraform
if you dont pass a provider, it will use the local provider
o resources block
o Variable Blocks
o Input Variables
o Output Values
o Local Values
o Referencing Block
o Data sources Block
o Modules Block


your main task is you shud be able to create a configuration file in terfrm to deploy your resources
********** 23:40 
terfrm has a very rich resource online 
search for a local provider   ... ....  e.g in google seacrh for a local provide:  terraform local provider 
brings up his vscode

                                    USING A LOCAL PROVIDER (we want to craete a local file 
  32:49  ******* 

   terraform {
         required_providers{
            local = {                               *********  the default provider, we ant to use the default provider to create a file           
               source = "hashicorp/local"
            }
           }
}
resource "local_file" "dev"{                    ****** the file is recognised in terfrm here as "dev"
 content = "terraform is good"
 filename = "test.sh"
}     


****** now run terfrm init
if i run ls -a,  we hv a .terraform file created
terfrm plan 
terfrm apply
ls 
we now hv a terafrm.tfstate file , test.sh
terraform show   ,,  i can also cat the file
we see the content of the state file 
a resoure called local_file.dev was created 
content: terrafrm is good 
file name test.sh
cat test.sh
we see: terraform is good

######## 
in the terfrm woklow, we hv to define the scope, what do we want to achieve?
frm the scope we can get the plan but before that we must first initialize with terfrm init

                         
                                             TO CREATE A  NEW FILE 

 terraform {
         required_providers{
            local = {                                       
               source = "hashicorp/local"
            }
           }
}
resource "local_file" "dev"{                   
 content = "terraform is good"
 filename = "test.sh"
}                                                 45:10 
resource "local_file" "qa"{                        ***** we have to change the name , we cant use the same name as "dev"            
 content = "devops is the best"
 filename = "deploy.java"
}

*******  to destroy 
tefrm destroy
 * to recreate it 
terrafrm apply --auto approve 
ls
we see the file recreated



AWS:
   ec2-instances  \ VPC / EKS  / S3  / ETC.  
   installing terraform on windows and linux systems 
    define scope / 
    init / 
    writing & modifying terraform scripts [ vars.tf main.tf modules]   


2. Ansible  is a Configuration Management tool  

    appServers = 50  
    webservers = 40  
    dbservers  = 44 
    kubernetes = 5  

    deployment of applications in the 50 appServers 
    commissioning the 50 appServers 
    securing the  50 appServers
    installing tomcat in the 50 appServers
  tasks that ansible can perform/run on its hosts:
    FileMGT  
    userMGT  
    deployment  
    securityMGT  
    system monitoring  
    patching  
    packageMGT  
 How to perform the tasks and ansible workflow:
   modules 
   playbooks:
     variables  
     plays   
     tasks  
     handlers   
     modules [ yum / copy / service / template / apt / package / shell ] 
               command / setup / systemd / 
     roles    
   roles    
   inventory/host file  
     [ appServer ]
       10.10.0.55
       10.10.0.91
     [ dbServer ]
       10.10.0.77
       10.10.0.100

     [ k8s ]
       10.10.0.10
       10.10.0.30

app.yml  
=======
host

destroy options :
  terraform destroy --auto-approve  
  terraform destroy --target local_file.test      
  terraform destroy --target aws_instance.web         
How have you applied terraform in your environment/landmark??? 


output block:
   create ec2-instances :
      metadata = 
        ipAddresses
        az/ami/dns/
        Instance ID
       
   vpc : vpc-id  / cidr block   
   eks cluster:
     kubeconfig    

kubernetes vm  


















 
















 
