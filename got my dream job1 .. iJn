 LANDMARK  DEVOPS E. DEgree master class syllabus: 
 for everyone to becomae a master and to master the subject matter in Devops end to end automation and deployment.

   AFTER Devops training you are expected to become 
1)SME = subject matter expert
it means that you have - Technical skill - understanding all the devops modules
2) mangerial skill - Project mangers (mange projects, members in your team) - scrum master
3) leadership skills - can be a team lead
SRE : site reliability engineering
DevSecops : Devops dev security and operations 
   SRE/DevSecops
Devops/cloud/Application Engineering
platform/kubernetes/application Engineering/ infrastructure engineering


What is your Technology stack in landmark Technologies  ?/??
   in other words, what are the tools that are in your tool box?
These tools are what we can call the modules for this class




DEVOPS INTRO:
we are devops engr , we are subject matter experts 

Applications are the output from software

Anything done in linux is a process 

***** Git4  ... 15.26 
the recommendation is to write good commit messages

we support java based applictaion/projects in our environment


Anytime we change anything tin in configurtaion file we restart the server


Sonar Q&A
we cant do without CLI bc commands bring automation thats why you hv so much money thrown at you  and its not in all cases that we can  use only GUI

what is sshd  ???
i knw we need a service smt when we are connecting to server and you always say ssh , pls what ais ssh to a layman  ?????????
..... i think it means we connect



******************************************************************

 WHAT KIND OF COMPUTER ARE YOU USING ??
The type of computer one is using can depend on the vendor
eg : i can say am using a dell computer but its running a windows system so am using a windows computer

therfore, what makes a computer isnt just about the hardware or vendor but mostly about the operating system running the computer
the heart of the computer is the operating system

An HP with windows operating system = windows system 
A dell laptop with linux operating system = linux systems
An HP laptop with linux operating system = linux system


*************************************************************



EXPLAIN YOUR EXPERIENCE IN DEVOPS? 
The 20 modules for this course is your experience in devops (about 20 minutes)

        ANS:
BSc /MSc graduate IT 
devops can be used to automate IT tasks and processes

    vs     jenkins 1.08
Landmark Devops masterclass graduate:
i have 7years experience implementing devops processes and automating tasks for multiple clients
i have experience in implememnting devops processes and automaitng tasks for multiple clients


******* devops brings automation therefore, devops is all about automation because on a daily basis we are trying to automate it tasks and process .
what we have automated we are asking are there
better automation options 
e.g, if our current automation takes 10hours, our question eveyday is can we automate better to reduce the time from 10 to 2hours

WHAT IS DEVOPS TO YOU   .. ?
Based on my experience devops is all abt continous automation and improvement on how IT tasks and processes are implemented

WHY devops ?
1) continous Automation -:
Devops brings automation, continous and thats why we choose devops in our env. We choose devops not agile or waterfall or a combination of Agile 
and devops bc devops brings continous automation

2) Continous transformation: 
transforming how things are done 

3) Disruption:
changing how task were done in the past , disrupt processes that were done using traditional approasch , bring in automation 
4)its all about innovation and change


     DEVOPS IMPORTANCE?
its the present and the future of IT innovation (and change) The way devops is devops is designed and implementated is whats needed today which is the present and thats what
will be needed tommorrow meaning devops is the future bc it brings continous automation 


   WHAT IS YOUR TASK AS A DEVOPS ENGINEER ?
As a devops engineer, i work with my team to develop, test, build, review + qualify , secure, deploy , access, maintain and monitor applications using computerized 
automated automated technologies In our technology stack we are able to run/ execute task using either GUI or CLI 

These are my tasks as a devops engineer
Develop applications
Test application 
Build applications
REview + Qualify applications
Secure applications
Deploy applications
Make applications accessible
Maintain applications
Manage and monitor applications using computerized automated technologies 
Technology stack






IQ:  Examples of automated task 
Explain your experience in bash shell scripting


Explain your experience with linux system
i have over 7years experience performing various tasks on linux system including:
file mgt, user mgt, process mgt, security mgt, package mgt, service mgt system mgt , minitoring mgt, db backup

1) Deploying, provisioning and creating linux servers in Aws cloud and connecting to servers using - ssh protocol
2) configuring , optimising , commissioning (installing packages) and decommissioning (uninstalling packages)and securing linux servers
3) Running workloads in linux servers/systems using:
GUI - console
command - CLI
scripts - 


EXamples of workoads/task executed

file mgt: touch , vi, echo, ls, u mask, chmod, mkdir, chown
user mgt: adduser, usermod, useradd, change
process mgt ; top, ps-ef, jobs, kill,bg, fg
security mgt;  passwd, selinux, firwall (to secure our sever)
package mgt ; wget, yum/apt, rpm, (redhat package manager)
serveice mgt ;  systemctl, start/stop/enable/status
system mgt ;
monitoring = df -h, free -m


4)scheduling and automating task using cron tables
a) backup all data bases every midnight
b) deploying the latest version of the app every sunday at midnight
C) optimize our appservers every month on the 20th  day at midnight (yum update -y & $ yum upgrade -y)
d)monitor system responses and send alerts using the threshold everyminute if cpu/mem usage exceed 80% send email df - h = cpu


Archive/Data backup commands



***********************************************************************************


                                                           SCRIPTING



Automating IT processes/workloads with GUI/CLI and Scripting
=============================================================                  (CLI is part of scripting)  
Automating IT:
   processes
   workloads 
   jobs    
   tasks  

****** with the help of scripting creating user is very simple

We need computer systems to carryout tasks:
===========================================
Computer/systems:
  1. Bare Metal / HardWare components 
      RAM - memory 
      Cpu 
      ROM - hard disk / volume / storage 
      MOUSE
      KEYBOARD
      Screen
  2. Software components 
      operating system = OS [This is the heart a computer] : 
        Windows OS [ 7/xp/8/9/10/11 ]
        MacOS 
        Solaris  
        Linux  OS: distributors
          Radhat 6/7/8/9 / 
          ubuntu  [16/18/20/22] / 
          centos 6/7/8/9 / 
          debain / amazon Linux / suse / etc.  
      and
      other softwares :
         shell 
         Sublime text
         mobaXterm / gitbash / telegram /    
         Microsoft word/Excell  




Examples of workloads:
  fileMGT :mg8 file
 userMGT: mange users
 packageMGT: manage the packages given to my system
 securityMGT : ensures my system is secure
 systemMGT : ensures the system is functioning very well
 etc.



******* for us to be able to achieve this workload and more what do we need for our workload to be deployed to production

              workload mgt on computing systems 


Workload management on Computer systems [LINUX OS] :
    GUI: = Graphical user interface  -- 5%
    CLI: = command line interface    -- 
            aws ec2 describe-instances  
     Linux OS = Linux servers/systems
      ls:   = list the content of a directory
      touch test.txt



BUT NOW WE WANT TO TALK ABOUT SCRIPTING 
    scripts: a shell-script is a collection of one or more commands in a file 
             a script is a file containing commands  
    write a simple script that welcomes Engineers to work?
 

 welcome.sh    :       (name of my script)  
    ==========
     #!/bin/bash           ( the shell script starts with what is called a shebang #!, to indicate the interpreter /bin/bash)
    echo "Good morning"
     whoami
     echo "Welcome to Landmark Technologies" 
     echo "Today is"
     date 

 ********* now the script has been created
we can cat the file to see the content
cat welcom.sh


     run the script by:
       ./scriptName = ./welcome.sh
       ./script1.sh


ke@demo22 ~]$  ./welcome.sh
-bash: ./welcome.sh: Permission denied
[oke@demo22 ~]$ ll
-rw-r--r--. 1 oke oke 107 May 18 19:42 welcome.sh
 644 Permissions  
 The file/script need executable Permissions to run  

therfore assign executable permissions
    chmod 744 welcome.sh            .... executable permission only to the user
    chmod  u+x scriptName            ......... executable permission only to the user 
    chmod   +x scriptName              ........ will add executable permission to both the owner, the group, and others
     chmod +x fileName   
  chmod +x script1.sh
  chmod 775 fileName 
  chmod 700 fileName 

 shell: A shell is an interpreter that interpretes commands to the OS. 
its a program that takes commands from the keyboard and gives them to the operating system to perform (in a file) 

therfore an interpreter is needed when executing a script


shells command interpreters:
  Boune Shell  (sh)
  Boune Again Shell (bash)
  csh / ksh / tsh / zsh  


                                  HOW TO CHECK FOR THE INTERPRETERS RUNNING INMY SYSTEM OR THE ONE AM USING TO EXECUTE COMMAND 

  echo $SHELL       =  List your current shell
      /bin/bash
  cat /etc/shells   = List all shells in your system
     /bin/sh
     /bin/bash
     /usr/bin/sh
     /usr/bin/bash
     /bin/csh
     /bin/tcsh
     /usr/bin/csh
    /usr/bin/tcsh

  sudo yum install ksh zsh -y 
  [oke@demo22 ~]$ cat /etc/shells           
/bin/sh                                ******  WE CAN interprete our script using any of the interpreter
/bin/bash
/usr/bin/sh
/usr/bin/bash
/bin/csh
/bin/tcsh
/usr/bin/csh
/usr/bin/tcsh
/usr/bin/zsh
/bin/zsh
/bin/ksh
/bin/rksh
/usr/bin/ksh
/usr/bin/rksh

  bash -c ls  or ls   
  cat /home/oke/welcome.sh  [accessing the file using the absolute path]
  cat welcome.sh  [accessing the file using the relative path]


Running a script with interpreter doesnt require executable permission


                          Bash shell Scripting:
a shell script must end with .sh oR .sc

Naming convention:
Naming conventions best practices:
bash Shell-scripts   = script.sh or hello.sc  
Shell-scripts has '.sc' or '.sh' extensions 
    scriptname.sh  or 
    scriptName.sc or 
    *.sh or 
    *.sc 
  deploy.sh  = Shell-script [*.sh]
  test.txt   = text file    [*.txt]
  app.sc     = Shell-script [*.sc]
  app.java   = java code    [*.java] 
  monitor.py = python code/script [*.py] 
  app.yaml   = playbook or manifest file [*.yml] 
  main.tf    = terraform scripts/codes [*.tf]
==============================================



           Scripting or automation langauges :
 
1. Bash Shell Scripting
  2. Python       ( we will cover some python scripting)
  3. Groovy  (Jenkins)
  3. Ruby                ( we will nt cover the course)
  4. Yaml  
      (k8s, Ansible, CloudFormation)
  5. JSon / java                       (some projects)
  6. HCL - Terraform                      (configuration language)
  7. XML = 
  8. html 
  9. go/golang 
  10. powershell 


1:07:32
         #COMMENT
MEANS THE LINE IS commented and cannot be executed, commented lines start with #


MULTI LINE COMMENTS
Multi line comment starts with :<< and a word (<< boy)
the multiline script must end with  the same word after the two << which it started with 
only lines written before <<(boy) will display and lines written at the end after the starting word (boy) has been written will display as well when you run the script but
lines written after <<(boy) and before (boy) is written at the end will not display whne you run the script 



  How to make your codes/scripts:
  easily readable/understandable 
  1. by adding notes/comments/explanations 
it gives meaning to a script, it gives more explnantion 
the script can easily be used again in the future
even people without IT knowledge can easily appreciate some technology documents


Who are the comments meant for?
  1. It make your script/code to be understood by you and others over time. 
  2. It make your script/code easily reusable in the future
  3. Facilitate/ease troubleshooting and debugging
  4. comments are Good for teams: Team of 14 
        6. developers writing codes/scripts 
        1. Scrum master 
        3. DevOps Engineers 
        1. DevOps Security Engineer 

Making your script portable.  
1. Hard coding 
2. soft coding   


                                                        USING VARIABLES IN SCRIPTING

Who are the comments meant for?
  1. It make your script/code to be understood by you and others over time. 
  2. It make your script/code easily reusable in the future
  3. Facilitate/ease troubleshooting and debugging
  4. comments are Good for teams: Team of 14 
        6. developers writing codes/scripts 
        1. Scrum master 
        3. DevOps Engineers 
        1. DevOps Security Engineer 

Making your script portable.  
1. Hard coding 
2. soft coding   



                                                        USING VARIABLES IN SCRIPTING
*******1:33:50 ....... to call the script : sh (script name)  eg sh udv.sh
inside the script we are creating, we define the udv by : echo $variable name
to call SDV : echo ($variable name) eg echo $PWD,  echo $SHELL     ..... This will give us the SDV for shell
 


using variables in scripting:  Variables help us to make a script dynamic, howevre we must make sure the variable is dynamic


     HOW TO CALL VARIABLES IN BASH SHELL SCRIPTING
variables:
variables are defined by the either the user or the system 
we can refer/call a variable with $variable  ie $(variable name)


                                              USING   VARIABLES IN SCRIPTING
TYPES OF VARIABLES: udv & SDV       (udv should be written in lowercase so it doesnt clash with SDV) ***** highly recommended so it doesnt clash wit the SDV ....1:39:50
                                           (i bliv udv ,is user defined variable, while SDV is system defined variable)


User defined variables   = UDV  : 
 Are defined/created by some admins  
udv.sh  
 name=SimonLegah
 cpy=LandmarkTechnology  
 city=Toronto
 country=Canada  
 echo $name works for $cpy located in $city, $country    


system defined variables   = SDV  : 
 SDV Are variables that comes with the OS  
 Such variables are in uppercase  
  SHELL=bin/bash
  echo $SHELL  = /bin/bash
  env = List all system defined variables  





SCRIPTING 3 & 4



  export class=DevOpsMasterClass

system defined variables:
  echo sdv starts  
   echo $HISTSIZE  
   echo $USER 
   echo $HOME  
   echo $PATH  
   echo $LOGNAME
   echo $SHELL 
echo sdv ends   

[oke@demo22 ~]$  echo $HISTSIZE
                 1000
 
