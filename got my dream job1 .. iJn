5&6 *****   vi index.html  ( when it opened, i didnt see the previous content, Jesus is lord ) does it mean it was sent directly to the web & not the file  .... ???

from tabitha cv i was making :
ïƒ˜	We work very closely with Developers and Build & Release team. We setup Jenkins server& nodes for build and release team as per request. 


LANDMARK  DEVOPS E. DEgree master class syllabus: 
 for everyone to becomae a master and to master the subject matter in Devops end to end automation and deployment.

   AFTER Devops training you are expected to become 
1)SME = subject matter expert
it means that you have - Technical skill - understanding all the devops modules
2) mangerial skill - Project mangers (mange projects, members in your team) - scrum master
3) leadership skills - can be a team lead
SRE : site reliability engineering
DevSecops : Devops dev security and operations 
   SRE/DevSecops
Devops/cloud/Application Engineering
platform/kubernetes/application Engineering/ infrastructure engineering


What is your Technology stack in landmark Technologies  ?/??
   in other words, what are the tools that are in your tool box?
These tools are what we can call the modules for this class




DEVOPS INTRO:
we are devops engr , we are subject matter experts 

Applications are the output from software

Anything done in linux is a process 

***** Git4  ... 15.26 
the recommendation is to write good commit messages

we support java based applictaion/projects in our environment


Anytime we change anything tin in configurtaion file we restart the server


Sonar Q&A
we cant do without CLI bc commands bring automation thats why you hv so much money thrown at you  and its not in all cases that we can  use only GUI

what is sshd  ???
i knw we need a service smt when we are connecting to server and you always say ssh , pls what ais ssh to a layman  ?????????
..... i think it means we connect



******************************************************************

 WHAT KIND OF COMPUTER ARE YOU USING ??
The type of computer one is using can depend on the vendor
eg : i can say am using a dell computer but its running a windows system so am using a windows computer

therfore, what makes a computer isnt just about the hardware or vendor but mostly about the operating system running the computer
the heart of the computer is the operating system

An HP with windows operating system = windows system 
A dell laptop with linux operating system = linux systems
An HP laptop with linux operating system = linux system


*************************************************************



EXPLAIN YOUR EXPERIENCE IN DEVOPS? 
The 20 modules for this course is your experience in devops (about 20 minutes)

        ANS:
BSc /MSc graduate IT 
devops can be used to automate IT tasks and processes

    vs     jenkins 1.08
Landmark Devops masterclass graduate:
i have 7years experience implementing devops processes and automating tasks for multiple clients
i have experience in implememnting devops processes and automaitng tasks for multiple clients


******* devops brings automation therefore, devops is all about automation because on a daily basis we are trying to automate it tasks and process .
what we have automated we are asking are there better automation options 
e.g, if our current automation takes 10hours, our question eveyday is can we automate better to reduce the time from 10 to 2hours

WHAT IS DEVOPS TO YOU   .. ?
Based on my experience devops is all abt continous automation and improvement on how IT tasks and processes are implemented

WHY devops ?
1) continous Automation -:
Devops brings automation, continous and thats why we choose devops in our env. We choose devops not agile or waterfall or a combination of Agile 
and devops bc devops brings continous automation

2) Continous transformation: 
transforming how things are done 

3) Disruption:
changing how task were done in the past , disrupt processes that were done using traditional approasch , bring in automation 
4)its all about innovation and change


     DEVOPS IMPORTANCE?
its the present and the future of IT innovation (and change) The way devops is devops is designed and implementated is whats needed today which is the present and thats what
will be needed tommorrow meaning devops is the future bc it brings continous automation 


   WHAT IS YOUR TASK AS A DEVOPS ENGINEER ?
As a devops engineer, i work with my team to develop, test, build, review + qualify , secure, deploy , access, maintain and monitor applications using computerized 
automated automated technologies In our technology stack we are able to run/ execute task using either GUI or CLI 

These are my tasks as a devops engineer
Develop applications
Test application 
Build applications
REview + Qualify applications
Secure applications
Deploy applications
Make applications accessible
Maintain applications
Manage and monitor applications using computerized automated technologies 
Technology stack






IQ:  Examples of automated task 
Explain your experience in bash shell scripting


Explain your experience with linux system
i have over 7years experience performing various tasks on linux system including:
file mgt, user mgt, process mgt, security mgt, package mgt, service mgt system mgt , minitoring mgt, db backup

1) Deploying, provisioning and creating linux servers in Aws cloud and connecting to servers using - ssh protocol
2) configuring , optimising , commissioning (installing packages) and decommissioning (uninstalling packages)and securing linux servers
3) Running workloads in linux servers/systems using:
GUI - console
command - CLI
scripts - 


EXamples of workoads/task executed

file mgt: touch , vi, echo, ls, u mask, chmod, mkdir, chown
user mgt: adduser, usermod, useradd, change
process mgt ; top, ps-ef, jobs, kill,bg, fg
security mgt;  passwd, selinux, firwall (to secure our sever)
package mgt ; wget, yum/apt, rpm, (redhat package manager)
serveice mgt ;  systemctl, start/stop/enable/status
system mgt ;
monitoring = df -h, free -m


4)scheduling and automating task using cron tables
a) backup all data bases every midnight
b) deploying the latest version of the app every sunday at midnight
C) optimize our appservers every month on the 20th  day at midnight (yum update -y & $ yum upgrade -y)
d)monitor system responses and send alerts using the threshold everyminute if cpu/mem usage exceed 80% send email df - h = cpu


Archive/Data backup commands



***********************************************************************************


                                                           SCRIPTING
WORKLOADS, SCRIPTING, shells command interpreters:,  HOW TO CHECK FOR THE INTERPRETERS RUNNING INMY SYSTEM OR THE ONE AM USING TO EXECUTE COMMAND,  Bash shell Scripting,  
Scripting or automation langauges, COMMENT,  USING VARIABLES IN SCRIPTING, HOW TO CALL VARIABLES IN BASH SHELL SCRIPTING, 



Automating IT processes/workloads with GUI/CLI and Scripting
=============================================================                  (CLI is part of scripting)  
Automating IT:
   processes
   workloads 
   jobs    
   tasks  

****** with the help of scripting creating user is very simple

We need computer systems to carryout tasks:
===========================================
Computer/systems:
  1. Bare Metal / HardWare components 
      RAM - memory 
      Cpu 
      ROM - hard disk / volume / storage 
      MOUSE
      KEYBOARD
      Screen
  2. Software components 
      operating system = OS [This is the heart a computer] : 
        Windows OS [ 7/xp/8/9/10/11 ]
        MacOS 
        Solaris  
        Linux  OS: distributors
          Radhat 6/7/8/9 / 
          ubuntu  [16/18/20/22] / 
          centos 6/7/8/9 / 
          debain / amazon Linux / suse / etc.  
      and
      other softwares :
         shell 
         Sublime text
         mobaXterm / gitbash / telegram /    
         Microsoft word/Excell  




Examples of workloads:
  fileMGT :mg8 file
 userMGT: mange users
 packageMGT: manage the packages given to my system
 securityMGT : ensures my system is secure
 systemMGT : ensures the system is functioning very well
 etc.



******* for us to be able to achieve this workload and more what do we need for our workload to be deployed to production

              workload mgt on computing systems 


Workload management on Computer systems [LINUX OS] :
    GUI: = Graphical user interface  -- 5%
    CLI: = command line interface    -- 
            aws ec2 describe-instances  
     Linux OS = Linux servers/systems
      ls:   = list the content of a directory
      touch test.txt



BUT NOW WE WANT TO TALK ABOUT SCRIPTING 
    scripts: a shell-script is a collection of one or more commands in a file 
             a script is a file containing commands  
    write a simple script that welcomes Engineers to work?
 

 welcome.sh    :       (name of my script)  
    ==========
     #!/bin/bash           ( the shell script starts with what is called a shebang #!, to indicate the interpreter /bin/bash)
    echo "Good morning"
     whoami
     echo "Welcome to Landmark Technologies" 
     echo "Today is"
     date 

 ********* now the script has been created
we can cat the file to see the content
cat welcom.sh


     run the script by:
       ./scriptName = ./welcome.sh
       ./script1.sh


ke@demo22 ~]$  ./welcome.sh
-bash: ./welcome.sh: Permission denied
[oke@demo22 ~]$ ll
-rw-r--r--. 1 oke oke 107 May 18 19:42 welcome.sh
 644 Permissions  
 The file/script need executable Permissions to run  

therfore assign executable permissions
    chmod 744 welcome.sh            .... executable permission only to the user
    chmod  u+x scriptName            ......... executable permission only to the user 
    chmod   +x scriptName              ........ will add executable permission to both the owner, the group, and others
     chmod +x fileName   
  chmod +x script1.sh
  chmod 775 fileName 
  chmod 700 fileName 

 shell: A shell is an interpreter that interpretes commands to the OS. 
its a program that takes commands from the keyboard and gives them to the operating system to perform (in a file) 

therfore an interpreter is needed when executing a script


shells command interpreters:
  Boune Shell  (sh)
  Boune Again Shell (bash)
  csh / ksh / tsh / zsh  


                                  HOW TO CHECK FOR THE INTERPRETERS RUNNING INMY SYSTEM OR THE ONE AM USING TO EXECUTE COMMAND 

  echo $SHELL       =  List your current shell
      /bin/bash
  cat /etc/shells   = List all shells in your system
     /bin/sh
     /bin/bash
     /usr/bin/sh
     /usr/bin/bash
     /bin/csh
     /bin/tcsh
     /usr/bin/csh
    /usr/bin/tcsh

  sudo yum install ksh zsh -y 
  [oke@demo22 ~]$ cat /etc/shells           
/bin/sh                                ******  WE CAN interprete our script using any of the interpreter
/bin/bash
/usr/bin/sh
/usr/bin/bash
/bin/csh
/bin/tcsh
/usr/bin/csh
/usr/bin/tcsh
/usr/bin/zsh
/bin/zsh
/bin/ksh
/bin/rksh
/usr/bin/ksh
/usr/bin/rksh

  bash -c ls  or ls   
  cat /home/oke/welcome.sh  [accessing the file using the absolute path]
  cat welcome.sh  [accessing the file using the relative path]


Running a script with interpreter doesnt require executable permission


                          Bash shell Scripting:
a shell script must end with .sh oR .sc

Naming convention:
Naming conventions best practices:
bash Shell-scripts   = script.sh or hello.sc  
Shell-scripts has '.sc' or '.sh' extensions 
    scriptname.sh  or 
    scriptName.sc or 
    *.sh or 
    *.sc 
  deploy.sh  = Shell-script [*.sh]
  test.txt   = text file    [*.txt]
  app.sc     = Shell-script [*.sc]
  app.java   = java code    [*.java] 
  monitor.py = python code/script [*.py] 
  app.yaml   = playbook or manifest file [*.yml] 
  main.tf    = terraform scripts/codes [*.tf]
==============================================



           Scripting or automation langauges :
 
1. Bash Shell Scripting
  2. Python       ( we will cover some python scripting)
  3. Groovy  (Jenkins)
  3. Ruby                ( we will nt cover the course)
  4. Yaml  
      (k8s, Ansible, CloudFormation)
  5. JSon / java                       (some projects)
  6. HCL - Terraform                      (configuration language)
  7. XML = 
  8. html 
  9. go/golang 
  10. powershell 


1:07:32
         #COMMENT
MEANS THE LINE IS commented and cannot be executed, commented lines start with #


MULTI LINE COMMENTS
Multi line comment starts with :<< and a word (<< boy)
the multiline script must end with  the same word after the two << which it started with 
only lines written before <<(boy) will display and lines written at the end after the starting word (boy) has been written will display as well when you run the script but
lines written after <<(boy) and before (boy) is written at the end will not display whne you run the script 



  How to make your codes/scripts:
  easily readable/understandable 
  1. by adding notes/comments/explanations 
it gives meaning to a script, it gives more explnantion 
the script can easily be used again in the future
even people without IT knowledge can easily appreciate some technology documents


Who are the comments meant for?
  1. It make your script/code to be understood by you and others over time. 
  2. It make your script/code easily reusable in the future
  3. Facilitate/ease troubleshooting and debugging
  4. comments are Good for teams: Team of 14 
        6. developers writing codes/scripts 
        1. Scrum master 
        3. DevOps Engineers 
        1. DevOps Security Engineer 

Making your script portable.  
1. Hard coding 
2. soft coding   


                                                        USING VARIABLES IN SCRIPTING

Who are the comments meant for?
  1. It make your script/code to be understood by you and others over time. 
  2. It make your script/code easily reusable in the future
  3. Facilitate/ease troubleshooting and debugging
  4. comments are Good for teams: Team of 14 
        6. developers writing codes/scripts 
        1. Scrum master 
        3. DevOps Engineers 
        1. DevOps Security Engineer 

Making your script portable.  
1. Hard coding 
2. soft coding   



                                                        USING VARIABLES IN SCRIPTING
using variables in scripting:  Variables help us to make a script dynamic, howevre we must make sure the variable is dynamic

*******1:33:50 ....... to call the script : sh (script name)  eg sh udv.sh
inside the script we are creating, we define the udv by :  variable name = variable value    eg city = toronto , app = tesla application
we can refer/call a variable with $variable  ie echo $(variable name)   eg echo $city   and we will get the value as "toronto         .....1:42:13

we run the "env" command to list all the SDV 
to call a SDV : echo ($variable name) eg echo $PWD,  echo $SHELL     ..... This will give us the SDV for shell
 




     HOW TO CALL VARIABLES IN BASH SHELL SCRIPTING
variables:
variables are defined by the either the user or the system 
we can refer/call a variable with $variable  ie $(variable name)


                                              USING   VARIABLES IN SCRIPTING
TYPES OF VARIABLES: udv & SDV       (udv should be written in lowercase so it doesnt clash with SDV) ***** highly recommended so it doesnt clash wit the SDV ....1:39:50
                                           (i bliv udv ,is user defined variable, while SDV is system defined variable)


User defined variables   = UDV  : 
 Are defined/created by some admins  
udv.sh  
 name=SimonLegah
 cpy=LandmarkTechnology  
 city=Toronto
 country=Canada  
 echo $name works for $cpy located in $city, $country    


system defined variables   = SDV  : 
 SDV Are variables that comes with the OS  
 Such variables are in uppercase  
  SHELL=bin/bash
  echo $SHELL  = /bin/bash
  env = List all system defined variables  





SCRIPTING 3 & 4
SYSTEM DEFINED VARIABLES, TYPES OF SCRIPT, CHANGING SDV PERMANENTLY, HOW TO MAKE A VARIABLE DYNAMIC, CLAs, ARGUMENT, ARGUMENTS WITH CONDITION, INEQUALITY SIGN, CONDITIONS,
  DEBUGGING ISSUES

  export class=DevOpsMasterClass

system defined variables:
  echo sdv starts  
   echo $HISTSIZE  
   echo $USER 
   echo $HOME  
   echo $PATH  
   echo $LOGNAME
   echo $SHELL 
echo sdv ends   

[oke@demo22 ~]$  echo $HISTSIZE
                 1000
export HISTSIZE=2000   ......... (we run it on the CLI ) we use export to temporarily change the SDV value but the change value will only last for that given login session
 


    TYPES OF SCRIPT

dynamic script  :
can have multiple usage by various  people 
  1. echo $name Welcome to $cpy  

static script:
can only be used by one person
  1. echo Oke Welcome to MTN          ***** it doesnt give the option to change the variable 




  CHANGING SDV PERMANENTLY

1) ls -a = to get our hidden files .bashrc
2) then vi .bashrc and change HISTSIZE value

  = export HISTSIZE = 1500 , Save & exit file 
3)To enforce the changes, we run the source command 
     = source.bashrc
4) check = echo $HISTSIZE . will give us 1500
so even when we log out this user/session  sudo su - ec2-user  HISTSIZE is still 1500



       HOW TO MAKE A VARIABLE DYNAMIC 
  Variables help us to make a script dynamic, howevre we must make sure the variable is dynamic

(the read command is used to obtain dynamic variable or input variable from users)
read -s  = secret variable (security  is inherent in our environment)

      DYNAMIC SCRIPT

eg       write a script to authenticate bank users:
===========================================

                                           line   1,3,4,5,7 are  dynamic variables

echo 'Please enter your name'        (we collect the variable from the cx)
read name
echo "$name, welcome to TD Bank"
echo 'please enter your card'
echo 'please enter your pin'
read pin
echo "$pin is the correct pin, $name, how may we help you today?"

******** when writing a script and you want to read a sensitive value pass the "-s"
because Security is inherent in our environment



with the help of scripting , creating user becomes very simple , it easy to manage task like this ***** 49:50
            
TICKET0045: Write a scipt to dynamically create users. 
   userMGT commands: adduser / usermod / userdel /  groupadd / groupdel 
   root access:    sudo adduser/userdel/usermod/ groupadd / groupdel 
 

vi userCreate.sh  

[oke@demo22 ~]$ cat createuser.sh
#!/bin/bash
# This script requires root/sudo access
echo "Please enter the name of the newUser"
read newuser
echo "Now ready to create $newuser account "
sudo adduser  $newuser
echo "$newuser account is created successfully"         ****** WE want to get this message : successfully created
grep $newuser /etc/passwd                        # to verify  that user is created    
[oke@demo22 ~]$



.  
  ****** in bash shell scripting we hv what is called CLI argument 

Command Line Arguments = CLAs  
===============================
TICKET0047: write a script to backup databases in our environment.  
vi db_backup.sh  OR touch db_backup.sh     ..... ( touch to create an empty file)
 echo "echo database backup initiated" > db_backup.sh ... > OR >> , > redirect to replace the content/line of code  in the file OR append >> to add the line of code/content
 echo "echo database backup completed" >> db_backup.sh

****1:04:00 .. without quote, with single quote, or double quote , the script will run bt for  use double " for best practices ... 1:04:58


****** 1:05:31 .......... as part of comment run this script (db.backup.sh) with 2 arguments [dataserver and admin]
                                              the dataserver is dbserver11 and the admin is simon

vi db.backup .sh
#!/bin/bash
#this bash shell script will back database in linux systems
#Author:cecilia ekeh
#run this srcipt with 2 arguments  [dataserver and admin]
#sh db_backup.sh dbserver11 simon
echo database backup initiated
echo database backup completed 
echo all backups successful
echo the 1st argument is $1
echo the 2nd argument is $2
echo the scriptname is $0


************  to run the script    ........ when we run the script, we see the arguments displayed : (db11 and simon)

[ec2-user@demo~] $ sh sd_backup.sh db11 simon    ......  (we run the script with the argument)
 database backup initiated
 database backup completed 
 all backups successful
the 1st argument is db11
the 2nd argument is simon
 the scriptname is db_backup.sh



                                                  ARGUMENT


An argument, also called command line argument, can be defined as input given to a command line to process that input with the help of given command. 
Argument can be in the form of a file or directory. Arguments are entered in the terminal or console after entering command.

CLA are diff options we can use while running a script 



   ARGUMENTS WITH CONDITION
*** if asked whatelse can be done with $?  
         ( it can be used to run a command with conditions)

*** if asked whatelse can be done with $?
we can say if [$/ = o ] then ... 


cat deploy.sc     
if [ $?==0 ] 
then
echo "We succeeded" 
else  
echo "We failed, please troubleshoot" 
fi  

cat deploy.sc     
if [ $#==3 ] 
then
echo "We succeeded" 
else  
echo "Please pass 3 arguments with your script" 
fi 


                             INEQUALITY SIGN


Inequality signs :
=================
-eq  or  == represent equals to 
           (( $? == 0 )) [ X -eq = y]
-ne  or  != represent not equals to 
-gt  or  >  represent greater than
-lt  or  <  represent less than 
-ge  or >= greater than or equals to
-le  0r <= less than  or equals to 

if [ votes -gt 50% ]
then 
echo he won the elections 
fi  


                             CONDITIONS: 
conditions :
if statement  
Syntax:
if (( conditions ))
then 
commands 
else  
commands  
fi



if1.sh  

echo "welcome to Landmark DevOpsMasterClass" 
echo "How much are you willing to pay"
read price
if [ $price -ge 4000 ]
then 
echo "your are admitted"  
else  
echo "sorry you can't be admitted today "
fi  


if2.sh    ( to authenticate customers)
echo "Please enter for pin"
read pin  
if (( $pin == 4100 ))
then 
echo "You have entered the correct pin"
echo "Thank you for banking with TD Bank"
else  
echo "sorry you entered the wrong pin"
echo "your account is blocked for your protection"
echo "Please visit a branch for further assistance"
fi  

                                       DEBUGGING ISSUES


Debugging problems in scripting  
===============================

IQ: 
hOw do you troubleshoot issues in scripting?

ANS:
 Run the script in debugging mode
sh -x scriptName  

Input output redirection  
=============================
 
Redirect Standard output --   :      (script name = debug.sh
  sh scriptName > log  
  sh debug.sh > log or sh debug.sh 1> log  

Redirect Standard errors --   : 
  sh scriptName 2>fileName   
  sh debug.sh 2>error.log  

Redirect Standard output & errors --   :
  sh scriptName  > fileName  2>&1 
  sh debug.sh  > all.log  2>&1 



                                                                          SCRIPTING 5&6
USING (bash shell)Scripts for package management, FILE MGT,  CONTROL COMMANDS = CONDITIONS, LOOPS, WHILE LOOPS, USES OF LOOPS, SWITCH CASES, FUNCTION, SCP COMMANDS , PATHS (Absolute/
relative ), CRONTABLE

                                     USING Scripts for package management:
                                      ===================================
we can use script for packages installing
We can install, remove, updates and upgrade packages in our servers.

examples of packages:
  nano, tree, vim, httpd, 
  java, maven, tomcat, jenkins,
  kubernetes, kubelet, docker
  terraform, etc.  

We can download and install packages 
using package managers like:
   yum/dnf          -- centos, redhat
   apt/apt-get      -- ubuntu, debain
   chocolatey/choco -- windows OS  
   brew             --  mac  
   helm,  -- kubernetes 
   pip,   -- python 
   rpm 

centos/redhat/amazon linux/:
eg:  yum install nano 

eg we can write a script 
TICKET0017 - Write a simple script to install and start apache
  ( he also added some content to a new file: /var/www/html/index.html ), this file is called index.html, it is a webserver ( Jesus is lord directed into the index.html file)
   
**********we can verify the content he added
we can ifconfig.me to get the ip of our server  ,  ( the curl command to check if certian stuff is running as expected)
then, curl (ip address)

            
              FILE MGT     .. ...... we can also 
                  fileMGT_index.html
                     ------------------

Vi index.html (we write the script using html code) ie <h1> h2   ( opening and closing tags)
 [oke@demo22 ~]$ cat index.hmtl
                vi index.html  ( when it opened, i didnt see the previous content, Jesus is lord ) does it mean it was sent directly to the web & not the file 

<h1> Welcome to LandmarkTech </h1>
<h2>The Pride of Africa</h2>

sudo vi  /var/www/html/index.html
<h1> Welcome to LandmarkTech </h1>
<h2>The Pride of Africa</h2>
<h2>The Pride of Africa</h2>
<h3>The Pride of Africa</h3>
<h4>The Pride of Africa</h4>

                                                CONTROL COMMANDS = CONDITIONS

control commands = conditions:                   WE can use if, else "statement " in the property market
==============================                           we can also use 'if,else' statement to authenticate users
                                                        Add multiple conditions with 'elif'
*** IT starts with "if and ends with fi"

if statements:
Syntax:  
  if [ conditions ] 
  then 
  commands  
  else  
  commands
  fi 

if2.sh 
echo 'ENTER YOUR GPA'
read gpa
if [ $gpa -gt 4 ]
then
echo "Congratulations,"
echo "You are a 1st class student"
elif [ $gpa -ge 3 ]
then 
echo "Congratulations,"
echo "You are a 2nd class student"
elif [ $gpa -ge 2 ]
then 
echo "Congratulations,"
echo "You are a 3rd class student"
else
echo "You can do better, please work harder"
fi


                      
                                            LOOPS ( a situstion where we have a repeated scenario)

Loops: When a condition can be satisfied multiple times.
======        condition with multiple iterations 
for  loop  starts with a "do" and ends with "done"
=========
Loops: condition with multiple iterations 

eg
x < 100      ie  can be satisfied multiple times because X can be 1, 10 , 25, 14, 7, 35, 80 , etc , so x can abe satified until all these is exhausted
x= [0, 1, 2, 3, ..., 99] 
    lets looks at for loop syntax

eg
for loop.sh (fl.sh)  
for  (( a=1;a<=5;a++ )) 
do  
echo $a   
done  

Expected output:
a=1  
a=1 + 1 = 2 
a=2 + 1 = 3 
a=3 + 1 = 4  
a=4 + 1 = 5 
look breaks when condition is no longer satisfied bc 5+1 is greater than 5
a=5 + 1 = 6

                                WHILE LOOP
                            Also conditions with multiple iterations
yl.sh   
echo "while loop starts"
echo "performing load testing for tesla"
l=10000
while [ $l -le 90000 ]  *** l is < or = to 90,000 .. ie the max load l can carry is 90,000
do
echo "Carrying load of "
echo $l
l=`expr $l + 10000  ( the expr $l is to add value)
done
echo "while loop ends"

each iteration wil tell hw much load it is carrying bt our expected output will be:

Expected output:                         (it is increasing by 10,000 bc the expr says $l + 10,000 and the value of $l is 10,000, 
  and when we run the script: sh yl.sh;                                so it continues like this until the load is < or =90000
performing load testing for tesla 
  Carrying load of       (for each of this iteration, bc this is a loop, it wil be looping tru and saying carrying load of 10,000,20000 etc
  l = 10000
  Carrying load of
  l = 10000 + 10000 = 20000
  Carrying load of
  l = 20000 + 10000 = 30000
  Carrying load of
  l = 30000 + 10000 = 40000

                                        USES OF LOOPS
use cases for loops:
===================
WE CAN use loops to run load test
we can use loops to get a range of values



                                   SWITCH CASES
                THis is when you have multiple conditions to manage
switch case:
eg

for systemctl we can  start|status|restart|stop|enable|disable sshd 
  yum install/remove/updates/upgrade

********* so when we hv situation like this we use "switch case"

sonarQube:
  sonar.sh  | status | restart | stop | start | version

 sh sonar.sh start 
 sh catalina.sh stop tomcat
     $0         $1    $2           ***** these numbers can change

Syntax for switch case:
case $1 in  
    option1)                ******* start
      Commands;;
    option2)                   ******* stop
      Commands;;
    option3)                    ******** restart
      Commands;;
    option4)                    ******** status
      Commands;;
      *)
       commands;;
esac 

******* 
1)the syntax starts with 'case' and ends with 'esac'
2) anything entered that doesnt fall under (stop/start/restart and status) will be represented under * wildcat
3) the cases entered (start/stop/restart/status) must end with ";;"



