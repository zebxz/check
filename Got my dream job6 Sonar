

LINUX , scripting, git , maven, tomat, sonar, nexus, jenkins , aws, docker, k8, terraform, ansible, k8/helm 
In our env, we use LINUX OS for file,process,package,security mgt, GIT FOR VERSIONING, MAVEN FOR BUILD


TYPES OF TESTING, CODE QUALITY TOOLS, CODE QUALITY BENCHMARK, COMPARING ACTUAL RESULT AGAINST BENCHMARK, CODE QUALITY, SONARQUBE COMPRISES OF COMPUTE ENGINE, SEARCH ENGINE, DATABASES, WWEBSERVER, WHERE IS THE SONARQUBE HOME DIR
 VERSIONS OF SONARQUBE WE CAN INSTALL IN OUR ENVIRONMENT, 

code quality with sonarqube & sonar cloud etc
 in our env we use Sonarqube, sonarqube has to do with software quality 
we develop the application, we build the appl and it is deployed to the applictaion servers but before the app is deployed we have to perform software testing
so we use sonarqube for code quality analysis
 1) validate    2) compiles   [app.java >>> app.class]     3) testing (run unit testing) pass    4) pacakges will be created
therefore; there is a quality gate in maven 
however, it runs unit testing on the number of testcase developers have written but most of the time developers will not write the code as desired thats why we need code quality tool to check, 
also for the software testin, maven doesnt check if developers have written the desired number of testcases and tahst why sonarqube is important as well


Types of testing that can be performed 
1)unit testing  [Junit )  : this is done to test individual components, units or lines of a code
2)functional testing: we test how the code is functioning, how the application is working
performance testing   is it performing as desire 
5)penertration To test if anyone can break into the system  using any username & password
   44.22  *** these are some of the categories that sonarqube is checking for.

with sonarqube we can run some analysis ie comparing actual results against the benchmark/standards is analysis:
1. How many unit test cases were run?
   How many test cases should have been run? 
 COMPARING ACTUAL RESULT AGAINST BENCHMARK

comparing actual results against the benchmark/standards is analysis:
1. How many unit test cases were run?
   How many test cases should have been run? 

2. Is our code readable with ease?   ........ AVoid complex code
    ----> code smells 

3. Is our code portable [ environment independent ]?
portable code means the code is not environment indenpendent 
we can run the code in diff environment like diff environment , port environment & test environment
    -- if not code smells / hard coding 

4. Are there vulnerabilities in the code ?
    ---> if they are then --- 
     eg  password is only 4 characters can result in security breach

Therfore we can set our standard/expectation for our code

Benchmark/standards for a quality Software/application:
1. Code coverage should be greater than 85%  
2. Dublicate lines should be less than 5% 
3. There should be no vulnerabilities in the code [pw=1234] 
4. Code smells should be less than 5  


example of code smell, writing codes without following certain standards could result to code smell
also hardcoding: ie writing scripts that are not dynamic
 code smell is not following the right syntax , writing bad codes with poor syntax, writing codes that are not dynamic , duplicate code or bad code, 
duplication can be avoided by using function

      
CODE QUALITY

Code Quality expectations:
• Duplicated code  ---  avoided using Functions, • Coding standards, • Unit tests, • Complex code, • Comments, • Potential Bugs, • Architecture & Design



************** END FOR INTERVIEW************************




                  SONARQUBE COMPRISES OF /this is the architect of sonarqube

SonarQube comprises of:
  1. sonarqube Scanner: from sonaqube scanner, the codes are sent to the sonarqube server, the server has 4 component
  2. sonarqube server :   This comprises of 
       Compute engine : that calculates and gives us values
       search engine - which is elasticsearch
       web-server : means we can access sonarqube information on the browser
     database - h2 database
 we have relational and non-relational databases
1. mySQL = RDS   = Relational databases
  generally data is structured and stored in tables[rows and columns] format         ******* it uses rows and column
 ie to say we have mySQL = RDS
mySQL is a langague used to qwery  RDS.   :
  SQL = structured qwery langaguage  
 
eg of structured databases
    oracle, mySQL  - OS, PostgreSql  - OS, MSSQL (MicrosoftSQL), DB2, Sybase
    MySQL, Oracle, Microsoft SQL Server, PostgreSQL 

 data is stored ***** using rows and column
This type of structured is used to prepare report if we are collecting structured data from end users

2. noSQL = noRDS = non Relational databases, unstructured data and stopped in JSON format
Using json format we can get the information like this:
USING Json format to store the users information/data
  user1 = name/tel/address  
  user2 = name/ssn/date of birth  
  user3 = place of birth / profession / tel
   generally data is unstructured and stored in JSON format  

1:12:20  Examples of databases (which we will be seeing later in the course) that are used to manage non Relational database:
    MongoDB --, Cassandra, CouchDB, CouchBase, HBase, Redis, Riak, 
Neo4J are the popular NoSQL databases.


Home dir: when we ls we see the content of sonarqube home dir
The home dir is where the software is extracted and in my work environment its = /opt/sonarqube, its also where we extract the software
THe sonarqube was downloaded with wget and unzipped to extract the software

Bin dir: binary contains files like sonar.sh to start sonar
conf dir : conf file like sonar properties where we can change anything 

  KEY TERMS OF CODE QUALITY ANALYSIS TO NOTE 

Sonar Report depends on:
1) Rules 
2) Quality profile 
3)  Quality gates



9.16
Quality profiles are collections of rules to apply during an analyis
for each language there is a default Quality profile.
 Quality profiles are set of rules that we can use to achieve some specific quality threshold when it comes to quality software using sonar
**** A meeting is held where the diff members of the team will decide and identify the diff rules that should be applied against our projects

9.45
Rules are setting desired expectations
in sonarqube, we hv some rules that have been set by default




               DIFF PROJECTS HAVE DIFF RULES
Rules are codes that have been defined to identify specific issues 
eg
Rules can identify if theres a bug in the code or code smell or duplicate lines
Rules are setting desired expectations , some rules are created by default and we can create customize rules by creating quality profiles and attach rules to them 
QUALITY GATES
with quality gates we can set conditions which means that for the software to be classified as a good software it must pass these condidtions
eg
if our coverage quality is 90% and there are 10written lines of codes, it means developer should test 9lines out of the 10lines
Duplicated lines: if duplicates exceeds 5%, sonarqube will fail the check
if the bug is greater than 2 then theres a problem
unit test success: if the number of test that passes is more than 95% we are ok



