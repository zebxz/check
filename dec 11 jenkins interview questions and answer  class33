 
Applications are the output of softwares
Applictaions are developed by developers
******* SOFTWARE Engineers and developers develop applications




In our environment,we use git for versioning. Git is a Distributed Version Control systems. DVCS
In our env, we use Git which is a Distributed Version Control systems. we use Git for Versioning
Git Installations differs depending on your operating system:




*** start

  APPLICATIONS ARE THE OUTPUT FROM SOFTWARES
In our environment,we use git for versioning
We develops, tests, builds, deploy and monitors applications
our main focus is on development and when applications are developed multiple versions of the application can be developed
and so, we need to use a version control system that brings all the advantages of version control and that is a distributed version control system bc it keeps and tracks record( So that if the client is not happy with the latest version of the app, we ROLL BACK, from
"version2 to version1". ie the latest version to the previous version.
There are other platforms we can use for SCM like git lab, git hub, git bucket and aws code commit but In our environment,we use git for versioning


git comes with source code managers
in each loCAL environment(ie each developers env) gitbash is installed so it captures everything that is done with relative ease
so before we even submit the codes from our local env to scm, GIT  is already installed
***  skip *** meeeee.... gitbash can be installed directly on our windows computer or remotely on linux using mobaxterm    ... my understanding from git2; 14;35
 ***** skip*** MobaXterm is a versatile and powerful tool for interacting with Linux systems from a Windows machine, its a windows app designed for remote computing.

Project Onboarding: we onboard our projects by;
   1. create a github account for the organisation or organisations where applicable
 i create Create organisations & teams where applicable in a SCM ['GitHub']  and assign members[Developers, etc.] 
       url =  https://github.com/landmarkss
       then create repositories, either public or private  .... git2.. 13.54
then share login details with Developers/Team [ userName/password ]
NEXT with the Git already installed we create directories for dev, Initialise this directory to keep track of 
   any change or changes in the files/codes  ... by running git init, Git init creates a local repository and initializes the project directory
create a directory for Development  and  inorder to To move files from our local repository  to >>>> the Remote repository we created in github, we run "git remote add and the remote repo url"
   we run git add to move files from the WORKING AREA (workshop) to >>> staging >> & to move from the STAGING AREA (show room) to >>the local repo, we run git commit & a good commit msg is recommended as well & finally we run the git push to move from the local repo >> 
to the REMOTE REPO, and this enables collaboration between our developers.
 for data intergrity, for tracking who did what you have to be authenticated with the command; global configuration to do a push.
  global configuration  ==  git config -- global usre.email "your email address'
                            git config  --- global user.name "yourname"


A branch is a line of development 

In our env, we main 3branches of development
development branch : writing our code, once developers are satisfied they move it to the stage branch
stage branch : then moved to stage and once its done  
master branch: deployed to production environment , taken to the market

****whatsoever is in dev branch is deployed to dev environment, from stage branch to  staging/testing/QA  and from master to production/market

***** in development its good to have multiple dev lines so that if there is an issue with one line, it can be resolved from the other line
 










