
Devops process
developers write code >>>> testing>>>  build>>>> deployed >>>> monitored
WHAT IS EXPECTED FORM DEVELOPERS  ???   (When they have a project)
project main composition:
we have established that when developers are writing code 3things are involved
1)source
2) unit - test- cases
3) build scripts 
TO AUTOMATE TESTING, WE ARE GOIN TO ADVICE DEVELOPERS 
TO integrate (the tool)selenium in their environment such that these unit test cases can be easily written and run



START
*** ITS NOT A MAVEN SERVER YET UNTIL THE MAVEN SOFTWARE IS INSTALLED in it....
***** maven uses plugging/dependencies in the build process


WHAT IS YOUR TASK AS A DEVOPS ENGR
as a deveops engr, our expectation is to develop, test and build, qualify the applictaion, back them up , deploy and monitor appliction
ignore***Applications are the output from softwares development
therfore, we need a Build tool used to create deployable packages eg tomcat application
In our env, we use maven; maven is an open source java based build tool, We use maven to build and manage applications for java codes 
***ignore*** It was originally developed in java for java codes; The vendor of maven is apache
Maven is a software project management and comprehensive tool OR 
we can use maven to mg8 our project, build, reporting and documentation
*****it is based on the concept of a project object model (POM), maven can mg8 a projects build, repository and documentation.
its most powerful feature, is its ability to download the project dependency libraries automatically from maven central repo, maven remote repo or local repo

WHAT KIND OF PROJECT ARE YOU SUPPORTING IN YOUR ENVIRONMENT?
anS: we suppport java based projects or projects written in java programming language, however; we also support a few.NET, pythn and nodejs projects
we support apps written in java, nodejs by developers java, .NET, nodejs is a programming language

BUILD MEANS 
Build in SDLC Implies:  Software development life cycle
  creating deployable packages from raw codes. for this to happen, it goes through a compiling process
We need a compiler to compile java codes; java software is required for compiling java codes
therefore, java is a prerequisite for maven to run
Also git is required as well;
we are trying to create our maven server bc we are using maven for test and build 
so when developers push the code, we need maven ie our build server to clone the code 
therfore the git plugging has to be installed for us to be able to run git commands 
maven also have to be installed properly for mvn command to run
our  Maven home directory:  /opt/maven  bc; The MHD is where the maven software is extracted  ie where we downloaded & unzipped the maven file
the directory is represented by = M2 _HOME
MHD = /opt/maven [ M2_HOME ]:
****ignore***opt dir needs root access thats why for us to download we need sudo


MAVEN has 3 lifecycles: **** Each of this life cycle has its own goal
  Clean, 
  site/swagger and 
  default

DEfault: the command for which maven will use to run
mvn packge
1) validate
2) compile
3) Run unit testing
4) Create the packages (jar/war/ear)


BUILD APPS 
maven: creates packages (jar, war and/OR ear)
1)  jar: Standalone Applications ; contains java code ONLY
app.jar
2) war: web Applications  ;contains a Single module, ie java code + web content
    boa.war
3) ear: Enterprise Applications  :     Multiple Modules ie Java code + web content, Ear =  war(s) + jar(s)
    aa.ear 
eg
 Banking applications   ; Modules: for: login / for     accountCreation /  for    moneyTransfer 
    maven-web-application.war
    maven-enterprise-application.ear



******* dependencies are just what the project depends on eg the project needs to perform unit testing so all what is needed for the unit testing will be defined in the 
dependency 
Maven uses dependencies and plugins to test and create packages. 


we hv diff dependencies in the pom.xml file, depending on the project... developers does this for us
EXAMPLES OF MAVEN DEPENDENCIES:    Selenium ,JUNit, log4j
 *** if it starts with dependency, it ends with dependency...
eg for selenium <dependency>Selenium</dependency>
this is how the project file will be built up by developers
DEvelopers will identify the dependencies, plugging and properties version, all this will be defined in the pom.xml file

dependencies and/or are located in maven repositories
  https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java/4.6.0
    
          we can have diff repository
    in the maven server we have the maven local repo
when doing a build maven will search for pluggin and dependencies in maven local repo, if its not there, it will search in maven proxy, if its ot there, it searches in maven
central repo the dependencies could be log4j/Junit/selenium       

<repositories>             **** dependencies and pluggins are found in any of these repo, maven will search for the project dependencies in any of these repo & use the repo for the project
   mavenLocalRepo         (maven server)    ****** .m2/repository = default                             
   mavenRemoteRepo         (nexus server)
   mavenProxyRepo           (nexus server apache maven )
   mavenCentralRepo         the internet    ****** https://mvnrepository.com/repos/central
</repositories>
we go to the internet to get these dependency on maven central repository


principally by default, 
maven wil search for the the pluggins and dependencies in maven local repo 
1)maven local repository :.m2/repository = default, if its not here   , it will search in no.2                      ****** no.1 fastest and most secured ;
2) maven remote /proxy repository , if it is configures, if its not here, it will search in no.3
3) maven central repository (the internet)              ****** not a secured option , which takes more time in building 
     https://mvnrepository.com/repos/central


***** WHEN a package is being created (mvn package), maven will search for the pluggings in the local repo, if its not there it search in remote repo, if its not there it 
downloads the pluggins from maven central (internet) which takes more time for the buid process compared to if it had sourced the pluggins from the maven local repo

once the package is successfully created, our .m2/repository which is our maven local repo is created automatically and in the repo we can locate our dependencies

**** therfore, maven has downloaded our dependencies from maven central and has stored them in .m2/repository (our local repo) and then use the dependencies to do a build
or building for the first time
this is for situation where the mvn package is being run for the first time or situation where the maven local repo (.m2) doesnt exists.

subsequently, when mvn package is run, it doesnt need to download pluggins and dependencies from the central repo because we now have the .m2 and this will make the package
build process time lesser compared to when it had to download pluggins from the central 


** even when target is deleted, the .m2 (where we have our stored dependencies/pluggins ) remains because its owned by ec2-user and available in our server

****** our build time increases if our maven local is deleted in error



build.gradle   --- BuildScript for gradle
pom.xml        --- BuildScript for maven......... it is written in xml language
cd msa/  .. the the appl we cloned from git hub and renamed
head pom.xml : this project file will include stuffs like project dependencies and Artifacts (it will be creating some artifacts)
for this project to be executed a few things are needed,
scm is in github , everything has been defined


pom = project object model      
dependencies:  are also written in pom ie xml language and all dependencies are found in the dependency tag 
repositories    **** all repositories in the repository tag
plugins:    

Repositories:
pluggins: to run the testing ( maven  1b 56:30) .. maven 1b 39:30; when maven is trying to create packages it will use these pluggin
properties:
versions:


















*****ignore****  WHAT CAN MAKE MVN COMMAND NOT TO RUN
1:38:39 maven also have to be installed properly for mvn command to run
ie downloaded and extracted properly
you have to determine where your maven home directory is defined with the export command
eg we defined ours in the file ; ~/.bash_profile , ****meeee** **when we copied and pasted the environmental variables
PLEASE COPY AND PASTE IT, ABOVE OR BELOW IN THE FILE, Not inbetween lines of information.
   **** we could also use a different location for eg if we use the .bashrc file.  
   ****** then we hv to refresh by running source ~/.bashrc

