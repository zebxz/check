

 
***** linux 1............  1:43:00  the remote host is the ip address of our server

please i cant remember that for now, can we come back to that later

I Didnt print
Sand 
Gateway 
Eks



WE BACVKUP IN NEXUS B4 ANY DEPLOYMENT WHICH MAKES NEXUS A VERY IMP TOOL IN OUR SDLC

11.00 maven is doing a build using respository concept 


****meee*********
we use maven for build and tomcat for deployment having integrated it with nginx webserver for loadbalancing & routing traffic from endusers to the appservers 
we bring in sonar for security, then nexus aas a repository for backing up our artifacts and jenkins for .....
Most importantantly or in addition to that; because security is inheerent in our environment we utilize AWS for various levels of security like ........
furtheer more we use docker & kubernetes for .....
and finally Ansible and terrfaorm for ..........




LINUX , scripting, git , maven, tomat/ngnix tomcat, sonar, nexus, jenkins , aws, docker, k8, terraform, ansible, k8/helm 
In our env, we use LINUX OS for file,process,package,security mgt, GIT FOR VERSIONING, MAVEN FOR BUILD, jenkins automates the end to end process, 




  youa re a build and release enggr if you are able to deploy to tomact 
if you are able to carry out the automation where everything is configured to be able to deploy to tomcat. not even to deploy to tomcat, if you are able to upload artifacts to 
nexus, you are a build and release engr or CI, continous integration which falls under build and release engr which means you are a build and release engr



                                        WHAT IS JENKINS AUTOMATION  ??

      DEVOPS

     Its not (just) tools      eg maven is not equal to devops
 git is not equals to devops
 thefore, devops is the never ending process of continous improvement 
for eg it includes continous integration, continous development, continous testing, continous deployment and continous monitoring
thats what devops is all about 
one can ask why continous integration?
continous integration helps in the early detection of bugs, helps in determining code-break, enables continous deployment, enables automated testing, reduce risk of longer time consuming project, increases the quality of software via 
continous code quality 

when developers comit their code thers a build, unit testing is done, integration testing is done and thats our CI piple , once that is performed, (2nd part) we can now deploy the appl into production, so this entire process if it is
automated the first part is the CI proces and the 2nd is the CD process.
  (we are able to automate the task)


  
 (we are able to automate the task)
continous integration ensures continous deployment such that wherever our CI job succeeds we are going to trigger what is called cd jobs, cd is all baout continous delivery/
deployment 

   47:30                  
                jenkins      CI = continous integration
                 ci/cd        CD = continous delivery
                              CD = Ccontinous deployment

   jenkins      CI = continous integration
                 ci/cd        CD = continous delivery
                              CD = Ccontinous deployment


48.30  Ci pipeline


49:00                                   CD = Continous Delivery

       code            build        staging          MANUAL
     gitgithub     >>>>  test  >>>>> QA/UAT   >>>>   APPROVAL   >>>>>> PRODUCTION


                                   CD = Continous Deployment

        code            build        staging          
     gitgithub     >>>>  test  >>>>> QA/UAT   >>>>   AUTO  >>>>>> PRODUCTION
 

       CONTIONOUS DELIVERY
52:27 when ther is namual approval it falls under continous delivery

CONTIONUS DEPLOYMENT
 when it is automated

   Developers commit code using git& github once thers a commit we want to build, after build its testing then we deploy to a test environment, eithr to the staging env or 
QA or user acceptance testing from there we deploy to production bt before deployment we need to perform additional testing, the process of additional testing can be manual 
or automated, it its manual it could include integration testing and so on.
mauual testing implies thers a manual approval, maual gate somebpdy need to maullay approve and say the job done, its good, take it to the market and mauual approval is 
called continous delivery but when its automated its continous deployment and the process of deploying this to the staging environment is continous integration 


What is Jenkins automating ?
  
How do you use Jenkins for CI/CD automation ?
In Landmark, we manage federated JAVA based web & enterprise applications
(web.ear) for Fintech Clients/ DOD/ E-commerce.
We also manage a few python, NodeJs and .net web applications

FinTech = Financial Technology : 

Financial Technology can perform the following;
1. payment Gateways   
2. account creation 
3. credit management 
2. etc. 





********************  INTERVIEW****************
***** from sonarqube2*********8 
developers write and comit codes to github, we will use jenkins for automation, with jenkins you are sure to automate these processes. once this is committed to github, a
new commit/version of the application for eg, jenkins will pull, so we are goin to configure an automation for between jenkins and github that automation can be configured
using pull SCM or github webhook.
once jnekins clone the version, it will communicate with another tool called maven and the use of maven is to create packages before the packages are deployed jenkins is 
comunicating with sonarqube/ sonarcloud for code quality to check if the software written by developers is good enough for deployment .
if code quality analysis results to a pass, it means the application can be deployed to an app server which can be running on tomcat or JBOSS ie our client environment.

in our env,before we deploy we make sure it is backedup in artifacts 
we need to create a backup for our artifacts so that if in the process of deploying,In a situation where the MAVEN server goes down in the deployment, we just discontinue the process and pull from our artifactories 
and our backup system is called nexus or Jfrog and our artifacts will be bcakedup there, 
for our deployment;
we do not recommend to deploy to one appserver/tomcat bc if the app goes down it will be a problem, therefore in our deployment we use ansible or universal code UCD deploY, to deploy to multiple servers for high availability
for high availabilty we have multiple app servers eg app server 1, app server 2, app server3 with the help of another automation tool called ansible
ALso,there should be a monitoring system to monitor our system. 
therfore, jenkins will connect with a notifier so we are configuring a notification called newRelic . if there is a problem an alert will be triggerred that will send out 
email notification so members of the team will be notified that something is going wrong 
 this is the pipeline process
jenkins can help to automates the end to end process



START 


DEVOPS
  Its not (just) tools      eg maven is not equal to devops
 git is not equals to devops
 thefore, devops is the never ending process of continous improvement 
for eg it includes continous integration, continous development, continous testing, continous deployment and continous monitoring
thats what devops is all about 
one can ask why continous integration?
continous integration helps in the early detection of bugs, helps in determining code-break, enables continous deployment, enables automated testing, reduce risk of longer time consuming project, increases the quality of software via 
continous code quality 

  (we are able to automate the task OF our CI pipline
when developers comit their code thers a build, unit testing is done, integration testing is done  , once that is performed we can now deploy the appl into production, been continous deployment bc we automated the process.

 Ci pipeline


49:00                                   CD = Continous Delivery

       code            build        staging          MANUAL
     gitgithub     >>>>  test  >>>>> QA/UAT   >>>>   APPROVAL   >>>>>> PRODUCTION


                                   CD = Continous Deployment

        code            build        staging          
     gitgithub     >>>>  test  >>>>> QA/UAT   >>>>   AUTO  >>>>>> PRODUCTION
 

       CONTIONOUS DELIVERY
52:27 when ther is namual approval it falls under continous delivery

CONTIONUS DEPLOYMENT
 when it is automated

 CONTINOUS INTGRATION
the process of deploying this to the staging environment is continous integration

   Developers commit code using git& github once thers a commit we want to build, after build its testing then we deploy to a test environment, eithr to the staging env or 
QA or user acceptance testing from there we deploy to production bt before deployment we need to perform additional testing, the process of additional testing can be manual 
or automated, it its manual it could include integration testing and so on.
mauual testing implies thers a manual approval, maual gate somebpdy need to maullay approve and say the job done, its good, take it to the market and mauual approval is 
called continous delivery but when its automated its continous deployment and the process of deploying this to the staging environment is continous integration 

