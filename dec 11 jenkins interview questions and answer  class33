 
Applications are the output of softwares
Applictaions are developed by developers
******* SOFTWARE Engineers and developers develop applications




In our environment,we use git for versioning. Git is a Distributed Version Control systems. DVCS
In our env, we use Git which is a Distributed Version Control systems. we use Git for Versioning
Git Installations differs depending on your operating system:




*** start

  APPLICATIONS ARE THE OUTPUT FROM SOFTWARES
In our environment,we use git for versioning
We develops, tests, builds, deploy and monitors applications
our main focus is on development and when applications are developed multiple versions of the application can be developed
and so, we need to use a version control system that brings all the advantages of version control and that is a distributed version control system bc it keeps and tracks record( So that if the client is not happy with the latest version of the app, we ROLL BACK, from
"version2 to version1". ie the latest version to the previous version.
There are other platforms we can use for SCM like git lab, git hub, git bucket and aws code commit but In our environment,we use git for versioning


git comes with source code managers
in each loCAL environment(ie each developers env) gitbash is installed so it captures everything that is done with relative ease
so before we even submit the codes from our local env to scm, GIT  is already installed
***  skip *** meeeee.... gitbash can be installed directly on our windows computer or remotely on linux using mobaxterm    ... my understanding from git2; 14;35
 ***** skip*** MobaXterm is a versatile and powerful tool for interacting with Linux systems from a Windows machine, its a windows app designed for remote computing.

Project Onboarding: we onboard our projects by;
   1. create a github account for the organisation or organisations where applicable
 i create Create organisations & teams where applicable in a SCM ['GitHub']  and assign members[Developers, etc.] 
       url =  https://github.com/landmarkss
       then create repositories, either public or private  .... git2.. 13.54
then share login details with Developers/Team [ userName/password ]
NEXT with the Git already installed we create directories for dev, Initialise this directory to keep track of 
   any change or changes in the files/codes  ... by running git init, Git init creates a local repository and initializes the project directory
create a directory for Development  and  inorder to To move files from our local repository  to >>>> the Remote repository we created in github, we run "git remote add and the remote repo url"
   we run git add to move files from the WORKING AREA (workshop) to >>> staging >> & to move from the STAGING AREA (show room) to >>the local repo, we run git commit & a good commit msg is recommended as well & finally we run the git push to move from the local repo >> 
to the REMOTE REPO, and this enables collaboration between our developers. & to do a push you must be authenticated so to avoid the continous prompt requesting for a PW, we automate the process by configuring an ssh key, so we CONNECTING TO SCM/GITHUB USING SSH KEY.
 Also for for data intergrity,ie for tracking who did what you have to be authenticated with the command; global configuration to do first commit.
  global configuration  ==  git config -- global usre.email "your email address'
                            git config  --- global user.name "yourname"
and to bring the chnages form ourremote repo to the local repo, we run either; git fetch, git, pull or git clone where applicaple.
Git fetch         =  it brings changes in the code from the remote repo to the local repo 
Git pull          = (git pull aliasname branchname)  it brings changes in the code from the remote repo to the local repo and working area
Git clone         =   it brings the entire code to the working area
                       git clone https://github.com/landmarktechnology/paypal

****skip *** We use the .GITignore files to list files we dnt want to be tracked by git     *most of the time these files are file sthat are craeted by the software, the integrated dev environment, the IDE
RESOLVING CONFLICT (when there is a conflict, we hv to merge manually
however, for best practices, we recommend to avoid merge conflict 
When we have several commits but want to merge a specific commit, we run the "git cherry pick command".
developers create tags for produdct releases.

A branch is a line of development 
In our env, we maintain 3branches of development our branch rule is that we dnt work directly in the master branch, bc master branch deploys to production),**in development its good to have multiple dev lines so that if there is an issue with one line, it can be resolved from the other line

development branch : writing our code, once developers are satisfied they move it to the stage branch
stage branch : then moved to stage and once its done  
master branch: deployed to production environment , taken to the market, from the master we can create a feature branch or a bug -fixed branch if theres a bug in the code & when its fixed we merge the feature branch back with the master branch

****whatsoever is in dev branch is deployed to dev environment, from stage branch to  staging/testing/QA  and from master to production/market

SO as a recap;
 for our Branch security = 
   1) Use PR before committing to the master branch
2) Before Switching branches =  working tree should be clean 
    If neccesary backup incomplete tasks before switching  
      git stash command,  do not commit yet because your task is incomplete at the momemt
3. git rebase over git merge
4. review changes [git diff] before merging
5. avoid merge conflicts  
6 Commit once you finish your task. 
 7   Avoid merge Conflicts.
 8  Write Good Commit Messages before committing 
 9  use ssh url and PAT over https url, bc ssh is automated
 10  use rebase over git merge
   
******************************************************************************************************************
MY QUESTION, 
So bc i was confused as to why do we hv 3branches of development ( dev to dev, staging to QA & master to prod) but in his example, he merged dev with master without first creating the staging branch??

althoug in the example he did, in the dev branch, he worked on a file, & committed it, then he  git diff, & merged the changes to the master branch, then pushed to the remote repo, without first creating the staging branch frm the dev, having watched the whole video,
i then realised that:
in contrast to what was done above, i think based on what he taught in the remaining part of the video,( it stash command,  do not commit yet because your task is incomplete at the momemt), so once the task is completed in the dev branch,he was actually 
suppose to create the staging branch from the dev branch and whatsoever is in the dev branch will also be found in the stage branch. *** & 1:11:00
then from the dev branch, we push to the dev env in the remote repo, then from the staging branch pushed to QA/Testing in the remote repo, and when the testing?QA is finally completed, we git diff, then merge with master to be deployed to production.

**********************************************************************************************





