
GIT FOR VERSIONING, MAVEN FOR BUILD

**** windows is an operating system as linux and they all have commnd line 
in windows we can install Git (our DVCs) by downloading it while for linux; we login to mobaxterm and use package manager while utilizing sudo "sudo yum install git" to install git
 MobaXterm is a versatile and powerful tool for interacting with Linux systems from a Windows machine
git2.... 11:40 on git in mobaxterm we first cd documents/ then mkdir but on git in windows we mkdir and cd into it


* the master branch is the most most critical branch bc production goes to the market from the master branch therfore, it is better for development to start in development
branch so if there are any changes in the dev branch that needs to be applied in the master branch then more work has to be done. so before we deploy from dev to master
we need to ensure that its actually what is wanted .
make sure the work is reviewed before its merged in the master branch



The steps as a developer for our fintech client
   WORKING AREA (workshop) git add to move to staging >>> STAGING AREA (show room) git commit  to move to local repo >>>> LOCAL REPOSITORY AND THE (git push) >>>>> REMOTE REPO 
   Dvelopment takes place in the working area 

( i confirmed that the name of the directory you initialize must not be the same as the alias name you added as the name of the remote repo url in the local env/repo)
 the alias name make s it easy so u dnt have to type the enter repo url each time you wnat to push or pull


1)Project Onboarding: we onboard projects by;
   1. create a github account for your organisation or self & Create organisations where applicable
. Create organisations where applicable in a SCM ['GitHub']  
       url =  https://github.com/landmarkss
   3. Create teams in SCM/github and assign members[Developers, etc.]                   
     then create repositories, either public or private  .... git2.. 13.54
4. share login details with Developers/Team [ userName/password ]

2  Git installation ... DVCS
In our env, we use Git which is a Distributed Version Control systems. we use Git for Versioning
Git Installations differs depending on your operating system:

nxt step
A) create a directory for Development   
***   mkdir paypal && cd paypal  
paypal is out project dir
B) Initialise this directory to keep track of 
   any change or changes in the files/codes  ... by running git init
*** Git init creates a local repository and initializes the project directory
so we are now in the local repository

***** Git status;  shows the state of the working directory and staging area, eg to know if the project directory has been initialized, to check if our working tree is clean or not
It lists: Tracked files (modified, staged, or deleted).

        TO MOVE THE FILE (a new file) FROM THE WORKING AREA TO THE STAGING AREA 
C) For git to track our work (In the working area we run git add)
 To move our files form our working area ( file appears in RED)to the staging area (File appears in GREEN)
**** git add.filename   TO ENSURE THAT OUR WORK IS TRACKED BY GIT, ((in orderwords, task in our working environment is not tracked by git)
TO create a file : vi OR touch filename
so we touch a file in our working area and move it
        GIT4:  ( commiting to an existing modified file)
git commit -a -m "commit message"        ****'a' stands for add
To add and commit at once (the new changes in an already existing files) 
git add.&& git commit -m "commit message"


D)  TO COMMIT the changes
In our staging area  >>>>>>>>>>>> local repository
 ***    git commit -m  "   "
( for data intergrity) for trcaking who did what
SO you have to be authenticated with the command;
  global configuration  ==  git config -- global usre.email "your email address'
                            git config  --- global user.name "yourname"
then we run git log to check , after which we run git commit -m  and git log again to check

E) we have To add a repository for git push
  To move files from local repository   >>>> Remote repository
   ***    git push ( push changes from local environment to remote repository)
***** git remote -v    = to tell us if we have any repository detail in our local environment 
Tells us how many remote repository we are managing 
to add a repository  URL in our local environment 
 *****     git remote add paypal https://github.com/zebxz/paypal     ( ie this repository url is been replaced by paypal "the alias name i created in  in my local enveiroment )
i had to use: git remote add pay https://github.com/bibiblee/pay    (Because zebxz/paypal refushed to accept the push 
     i just realised that it sthe "pay" before https thats the aiiasname not the last pay
************* at this point when we check in github, we cant see anything like the new version of the app in github/remote repository
we want our developers to collab with each other so we have to push

GIT PUSH      (alias Name )master
****** git push pay master 
will request for username and pssword but we hv to go to github and generate token because git doesnt accept password again  **** this was the case when we were still in class but when in 2025 the authenticatin wa sychronized by the system 
ie i was directed straight to github to be authenticated
***********  Now when we check in github, we can see the new version of the app in github/remote repository
F)7)   GIT PULL : to see the work others have added to the project i have to pull to my env

After the task i pushed has been executed/worked on by other developers
 *****=== GIT PULL paypal master 


GiT 2
    MANAGING APPLICATIONS
             APPLICATIONS ARE THE OUTPUT FROM SOFTWARES
We develops, tests, builds, deploy and monitors applications
our main focus is on development and when applications are developed multiple versions of the application can be developed
we need to use a version control system that brings all the advantages of version control and that is a distributed version control system bc it keeps and tracks record
There are other platforms we can use for SCM like git lab, git hub, git bucket and aws code commit


A branch is a line of development
                  

                        (GIT2) GIT BRANCH
              **** 1:53:04  ( our branch rule is that we dnt work directly in the master branch, bc master branch deploys to production)

   one branch = 1line of production
A branch is a line of development 
 A file must have been moved to the staging area before it can be pushed
1:11:00 once we are done with the dev branch, we can create a new branch from dev called stage branch and whatsoever is in the dev branch will also be found in the dev and stage branch.

development branch : writing our code, once developers are satisfied they move it to the stage branch
stage branch : then moved to stage and once its done  
master branch: deployed to production environment , taken to the market

****whatsoever is in dev branch is deployed to dev environment, from stage branch to  staging/testing/QA  and from master to production/market

***** in development its good to have multiple dev lines so that if there is an issue with one line, it can be resolved from the other line
 
******* The master branch is the upstream Branch for the dev Branch  
  The dev branch is the downstream of the master branch   


Ticket01:  *** done
  Create a dev branch from the master branch  
  Switch to the dev branch and create the app.java file    **** so vi java application development
  Commit the changes and Switch to the master branch  
  Review the changes in dev and merge with the master branch  

----  i think this was me summarizing the steps to resolve the ticket

 ***** first ensure yu are in the project directory (still using paypal dir we created earlier)
1) git branch               = to confirm we have created dev
2)git branch branch name    = eg, git branch dev; we run this command to create dev branch
3) git switch dev             =  change from master to dev and vice versa
4) we vi into app.java file  ( ie create app.java file)
5)we git add.           = to file to the staging area
6) we commit "m"
7) git switch :                 = move from dev to master
8)git diff dev (commit ID )    = we run this in master to review the changes that happened in dev             
                                  git diff (b0f7fcf) ie ID of the commit done in dev branch                by d push command, i bliv  we can push to either branches
9) git merge dev               = if we are satisfied with the changes (done in dev in local repo)
   GIT4: 
10) we ls  / get log     ( we see head >master,dev)  = to ensure all changes  from (git merge dev ) were applied in the master branch (ie we hv all the files/commit in the master )
11) git push aliasName --all     = (we want to commit all the changes) git push pay --all ( this is done in master in our local repo )       
                                     it will creates dev branch in remote repo and pushes all the chnages from local repo to dev/master in remote repo
git push aliasName branchName  


1:26:40 Regarding this ticket**********************  bc am creating a dev branch from master  The master branch is the upstream Branch for the dev Branch  
  The dev branch is the downstream of the master branch bc the dev branch was created from the master.


1:31:53
Git fetch         =  it brings changes in the code from the remote repo to the local repo 
Git pull          = (git pull aliasname branchname)  it brings changes in the code from the remote repo to the local repo and working area
Git clone         =   it brings the entire code to the working area
                       git clone https://github.com/landmarktechnology/paypal

                                               

*********************************

github
                                              Remote repo
                                                paypal
                                                master
                                               bugfix         >>>>> whenever ther is an error/bug in the code, we create a bug fix branch from the master
if the org say they want a new feature >>>>     feature
we create a feature branch  from                 stage
 the master branch                                 dev


12)
1:49:00 ********To expand more on Ticket001 above:
                        PULL REQUEST : PR ( in the remote repo)
1:33:00  in the remote repo in github, in the dev branch, we added a new line to the app.java file , after which in both branches we see the "compare & pull request" notification, i can add a branch protection rule, eg 
PR is used to review changes in one branch b4 merging in another branch                                                                                 the senior software engr must review before any merge is completed
this is recommended for any merge in the master/release branch

eg
compare and pull request:  when a change is done in dev branch , to create a a review, we can see this option in the master branch informing us of a change , so we use the 
option
                       

13)************* 1:52:27   TO SEE THE DIFF BTW GIT PULL & GIT FETCH, WE will use the illustration below;
   git fetch --> It brings changes in the code to the LocalRepo   *** 2:10:00 ( this requires a review before merging) , MOSTLY recommended
  git pull --> It brings changes in the code to the localRepo and & Working area    ( this merges without a review)

    
     TO SYNCHRONIZE/BRING THE CHANGES FROM THE REMOTE REPO TO THE LOCAL REPO
         so for us to merge the changes in the remote repo to the local repo 
for us to update the changes we can run git fetch or git pull
git fetch pay = git fetch
but when we cat the app.java file we see its not yet updated bc git fetch doesnt merge the changes (bc git fetch brings the changes only to the local repo) so we run git diff
git diff pay/master = git diff to review the changes ( pay is our repository alias name) 
git merge pay/master = to merge the changes

14)
1:53:48 ******* in the remote repo in github, he also created a stage branch from the master branch, then updated the app.java file 
         got the pull req in the master baranch, accepted reQ 
     finally in the local repo, he run the git pull (git pull pay master) command to bring the changes from the remote repo to both the local rep & working env.


git push alias name --all   ****2:11:40        (so i created a new repo with aliasname "ok")
this will create the branches in other repositories that didnt have such branch **** but first, you have to specifically push to the master branch in that/those repo
eg in the local repo when the stage /dev branch is created in the master branch and you run git push alias name --all , (alias name ie the new repo) all the repositories will equally have a dev and stage branch and all
other effected changes/commit

 ********* END******


git pull pp (ie alias name)
                 OR
git fetch (aliasName) ie Pay   
Git diff pay/master   = to see the changes we are bringing over  (from the "master&dev branch" in the remote repo)
then git merge pay/master    = form local repo to workin area  



 the master branch is the most most critical branch bc production goes to the market from the master branch therfore, it is better for development to start in development
branch so if there are any changes in the dev branch that needs to be applied in the master branch then more work has to be done. so before we deploy from dev to master
we need to ensure that its actually what is wanted .
make sure the work is reviewed before its merged in the master branch

codes form the dev branch is deployed to the development branch env, code from the staging branch to testing/QA/UAT env and from the master they are deployed to production
from the master we can create a feature branch or a bug -fixed branch 
           


***********
git push aliasName branchName  
eg;  git push pp master                   ***** Pushing to the master banch

git branch           = list the branchless 
git checkout/switch branch name =  git switch dev
git push aliasName --all  = push changes to all branches  ie to the master and dev branch in github
git push pp --all 
git branch - v             =  display all branches in your repo and also tell you what branch your currently working i
git remote remove alias Name    =  remove repo from the local environment 
git remote remove repo URL 



****************                        GIT4


 resolving conflict
we resolve merge conflict by merging manually to avoid merge conflict for best practices



  
       
