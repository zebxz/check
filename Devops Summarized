**** windows is an operating system as linux and they all have commnd line 
in windows we can install Git (our DVCs) by downloading it while for linux; we login to mobaxterm and use package manager while utilizing sudo "sudo yum install git" to install git
 MobaXterm is a versatile and powerful tool for interacting with Linux systems from a Windows machine
git2.... 11:40 on git inmobaxterm we first cd documents/ then mkdir but on git in windows we mkdir and cd into it


The steps as a developer for our fintech client
   WORKING AREA (workshop) git add >>> STAGING AREA (show room) git commit >>>> LOCAL REPOSITORY AND THE (git push) >>>>> REMOTE REPO 
   Dvelopment takes place in the working area 

( i confirmed that the name of the directory you initialize must not be the same as the alias name you added as the name of the remote repo url in the local env/repo)
 the alias name make s it easy so u dnt have to type the enter repo url each time you wnat to push or pull


1)Project Onboarding: we onboard projects by;
   1. create a github account for your organisation or self & Create organisations where applicable
. Create organisations where applicable in a SCM ['GitHub']  
       url =  https://github.com/landmarkss
   3. Create teams in SCM/github and assign members[Developers, etc.]                   
     then create repositories, either public or private  .... git2.. 13.54
4. share login details with Developers/Team [ userName/password ]

2  Git installation ... DVCS
In our env, we use Git which is a Distributed Version Control systems. we use Git for Versioning
Git Installations differs depending on your operating system:

nxt step
A) create a directory for Development   
   mkdir paypal && cd paypal  
paypal is out project dir
B) Initialise this directory to keep track of 
   any change or changes in the files/codes  ... by running git init
Git init creates a local repository and initializes the project directory
so we are now in the local repository

***** Git status;  shows the state of the working directory and staging area, eg to know if the project directory has been initialized, to check if our working tree is clean or not
It lists: Tracked files (modified, staged, or deleted).


C) For git to track our work (In the working area we run git add)
 To move our files form our working area ( file appears in RED)to the staging area (File appears in GREEN)
git add.filename   TO ENSURE THAT OUR WORK IS TRACKED BY GIT, ((in orderwords, task in our working environment is not tracked by git)
TO create a file : vi OR touch filename
so we touch a file in our working area and move it

D)  TO COMMIT the changes
In our staging area  >>>>>>>>>>>> local repository
     git commit -m  "   "
( for data intergrity) for trcaking who did what
SO you have to be authenticated with the command;
  global configuration  ==  git config -- global usre.email "your email address'
                            git config  --- global user.name "yourname"
then we run git log to check , after which we run git commit -m  and git log again to check
E) we have To add a repository for git push
  To move files from local repository   >>>> Remote repository
       git push ( push changes from local environment to remote repository)
git remote -v    = to tell us if we have any repository detail in our local environment 
Tells us how many remote repository we are managing 
to add a repository  URL in our local environment 
      git remote add paypal https://github.com/zebxz/paypal     ( ie this repository url is been replaced by paypal "the alias name i created in  in my local enveiroment )
i had to use: git remote add pay https://github.com/bibiblee/pay    (Because zebxz/paypal refushed to accept the push 
************* at this point when we check in github, we cant see anything like the new version of the app in github/remote repository
we want our developers to collab with each other so we have to push

GIT PUSH      (alias Name )master
git push pay master 
will request for username and pssword but we hv to go to github and generate token because git doesnt accept password again  **** this was the case when we were still in class but when in 2025 the authenticatin wa sychronized by the system 
ie i was directed straight to github to be authenticated
***********  Now when we check in github, we can see the new version of the app in github/remote repository
F)7)   GIT PULL : to see the work others have added to the project i have to pull to my env

After the task i pushed has been executed/worked on by other developers
 === GIT PULL paypal master 

GiT 2
    MANAGING APPLICATIONS
             APPLICATIONS ARE THE OUTPUT FROM SOFTWARES
We develops, tests, builds, deploy and monitors applications
our main focus is on development and when applications are developed multiple versions of the application can be developed
we need to use a version control system that brings all the advantages of version control and that is a distributed version control system bc it keeps and tracks record
There are other platforms we can use for SCM like git lab, git hub, git bucket and aws code commit


A branch is a line of development
                  

                         GIT BRANCH
   one branch = 1line of production
A branch is a line of development 
 A file must have been moved to the staging area before it can be pushed
1:11:00 once we are done with the dev branch, we can create a new branch from dev called stage branch and whatsoever is in the dev branch will also be found in the dev and stage branch.
development branch : writing our code, once developers are satisfied they move it to the stage branch
stage branch : then moved to stage and once its done
master branch: deployed to production environment , taken to the market

****whatsoever is in dev branch is deployed to dev environment, from stage branch to  staging/testing/QA  and from master to production/market

***** in development its good to have multiple dev lines so that if there is an issue with one line, it can be resolved from the other line
 
******* The master branch is the upstream Branch for the dev Branch  
  The dev branch is the downstream of the master branch   

  i think this was me summarizing the steps

1) git branch               = to confirm we have created dev
2)git branch branch name    = eg, git branch dev; we run this command to create dev branch
3) git switch dev             =  change from master to dev and vice versa
4) we vi into app.java file
5)we git add.
6) we commit "m"
7) git switch :                 = move from dev to master
8)git diff dev (commit ID )    = we run this in master to review the changes that happened in dev             
                                  git diff (b0f7fcf) ie ID of the commit done in dev branch                by d push command, i bliv  we can push to either branches
9) git merge dev               = if we are satisfied with the changes (done in master in local repo)     ****** i think this is an error cos i thought the push was to master
10) we ls  / get log       = to ensure all changes  from (git merge dev ) were applied in the master branch (ie we hv all the files/commit in the master )
11) git push aliasName --all     = git push pp --all ( this is done in master in our local repo )        ******* in what case scenario can dis happen, to push to all
                                     creates dev branch in remote repo and pushes the chnages from local repo to dev/master in remote repo

git push aliasName branchName  


**********************   The master branch is the upstreamBranch for the dev Branch  
  The dev branch is the downstream of the master branch   



Git fetch         =  it brings changes in the code from the remote repo to the local repo 
Git pull          =   it brings changes in the code from the remote repo to the local repo and working area
Git clone         =   it brings the entire code to the working area


                                               

*********************************

github
                                              Remote repo
                                                paypal
                                                master
                                               bugfix         >>>>> whenever ther is an error/bug in the code, we create a bug fix branch from the master
if the org say they want a new feature >>>>     feature
we create a feature branch  from                 stage
 the master branch                                 dev




                        PULL REQUEST : PR ( in the remote repo)
PR is used to review changes in one branch b4 merging in another branch 
this is recommended for any merge in the master/release branch

eg
compare and pull request:  when a change is done in dev branch , to create a a review, we can see this option in the master branch informing us of a change , so we use the 
option



***********
git push aliasName branchName  
eg;  git push pp master                   ***** Pushing to the master banch

git branch           = list the branchless 
git checkout/switch branch name =  git switch dev
git push aliasName --all  = push changes to all branches  ie to the master and dev branch in github
git push pp --all 
git branch - v             =  display all branches in your repo and also tell you what branch your currently working i
git remote remove alias Name    =  remove repo from the local environment 
git remote remove repo URL 




****************

  
          TO BRING THE CHANGES FROM THE REMOTE REPO TO THE LOCAL REPO
         i bliv ie pull reQ, done in the remote repo

