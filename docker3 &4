DOCKER FLOW , DOCKER IMAGES RELATED COMMAND/KEY CONCEPTS, CREATE/DEPLOY A CI/CD JOB, STEPS TO DEPLOY CI/CD JOB,  steps TO MK image distributable/TAGGING,
 CREATE DOCKER FILE WITHOUT CLONING, PULLING httpd IMAGE, RUN CONTAINER WITHOUT USING THE httpd image we pulled, 
CREATE A DOCKER FILE USING httpd image we pulled, AUTHENTICATION/PULLING FRM REGISTRY, Nexus private docker registry, TO PUSH IMAGES TO AWS AMAZON ECR, 
DOCKER CONTAINER COMMANDS,we can create containers wit these 3 approaches, DEPLOY PYTHON IMAGE


***mee*** for java application we hv to install maven bc we wil run mvn package to build but for python apply we dnt need maven bc its not java
36:59 we didnt do any mvn package for this python bc python web appl is nt java, we only build using maven for java appli ,, python is diff, so with java appl
like the examples above, we had to install maven & run mvn package

##########steps TO MK image distributable
clone the repo , 2)build the image, 1)mvn package so that the build is possible, 5)Docker tag , 5)then push

**** docker run --name app -d -p 8000:8080 --name webapp teslaimage:1  ,, frm dis same image we can deploy billon of containers $ it can b deployed by diff 
persons if you mk the image become distributable ***** by creating a tag & push the image to the repo eg in dockerhub

******* docker run --name containerName -d -p hostPort:containerPort image:tag
  -d = detachable mode  
  -p = port Forwarding
**docker5**in the ticket above we v a keyword EXPOSE 9981 , its our container port  for port forwarding,so frm my docker engine, its forwarding the port to this
container, the port is forwarded internally b172.170.2:9981


  ****** 1:25:00 to deploy a 2nd conatiner using the d same image,  2 containers cannot v the same host port number& name  , bt can v the same conatainer number
host port must change ie we hv to choose a port nmuber for each contaoiner but container port is nt changing
eg
container1 host port 80:80  ...  docker run --name app -d -p 8080:8080 --name webapp teslaimage:1  
container2 host port 80  ,,, host port 80 and container port: 8080 and it doesnt change
 to deploy a 3rd conatiner docker run --name app -d -p 8000:8080 --name webapp teslaimage:1 ... here d host port was changed to 8000


**** pulled an image from docker hub n used it to create my own image 
 the image we pulled is http, its the base image bc it contains my dependencies


*****************************************************
THIS IS A DOCKER FLOW
we have a docker file from the file we build an image from the file n the process of building the image is called containerization IE PACKAGING THE APPL with all its DEPENCIEDS IN AN IMAGE N FRM DER WE AR
ABle to run containers/ deploy applications
6:00 when an image is built, we push it to an image registry , either nexus, ecr,dockerhub, jfrog,, then we can pull the images in diff envri n do a deployment

1:42 we v a build server,with the server we executing mvn package, creating package , we ar also building images  using docker file, docker build n once dat is done we
can distribute these images , we can use dockerhub or nexus ,or amazon ecr or jfrog to distribute the images .. these images are push into the image registry and frm
the registery a lot can be made to happen ,, we can pull the images and deploy appls in any enev, therfore ,we can pull the images for deployment, docker pull to pull
d image n docker run to deploy the application, in the deployment server we v the pull n run and dats where deployment is taking place and this can take place in
multiple env like dev, stage and prod,, the same image ,, we can deploy in any number of env... once they ar built these images are shared/distributed
 


40 :00 Ticket012: DOCKER 1 VIDEO
  Create and share a docker image   

hw does the docker architec works
docker architechture:
  - docker client - is the  docker cli = The command line utility for docker   
      the  docker client/CLI has stuffs like : 
   docker build
      docker tag  ,, we can tag an image
      docker images  .,,, list images
      docker run    
  - docker Registry - Where docker images are stored and distributed    
  - docker engine==- - Use by the docker service to execute tasks  e.g when u run docker build, u ar inform the daocker engine, tk dis instruction n build a docker image
the emgnine tks the instructions n assihn a tag to an image 




                    KEY CONCEPTS
Docker images :
Docker containers  
Dockerfile 
Docker Networks 
Docker volumes  
Docker compose  
Docker swarm 


7:00 DOCKER IMAGES RELATED COMMANDS

Docker images commands:
  docker build  
  docker tag 
  docker images
  docker pull  
  docker push  


8.48  Docker containers related commands:
  docker run  cretea the cointainers ie it will deploy the appl
  docker ps   list the container that are running
  docker rm   delete a container



9.19********We are starting today with docker images related commands.

Ticket013:
  1. prepare a jenkins ci job for maven-web-application 
lets assume you are goin to deploy an application using docker.
we can use a jenkins file to achieve this jenkins job


11.04 We can write a jenkins file for this ci job
lets assume we want to write a jenkins pipeline for for a maven web abb

Ticket013:
  1. prepare a jenkins ci job for maven-web-application 
  //Jenkisfile for maven-web-app ci job
node{
    stage('1.CloneCode'){}
    stage('2.mvnBuild'){}
    stage('3.CodeQuality'){}
    stage('4.UploadArtifacts'){}
}

              ********  then this wil b the upstream job
TICKET
  2. prepare a jenkins cd job for maven-web-application  

//Jenkisfile for maven-web-app cd job
node{
    stage('5.createDockerImage'){
        sh "docker build -t "
    }
    stage('6.PushImageDockerhub'){}
    stage('7.Deploy2UAT'){}
    stage('8.approval'){}
    stage('8.Deploy2Prod'){}
}

.17.05.********while this wil b the downstream job....   and we wll be looking at all of this ie both the upstream & the downstream 



***** or we could just have a single job that does the following
Ticket014:
Prepare a jenkins ci/cd job for maven-web-application 

1. cloning the latest version of the application - SCM/github 
2. building using maven   
3. running code quality analysis with sonarQube  
4. uploading artifacts in nexus  
5. pre-deployment
      1. containerizing the application by creating 
         docker images using   Dockerfile
      2. distributing the images in docker image Registry   
        like  dockerhub/Nexus/JFrog   
6. Deployment TO UAT environment using kubernetes    
7. APPROVAL[manual: continuos delivery  or auto continous deployment] 
8. Deployment to Production environment using kubernetes
9. email/slack notification  if ders a problem , to inform us smt is going wrong




21.20    in mobaxterm, he ran "docker image" and we saw all the below commands

22.36  we can run "docker build" or "docker image build, but docker build is shorter
 also thers docker image history, docker image imort 
Commands:
  build       Build an image from a Dockerfile
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Display detailed information on one or more images
  load        Load an image from a tar archive or STDIN
  ls          List images
  prune       Remove unused images
  pull        Download an image from a registry
  push        Upload an image to a registry
  rm          Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
DELETE ALL IMAGES = ubuntu@docker:~$ docker rmi -f $(docker images -q)
 FORCE DELETE AN IMAGE = docker rmi -f mylandmarktech/hello:latest = FORCE DELETE AN IMAGE  
DELETE SELECTED IMAGES USING THEIR ID :  docker rmi -f 61395b4c586d e88a065848be


24.44   docker ps we see containers that are running like myapp,stop & app
to stop them; docker stop myapp app hello


Docker images commands:
  docker build    = create a docker image from a Dockerfile  
  docker tag      = assigns repository name to images 
  docker images   = list images
  docker image ls = list images
  docker images -q = list image ids ONLY 


ubuntu@docker:~$ docker images
REPOSITORY             TAG           IMAGE ID       CREATED        SIZE
teslaimage             1             13e31c5e87ff   5 days ago     498MB
nginx                  latest        61395b4c586d   3 weeks ago    187MB
mylandmarktech/tesla   1             6da8acdc7fc9   2 months ago   498MB
mylandmarktech/hello   latest        31e17b0746e4   7 years ago    17.8MB
tomcat                 8.0.20-jre8   e88a065848be   8 years ago    493MB




DElETING IMAGES
  docker rmi imageName/imageID /imagetag      = DELETE AN IMAGE   
   FORCE DELETE AN IMAGE = docker rmi -f mylandmarktech/hello:latest = FORCE DELETE AN IMAGE  
                            docker rmi -f mylandmarktech/hello:latest 
                            docker rmi -f 

  to list image ids only = ubuntu@docker:~$ docker images -q  
61395b4c586d e88a065848be

33:26  DELETE ALL IMAGES = ubuntu@docker:~$ docker rmi -f $(docker images -q)
                 
   deletes selected images = docker rmi -f  13e31c5e87ff 6da8acdc7fc9 e88a065848be




STEPS TO DEPLOY CI/CD JOB

32.26  BC  we deleted all our images in he docker build server
so cd into web , where we hv our application frm previous class
1) we git cloned the repository maven-web-application that contains the docker file n other files in previous class frm github and
2)we rename it to web 
cd web/  .. this is the repository containtaing imp files , can alson see target dir if packages hv been created before, bt we stil hv to do mvn package to create the image 
if we get an error when we run the create image command ie  docker build -t teslaimage:1 
3)mk dir tesla : mkdir tesla
we want to copy the src, tesla, docker file into tesla dir
to copy src dir to tesla dir  : cp -r src/ tesla/
copy pom.xml to tesla dir : cp pom.xml tesla/
copy dockerfile: cp DOckwerfile tesla/
the 3 documents copied ar sufficient for my project
ls tesla, we see d 3 files wwe copied 
cd tesla 
cat docke rfilr : we can see its a 2line file
we can build an image  with the help of the docker file

ubuntu@docker:~/web/tesla$ cat Dockerfile
FROM tomcat:8.0.20-jre8
COPY target/*.war /usr/local/tomcat/webapps/tesla.war


**************************************************************************
##########steps TO MK image distributable
1)clone the repo , 2)rename the app  3) mk a dir for the project 4) copy the files int the project dir
 5)mvn package so that the build is possible, 6)build the image, /docker run to deploy 7)Docker tag , 8)then push

     ******* the steps should be to create the project dir first b4 cloning that way you dont hv to copy ie no need for step 4)

######but if am not cloning the file frm the repo,, then follow step number:
3) create the docker file 4) build the image/ docker run to deploy 5) docker tag and push
****************************************************************************************


44.00 ... we got a failed
COPY Failed; no source file were specified
so he installed maven & ran mvn package & directed it to log ( mvn package > log)
3) mvn package
4) BUILD THE IMAGE, (we CALLED it teslaimage) from d DOCKER file we got when we cloned the maven-web-appl: docker build -t teslaimage:1 ., we run this n d dot shows that our
docker file is in the pwd
       where "." = pwd
       build is from the default Dockerfile name = Dockerfile 
   we can also do this == docker build -t teslaimage:1 /home/ubuntu/web
##### we can also do this bt its longer == docker build -t teslaimage:1 -f Dockerfile /home/ubuntu/web/tesla/
  ######### if the docker file has a diff name must pass == docker build -t teslaimage:1 -f Dockerfile_TESLA /home/ubuntu/web 
****** successfully built twsla image

47:43
when we uploadd war files into nexus we can download, when we upload artifacts into nexus if we ar using docker, while containerizing i can pull the articfacts directly frm 
nexus for docker to build an image, we can get d image frm is d maven build server n if its done locally in jenkins we can aslo get it frm jenkins or directly frm nexus 
 the images are either found in the build server or the artifactory ,wich is eithr maven, jenkins or the artcifaory wich is nexus or jfrog


         WE use ADD if u want to download some softwares or add some files, files ar found in http location
*********  #ADD https/3.25.41.98:8081/mylandmarktech/landmark.war /opt/jboss/wildfly/standalone/deployments/landmark.war
we v a key word called ADD, we v a war file in nexus server https, the ip address/port num , mylandmarktech/landmark.war, 
this is d file i wnat to copy bt i wnt to downlod the war file frm my nexus server
this is goin to b found in the target dir, also we ar copying evrytin that ends wit *war to  ..  /opt/jboss/wildfly/standalone/deployments/
# in jboss deployment takes place in the deployments dir 
our base image is JBOSS

########## ADD and COPY are kEYWORDS IN the dockerfile
*************the keyword here is ***** FROM


                             CREATE DOCKER FILE WITHOUT CLONING

*******3) WE WANT TO create another Docker file
vi JBOSS .....             when we create an image ONLY line one &line 2 wil be executed ie from and ADD,
FROM jboss/wildfly         ***ie jboss is the baase image/os we are using for the image we want to create
ADD target/*war /opt/jboss/wildfly/standalone/deployments/
#this is goin to b found in the target dir, also we ar copying evrytin that ends wit *war to  ..  /opt/jboss/wildfly/standalone/deployments/
# in jboss deployment takes place in the deployments dir
# in tomcat deployment take place in the webapps dir
#ADD https/3.25.41.98:8081/mylandmarktech/landmark.war /opt/jboss/wildfly/standalone/deployments/landmark.war



##### below is our first file, we used it to create the first image above and also in docker1 video, 
COPY or ADD is used to copy the war file from the docker build file to the image
but ADD can also be used to copy files from other remote locations

**the docker file contains 2key words ******FROM and COPY
    FROM tomcat:8.0.20-jre8
    COPY target/*.war /usr/local/tomcat/webapps/tesla.war   

      ###### FOR NO. 4, WE DIDNT nid to run mvn package again   ***i bliv bc we already have maven installed so when he run "maven build" it was successful with no fail
*******4) we WNT TO BUILD THE IMAGE  for the 2nd Docker file we created in no.3 above .. .... (tHIS IS A 2ND IMAGE WE AR creating)
53:30 *******when we run , we can see it pulling frm JBOSS ,,,, its copying the war file into the deployment dir
 docker build -t teslaimage:jb2 -f Dockerfile_JBOSS .  ( HERE the name of the file is Dockerfile_JBOSS, so we pass -f and the dot. is bc the file is in the pwd)

*******below  are images we v created and we can use any one to deploy our application
ubuntu@docker:~/web/tesla$ docker images
REPOSITORY      TAG           IMAGE ID       CREATED          SIZE
teslaimage      jb2           9b6cf25392ee   17 seconds ago   742MB
teslaimage      1             a47c73fd7b22   9 minutes ago    498MB
jboss/wildfly   latest        856694040847   2 years ago      736MB
tomcat          8.0.20-jre8   e88a065848be   8 years ago      493MB

##### the default expectation is *****the more ur creating images the tag number wil be increasing


####### 5) before PUSHING 
*****56:20 i wnt to tag the image bc i nid to push this image to my docker registry wich is found in docker hub
so i long into docker hub n copy the push commnad : docker push mylandmarktech/maven-web-app:tagname
now i wnt to push the image to maven- web-app

i nid to assign a tag name ,,, thi sis the name of my account * mylandmarktech and the name of my repository ** maven-web-app
push commnad : docker push mylandmarktech/maven-web-app:tagname

########i cant push the image * telasimage:jb2 , without the repository tag , bc this repository , tesla image is only found on my local build server
so i wnt to mk my image distributable so i must first create a tag 
push commnad : docker push mylandmarktech/maven-web-app:tagname
the tag name made is jb1

                                 

                                     TAGGING

#### 5)TAGGING/MAKING THE IMAGE DISTRIBUTABLE 
1:00:18 ******** docker tag teslaimage:jb2 mylandmarktech/maven-web-app:jb1 
after we run the above command 
we can run docker images and we can see the tag  * mylandmarktech/maven-web-app jb1 ...  among the images
so now i v the my docker hub image repository and the tag is jb1 
now i can push the image 
**b4 i push i must first run docker login command .. docker login -u mylandmarktech,,then it asked for paswd to be auteticate .. i can pull bt to push i must be autenticated
******* authentiacting command ...  docker login -u username/EMAIL -p password   
then push 
docker push mylandmarktech/maven-web-app:jb1 


1:02:17**** CREATING ANOTHER TAG
i wnt to tag this image teslaimage:1 with this repository inf 
 **** docker tag teslaimage:1 mylandmarktech/maven-web-app
i run the tag command without a tag name and the docker demon assigned a tagname called latest 
when i run docker images i can see the tagname :mylandmaktech/maven-web-app  latest
now i can push the image but i will push without a tag name 
***docker push mylandmarktech/maven-web-app

therfore i hv distributed my images, the images are now found in dockerhub so now my life is easy bc i can use the images to deploy appl in any envr
 ## now that i v created my images n pushed them to a remote repository, then thers no nid to kip them locally inorder nt to consume my resources so i can delte my images
if i dnt nid them 



                  PULLING httpd IMAGE
1:08:15
to pull e.g
*** Docker pull alpine
*** Docker pull nginx

bc i didnt indicate the version of the nginx or the alpine i wnt to download
##### when i run docker images i can see the docker demon downloaded the latest version  """LATEST
bc i pulled frm a public repository,  it didnt rEQ for authentication
but if i want to push even though its a public repository, i must be authenticated

we dnt own ngnix .. it says maintained by the NGINX Docker maintenance

***** if i want to download a diff version of nginx, i can just copy the tag frm the docker hub repo
e.g docker pull nginx:stable-perl

****  docker pull httpd   this is my webserver image



****1:12:14,    RUN CONTAINER WITHOUT USING THE httpd image we pulled 
we can use the httpd to run a conatiner (  wihout creating a customized image )

docker run -d -p 80:8080 --name webapp teslaimage:1

docker run  --name web -d -p 5000:80 httpd
the container has been created 
to access the application
*** curl -v publicip of the docker server:5000 *******ie the port of the httpd
******* this was done wihout creating a customized image  **** i bliv this is bc we didnt run the "docker build" command which creates/build an image
############################


                         CREATE A DOCKER FILE USING httpd image we pulled
1.13.42  now i want to create a customized image
now lets create a file
follow the steps below to create the file
index.html is the name of the file am creating
1:13:51 ... CREATE THE FILE , the file will echo Devops is good and its redirected into /var/www/html/index.html  

*********THE  file is called : index.html , *** i guess bc he was rediredirecting into the file, he didnt need to follow the right html syntax
echo "DevOps is good" >> /var/www/html/index.html   
echo "With Landmak Technologies" >> /var/www/html/index.html 

now he decided to create an html file therfpre he will us ethe right syntax as seen below
#### if i want to write this as html code, it will be diff. 
*vi index.html 
echo "<h1> Welcome to Landmak Technologies <h1/>" 

**** vi Dockerfile_WEB .... Ie am creating a docker file call WEB , and the file has 2lines
in the file my keyword is FROM 

1:18:28 *** FROM httpd  ...  ... dis is the base image 

COPY  idex.html /var/www/html/index.html
  Docker file created
******* next , create the image 
docker build -t http:landmark1 -f Dockerfile_WEB .
the file (Dockerfile_WEB)is found in our current working dir
it was successful,
#####so we hv created our custom image 
so i v pulled an image from docker hub n used it to create my own image 
### the image we pulled is http, its the base image bc it contains my dependencies

###########################################this didnt work, HE SAID mayb the script wasnt written well $$$$ ################## now we can deploy the application
******docker run  --name webS -d -p 5500:80 http:landmark1

1:27:00 


                            AUTHENTICATION/PULLING FRM REGISTRY

Pull images from Public registry [dockerhub] : 
    No athentication is required

Pull images from private registry [ecr/dockerhub/nexus/JFrog] :
    Authentication is required   
    docker login -u username -p password 

push images to Public registry [dockerhub] :
      Authentication is required   
      docker login -u username -p password 

push images to private registry [dockerhub] :
      Authentication is required   
      docker login -u username -p password 

Nexus private docker registry;

==============================
https://8.200.55.9:8081/tesla/  ,, nexus repo
 docker tag mylandmarktech/tesla:1 8.200.55.9:8081/tesla/tesla-web-app:1 
#### this is the image ... mylandmarktech/tesla:1      ,, so tag it to the nexus repositoty  ,,   8.200.55.9:8081/tesla/tesla-web-app:1
docker login -u admin -p admin123  .. authenticate to the nexus repository before u can 
 docker push 8.200.55.9:8081/tesla/tesla-web-app:1     ,, then push

******* yes, we can push images to nexus registry bt must first tag the image accordingly, docker tag



############# TO PUSH IMAGES TO AWS AMAZON ECR

aws ecr private docker registry:
===============================
Retrieve an authentication token and authenticate your Docker client to your registry.
Use the AWS CLI:

1:29:11   .. .....(this deployment was successful)
vi Docker_WEB
FROM httpd
COPY index.html /var/www/html/index.html
COPY index.html  /usr/local/apache2/htdocs/

CREATE AN inage
docker build -t web:1 -f Dockerfile_WEB .

DEPLOY THE APPL/RUN CONTAINERS
docker run --name web11 -d -p 3000:80 web:1


############# TO PUSH CODE TO AWS AMAZON ECR  ,,, ELASTIC CONTAINER registry

aws ecr private docker registry:
===============================
Retrieve an authentication token and authenticate your Docker client to your registry.
Use the AWS CLI:

*********1:35:12  
CREATE PUBLIC REPO : in aws- ecr-create repository- private or public- -public means evryone can v access- name:webapps -i can upload repository logo- create
PRIVATE: create - private - name - crreate

###########to push to private 
*****click on private repo- select linux - copy authentication command and any other commands like listed below
aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 287784533479.dkr.ecr.us-east-2.amazonaws.com
docker build -t web-app .
##docker push 287784533479.dkr.ecr.us-east-2.amazonaws.com/web-app:1


push steps as follow
###docker tag teslaimage:jb2 287784533479.dkr.ecr.us-east-2.amazonaws.com/web-app:1
he also run the docker tag for the public repo
###then authenticate -- aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 287784533479.dkr.ecr.us-east-2.amazonaws.com
### it says cli nt installed , bc we cant run aws command until aws cli is installed 
sudo apt install awscli -y
##########bt it still says you can configure credentials by running "aws configure
 since i dnt v aws configure, i need my access credential so i go bk to severs n i can add iam role for my docker server 
under actions - security- attach iam role- update
now bcak to mobaxtem, when i run the authentication command it was successful
##### i also authenticate for the public repo, also succesful
then push to private n public was successsful
checked the repository in aws and the pushed image was sucessful for both privae  n public
if smt is wrong we can also scan , jst click repositories, images, n u see scan up 
d images can  be deployed in any env
##### we can also pull, select ecr- pulic gallery
then copy the pull link


to create private tag
the tag we created, the image was from the image we created above:
docker tag web-app:latest 287784533479.dkr.ecr.us-east-2.amazonaws.com/web-app:latest
####docker tag teslaimage:jb2 287784533479.dkr.ecr.us-east-2.amazonaws.com/web-app:1



########to push to public:
select public repo - copy authentication
###aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/v5s8z0t3
docker tag teslaimage: public.ecr.aws/v5s8z0t3/web-apps: 
docker push public.ecr.aws/v5s8z0t3/web-apps:latest
##docker push public.ecr.aws/v5s8z0t3/web-apps:1
##docker pull public.ecr.aws/v5s8z0t3/web-apps:1



to push now we create the tag
docker tag teslaimage:jb2 public.ecr.aws/v5s8z0t3/web-apps:1  

##### we can also pull, select ecr- pulic gallery
then copy the pull link

e.g to pull nginx
public.ecr.aws/nginx/nginx:mainline-alpine
public.ecr.aws/nginx/nginx:stable-perl


u cant delete an image that is linked to a container

i can also delte all my images bc i v pushed them already to private registry
delete all images using: docker rmi -f $(docker images -q) 
===========================
docker images -q  = List image IDs  
docker rmi $( docker images -q )   
docker rmi -f $(docker images -q)  

docker build/pull/scan/push/inspect/rmi/prune/tag  
docker system prune

docker build/ps/images     

                                                               DOCKER CONTAINER COMMANDS

VIDEO 4

docker container commands:
============================
docker ps    = List running containers  
docker ps -a = List all containers [running and stopped/excited] 
docker ps -q   = List running containers IDs
docker ps -aq  = List all containers IDs 
docker stop containerName/ID  
docker stop

List Running Containers
=======================
docker ps -a --filter  status="running" 
docker ps 
docker container ls

List All Containers
==================
docker ps -a
docker container ls -a

List ONLY stopped Containers
=================================
docker ps -aq --filter  status="exited" 
docker ps -a --filter  status="exited" 

List only running container ids
==============================
docker ps -q
docker container ls -q


List all container ids
==============================
docker ps -aq
docker container ls -aq


deletes stopped containers 
===========================zs
docker rm containerName/ID  
docker rm $(docker ps -aq --filter status='exited' ) 

zForce Delete a running container  
===============-----------------
docker rm -f containerName/ID 
 docker rm -f $(docker ps -aq --filter  status="running") 

Delete an exited/stopped container  
===============-----------------
docker rm containerName/ID  

Delete all exited/stopped container
====================================  
docker rm $(docker ps -aq --filter status='exited' )

Delete all  container
====================================  
docker rm -f $(docker ps -aq )


Delete all excited/stopped Containers
================================
docker rm $(docker ps -aq --filter  status="exited")




#######Ticket014:.... we can create containers wit these 3 approaches 
        ********Mee** when we clone we can edit the docker file & when we pull we can create customized image from the "base image" we pulled *** 1.13.00**
  Deploy an application from the mylandmarktech/java-web-app image.
Method1:  
1. docker pull mylandmarktech/java-web-app
2. docker scan mylandmarktech/java-web-app  ... to mk sure the image is free frm vulnerability we scan 
3. docker run --name webapp -d -p 8000:8080  mylandmarktech/java-web-app  

Method2:
1. docker pull mylandmarktech/java-web-app
2. docker scan mylandmarktech/java-web-app  
3. docker create --name webapp -d -p 8000:8080  mylandmarktech/java-web-app 
4. docker start  webapp 

Method3: .. docker run is equals to docker create n docker start (docker run will pull the image,create n start the container)
  docker run --name webapp -d -p 8000:8080  mylandmarktech/java-web-app 
  to access the appl online .. http://3.22.217.29:8000/java-web-app 
we can aslo curl 

**** 22:37 in the aws repository, we can config automatic scanning, wher it can scan the image at all time, it wil scan d image b4 we even pull to our env and if
der ar issues we"l be notified


               DEPLOY PYTHON IMAGE

Ticket0015 -  : this is a github repository ,, apart from github we also v a dockerhub account
1. the github repo , wher the codes ar found , wher develpers ar pushing code 
https://github.com/LandmakTechnology/python-flask-app
2. the python flex application
  docker pull mylandmarktech/python-flask-app     ,,,in an image registry
  Deploy a pythonapp application using docker: 
    1. use/Create/modify a Dockerfile   
    2. Use the Dockerfile to build a docker image  
    3. Push the image to an image registry[dockerhub/ecr/nexus/JFrog]
    4. pull, inspect and scan the docker image
    5. deploy the application using the image [docker run]  


36:59 we didnt do any mvn package for this python bc python web appl is nt java, we only build using maven for java appli ,, python is diff, so with java appl
like the examples above, we had to go tru that process 
 

#####the docker file           *****docker5*** with d help of a dockerfile we were able to containerize the appl, so we created an image frm this appl
FROM python:3.7             docker5 ***from the key word, our base image is python 3.7
WORKDIR /opt/app
COPY . .        copy.. means that it wil copy al d files frm the current working dir of my home server to the current working dir of the image we ar creatin 
RUN pip install --no-cache-dir -r requirements-prod.txt      ***this is similar to doing mvn package, wher d artifact is created, bc dis is a python appl 
EXPOSE 5000                                                                    so when creating d image it runs this for us & starts d application
CMD ["python3", "-m", "flask", "run", "--host=0.0.0.0"]


#### we can jst clone the repo since it has the docker file
git clone https://github.com/LandmakTechnology/python-flask-app  
ls
cp -r python-flask-app/ pfa
cd pfa
ls
with the help of the docker file we
****build/create
docker build -t pythonimage:1 
therfore we ar containerizing this appl using python
this appl was developed using python
now wwe can deploy the applic using the python image
****** docker run -d -p 7000:5000 pythonimage:1
the appl is deployed
docker ps n we can see the python application runing
to access the appl, we go back to github and in the python appli open the code...  app.py
ther ar some rest APIs (wil display diff statements) and we can also see the root path '/' and it wil response as (apps works!!)
so to access the python appl pubicip:7000 ... we can see apps works!!
###bt my image is stil found in my local server, i wnt to mk d image distributable frm d build server so i hv to push to dockerhub so it is acesible to oda member
first we tag
###docker tag pythonimage:1 mylandmarktech/python-flask-app:33  
docker push mylandmarktech/python-flask-app:33  


i bliv we can see the dockerpull and docker push command in the docker hub/repository
