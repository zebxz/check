jenkins sept23 del
sept23 scripted

multiBranch Pipeline job : 
=========================
Project private repo - https://github.com/LandmakTechnology/maven-web-app  
   we are expected to see line of development
               Git Branches - Are Lines of development 

we can build in multiple branches 42:38


https://github.com/Landmark-Technologies/maven-web-application
     sourceCode-src 
     JUnitTest cases   
     pom.xml  
     Jenkinsfile   
     Jenkinsfile-sep23  this file has all the configuration needed
https://github.com/Landmark-Technologies/maven-web-application/blob/master/Jenkinsfile-sep23

1 ###### 18:12 .. new item - description:tesla mbpp - select muliti - ok =branch source :git: git repo - cred :git- build conf-  mode: jenkinfile - it wil build either frm d script or jenkins file
, our file name n paste - property strategy: all branches -save - then the build is triggered 31:12 or click scan multi line pipeline now

2 ####### 40:40  to create another branch click on 1branch 
then click scan multiline 42 :00
Ticket005
============
Create a Mulit-Branch pipeline job for tesla
 https://github.com/Landmark-Technologies/maven-web-application
 we build from 3branches: master  development  stage 
some companies may hv a project with 50 branches   


QQQQQQQQQQQQ   IQ :  Create a Jenkinsfile using both default & custom name and share it using SCM.
MY EXPERIENCE IN JENKINS include creating and customising/editing Jenkinsfiles. 

TO clone code, i nid git and the repository

 inside maven home, we hv the bin dir & inside the bin dir we hv mvn & we
are doing mvn bc mvn is a script wich is found in the bin dir , so we can either use the full command: 
//sh "/var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.9.4/bin/mvn package"
or do this :  sh "${mavenHome}/bin/mvn package" ,,, both will work ... 52:15

to write a good code we should avoid repitition and we can avoid repetition by making use of function"${mavenHome}/bin/mvn package
so the use of function is very important for our devops deployment bt that is scipted pipeline.

scripted Jenkinsfile:   
node{
  def mavenHome = tool name: 'maven3.9.4'
  stage('1.Clone'){
    git "https://github.com/Landmark-Technologies/maven-web-application"
  }
  stage('2.Build'){
  //sh "/var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.9.4/bin/mvn package"
  sh "${mavenHome}/bin/mvn package"
  }
  stage('3.codeQualityAnalysis'){
    sh "/var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.9.4/bin/mvn sonar:sonar"

  }
  stage('4Upload2Nexus'){
    sh "/var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.9.4/bin/mvn deploy"
  }
}

for declarative pipeline to flow seamless with relative ease  we hv agent:any, and the agent could be  tools:maven, stages, and post>messages
1:06:20 by common sense if we are cloning in slave1, we shud also build in slave1

Declarative Jenkinsfile:
pipeline{
    agent any  
    tools {
      maven 'maven3.9.4'
    } 
    stages{
        stage('1.Clone'){
            agent {
                label 'slave1'
            }  
            steps 
        }
        stage('2.Build, qualify & upload'){
            agent {
                label 'slave1'  .....1:06:20 by common sense if we are cloning in slave1, we shud also build in slave1
            }  
            steps{
                sh "mvn package"  ... we can equally break these steps down into stages
                sh "mvn sonar:sonar"
                sh "mvn deploy"
            } 
        }
        stage('3.Containerise'){
            agent {
                label 'dockernode' in this dockernode we are going to be doing docker build to containerize the application,we are building the applictaion, we are containerizing it 
                       so that we can deploy it as docker containers, once it is containerized, it can now be deployed as a docker container        } 
            
       steps{  ......containerizing the application and these are the steps
                sh "docker build " 
                sh "docker push " this will distribute the application
            }  
        }
      stage('4deploy'){
        agent  {
            label 'kubernetesnode'   ..... i am nt deploying to tomcat, bt am deploying using kubernetes, wich is the production great deployment 
        }
        steps {
            sh "kubectl apply -f app.yml"
        }
      }
    }
    post  
}

1:11:40 . someone is aking we hv nt deployed to tomcat ,, we are going to be deploying containerized app, tomcat was an introduction
  1:12:18 all of these is nt happening in one agent , mvn package will tk place in maven build server, sonar,the code quality analysis will talk to a 3rd party server wich is sonarqube server

our jenkins is running in linux

=======================
SHARED LIBRARIES    .. we execute jenkins shared lib to ease hw we write n manage jenkins file, so if i hv 24 jenkins files to write that are performing similar task 
                           ill use shared lib to simplify my job... 1:26:16
==========================
apps: tesla-be (backend, tesla-myapp,  tesla-fe (frontend, tesla-wepapp
branches: master, dev. testing, uat, pre-prod, prod  
no of jobs = 24 jobs requiring 24 Jenkinsfiles ..dis a problem, means we hv to be writing the same jenkins file that is doing similar task like test n build
we hv what is called common stages, since they are all java projects, we are going to do a stage to do mvn test,clean package, these are all unique stages e.g
stage1 will be for mvn tesst , stage2 .... etc , most of the stages are common so we can prepare a shared library, which will bring 2geda all the common stages such 
that we can jst refer to them e.g we can create a shared lib that wil hv in it a common script

i can call this file ..; common stages: common.groovy 
so hv created a shared lib called common.groovy ,,
  unittesting:
  stage('1RunUnitTests'){ 
    sh  "mvn test" }
  packaging:
  stage('2Build'){ 
    sh "mvn package" }
  codequality:
  stage('3CodeQuality'){ 
    sh "mvn sonar:sonar" }
  artifactUpload:
  stage('4Upload'){ 
    sh "mvn deploy" }
  stage('14'){}

 so if am trying to create my pipeline for each of this jobs, my pipeline wil b very simple, si if i wnat to crete a jenkins file 
illl jst be referring to common. so in all my jenkins file am not repeating code, i hv a shared lib common. groovy wil search for unittesting
each file will hv their unique git url 
Jenkinsfile:
node{
    stage ('1clone'){
        git 'gitURL'
    }
    stage('unittesting'){  (i.e the stage here is refering to common.grovy and it want to search for unittesting,it wil be done with relative ease
        common{
            stage 'unittesting'
        } 
    }
   stage('2mavenBuid'){    (i.e the stage here is refering to common.grovy and it want to search for packaging,it wil be done with relative ease
     common{
        stage 'packaging'
     }
   } 
   stage('3CodeQuality'){
     common{
        stage 'codequality'
     }
   } 
   stage('4Upload'){} 

}
we are managing 4 applications for tesla
  tesla-myapp :  
    dev  
    testing  
    uat  
    pre-prod  
    Production  
  tesla-be   :  
    dev  
    testing  
    uat  
    pre-prod  
    Production  
  tesla-fe  : 
    dev  
    testing  
    uat  
    pre-prod  
    Production  
  tesla-wepapp :    
    dev  
    testing  
    uat  
    pre-prod  
    Production  

Jenkins security: where we do the changes depends on where jenkins was installed 1>30:40

==================
1. changing Jenkins default configurations  by ec2-user
    Jenkins home directory = /var/lib/jenkins   
    Jenkins port number    = 8080  
    Jenkins_user           = jenkins  
       
1:33:30  to  effect the changes:  sudo vi /etc/default/jenkins    [ubuntu]
         sudo vi /etc/sysconfig/jenkins  [redhat]  ... 
can change JENKINS_HOME="/var/lib/jenkins" to JENKINS_HOME="/app/jenkins"
JENKINS_USER="jenkins" to JENKINS_USER="cece"
JENKINS_PORT="8080" to JENKINS_PORT="7750"  cant do 90000 bc  port range= 0,1,2,... to 65535
if a hacker wants to hack in ur system he knws he can access jenkins on the default user jenkins, also that jenkins listens on 8080 so changing the port makes hacking difficult

2. vi config.xml   by jenkins jenkins
     <useSecurity>true</useSecurity>
     <useSecurity>false</useSecurity>.. changing to false means anyone can access it without paswd ,, also if i forget my passwd, i can also change true to false 
        password not required to access Jenkins on the browser   


1:50 dashboard-mange jenkins- security
3. userMgt.. ; everyone shud nt hv the same access in terms of whta they can do in jenkins
     authentication [username/password]  
jenkins to allows users create users account : tick: Allow users to sign up


authorization  
matrix-based security 
project-base matrix authorization : add roles n apply, apply and save ... then dashboard- project and tick Enable project-based security, add users n roles, apply and save 

   DevOps Engineers: james landmark  paul 
   developers:       chidi mercy Joy  

  2;01:40 [rbac]: role base acces control dashboard-manage jenkins-plugins-avilable plugings:install, rolebased acces control-dashboard-security- now we hv rbac option 
role base strategy

2:03:11  with security we can 
Secure Jenkins; define who is allowed to access/use the system.
Credentials
manage/Configure credentials
Credential Providers
Configure the credential providers and types .. ( diff providers we can use, including L type
Users
Create/delete/modify users that can log in to this Jenkins


2:07 we need users to access  Sonarqube, nexus, jenkins, github, kubernetes. it will be too much manual work to create these users in all the servers so we can integrate
jenkins with LDAP authentication server,, so we'll hv all the login credentials of users , username n passwd stored in the LDAP then connect LDAP to communicate withjenkins
and each of the servers.then all the users are able to access jenkins automatically its called a single signup, where the signup credentials is configured in the LDAP server,
once u connect to LDAP sucessfully, u can connect to any other resource in ur environment. this all securing our jenkins environment. 

2:09:12


  port numbers for servers  = 65,536 [ 0 - 65535]
   jenkins port  = 8080 
   tomcat port   = 8080 
   ssh           = 22 
   rdp port      = 3389  
   smtp          = 587/465
   nfs           = 2089  
   http          = 80  
   https         = 443  
   Sonarqube     = 9000 
   nexus         = 8081  

  By default for Jenkins to start port 8080 must not be in use  

  If port 8080 in use then Jenkins or tomcat can only start by changing their 
  default ports    

  netstat -tulpn 

  http://34.219.46.160:7070 

token :
    <sonar.login>class33</sonar.login> 
    <sonar.password>admin123</sonar.password> 

    <sonar.login>5bb43cdd151f4f19d7913168e5307bcdd1eb81f7</sonar.login> 
   <!--  <sonar.password>******</sonar.password> --->


http://34.217.27.159:8081/repository/tesla-releases/
http://34.217.27.159:8081/repository/tesla-snapshots/

public: 
https://github.com/LandmakTechnology/maven-web-application

Jenkinsfile  
writing code is more complex


node
{
  
}

pipeline
{

}


Jenkins:
  1. Build + Release Engineer  
  2. AWS cloud    = Cloud Engineer 
         
  3. Docker       = 
  4. Kubernetes   = Application Engineer  / kubernete Engineer 
  5. Ansible      = System Automation Engineer  
  6. Terraform    = Infrastructure Engineer [ IaC ] 
  7. DevSecOps    = 
  8. SRE          = 
  9. Sr. DevOps Engineer  
  10. Platform Engineer - Linux  
