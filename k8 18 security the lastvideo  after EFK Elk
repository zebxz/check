HOW TO DO  RBAC using EKS ,How to configure roles and cluster roles to easily permit who can perform what in our k8 cluster, cl8 was deployed using terraform   ********** 
 TO MK THE USER GET ACCESS TO SVC ,   TO MK THE USER GET ACCESS TO READ ALL THE SERVICES
Security Best Practices for Kubernetes Deployment   :
=======================================================

referred to a diagram on hw com is est within our k8 cl8 n on of the tin we realise is the fact that we can use ingres for that purpose , we wil stil visit this guy again 
bt b4 we do that lets look at security, why do we nid to secure our k8 cl8

BEST PRACTICES

Remember that we are looking at eks, eks is increasingly been used by companies today so thats why we wil actually dealt with thAT
LINK FOR K8 SECURITY:
https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/

1. Ensure That Only Authorized Images are Used in Your Environment. 
IN K8 we ochestrating docker containers n the containers are runing  frm docker images bc a docker container is running instance of a docker image , therfor for u secure
your env you must ensure that only authorized images are used in ur env .
our images are kept primarily in dockerhub, in :
                        DockerHub 
                        AMAZON ECR
some cops keep in       Nexus/JFrog


######  to deploy ur appl , once this command is executed, it is using an image, so we must mk sure that only authorized images are used when it comes o deployment
        kubectl run/apply/create
                                                                                     if someone deletes the node its a problem so linit access 
2. Limit Direct Access to Kubernetes Nodes.  (mg8 who gets access to the nodes) , we nid to limit direct access to d node .,in k8 we must restrict who can aaccess our node
      kubectl get/decribe/edit/update/label/delete
      Cluster-->Nodes-->Pods

3. Create Administrative Boundaries between Resources.  we can limit developers to the dev ns
      Developers --> dev-nameSpace
      Sr. Engineers --> Cluster

4. Define Resource Quota.   e.g kind: resourceQuota, thats what we wnt to create , so we are creating resourcequota for dev ns
      apiVersion:                                  so we can create resourceQuota as far as  a specific ns is concerned
      kind: ResourceQuota
      metadata:
         namespace: dev-nameSpace
         name: dev-resources
      spec:
      - resources:
         cpu: 4Gi
         mem: 128Mi   this way , whatevr is hapening, the dev namespace wont use more than 4Gi or 20pods 
         pods: 20                              this is security
         
         
5. Implement Network Segmentation. 
we can stil do this using name spacing , with the help of name spacing we can isolate env like dev env, QA .. etc

6. Apply Security Context to Your Pods and Containers.
e.g who can access certain pods n containers 

7. Log Everything. 
     EFK  
using EFK to mg8 the logs that are generated frm our appl

8. Summary.

Kubernetes Role Based Access Control (RBAC):

When a request is sent to the API Server, it first needs to be authenticated (to make sure the requestor is known by the system) before it’s authorized (to make sure the 
requestor is allowed to perform the action requested).

  RBAC: Roll base access control
     authentication: this is the first thing that hapens in a cl8
    e.g of Api call:    kubectl get 
     authorisation:


RBAC is a way to define which users can do what within a Kubernetes cluster.


If you are working on Kubernetes for some time you may have faced a scenario where you have to give some users limited access to your Kubernetes cluster. For example you 
may want a user, say Michale from development, to have access only to some resources that are in the development namespace and nothing else. To achieve this type of role
based access, we use the concept of Authentication and Authorization in Kubernetes.

#############To achieve this type of role based access, we use the concept of auhENTICATION N Authorization in k8

Broadly, there are three kinds of users that need access to a Kubernetes cluster:
1.	Developers/Admins/Engineers: 
Users that are responsible to do administrative or developmental tasks on the cluster. This includes operations like upgrading the cluster or creating the resources/
workloads on the cluster.                                                                       e.g of resources  frm pod to rs, to rc, deployment, statefulset
                                                                                                    done by developers, engrs , administrators
2.	End Users:
Users that access the applications deployed on our Kubernetes cluster. Access restrictions for these users are managed by the applications themselves. For example, a web 
application running on Kubernetes cluster, will have its own security mechanism in place, to prevent unauthorized access.
        users--->app.com[app.com--LB]-->NODE-->ingress-->
         27:19....   so we hv created Arecord, so it pointing to our LB , we v equally ensured that the enduser traffic is also encrypted using certificate
our LB will now b the guy that wil route trafic to the backend appl, bt as we saw it does nt routetrafic trfic directly to the backend appl, so when this trafic talks to a 
node, the node is goin to route it to ingres service then ingress then routes tru the IC pod... our env is highly secured, endusers trafic cannot talk to our appl directly
that is a security breach.. 

3.	Applications/Bots:
There is a possibility that other applications may need  access to Kubernetes cluster, typically to talk to resources or workloads inside the cluster. Kubernetes 
facilitates this by using Service Accounts.
 e,g when we deployed ingress, we created a service account for ingress which wil be given some powers and this is done by creating role n rolebinding
nginx is a service so we create a service account that will permit ngin to control other appl in the cl8 e.g we can creat a role  wich wil hv definition like ok, u can
control services , appl and then we bind the role to the service account to perform such tasks
Ingress--> 
              Role 
              RoleBinding 

  #THERE ARE SOME KEY WORD TO TAKE NOTE OF :
RBAC in Kubernetes is based on three key concepts:
                                                               THESE are the main verbs we are going to see when you are tryin to create a role or a cl8 role
1.Verbs: This is a set of operations that can be executed on resources. There are many verbs, but they’re all, LIKE Create, Read, Update, or Delete (also known as CRUD).

2.	API Resources: These are the objects available on the clusters. They are the pods, services, nodes, Persistent Volumes and other things that make up Kubernetes.
                                                                        deplymen, daemonset etc  .. kubectl get pod, so the pod is an api resource
3.	Subjects: These are the objects (Users, Groups, Processes(Service Account)) allowed access to the API, based on Verbs and Resources.
                      e.g we can create a grp of devops engrs and if u ar a member of that grp u ar goin to b able to peform all the task assigned to the grp

E.G WE ARE CREATING A ROLE

kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: office
  name: deployment-manager     *********** the name of the role
rules:                these ar the major API gropups        **********( if u put  * , it includes all the groups given
- apiGroups: ["*", "extensions", "apps"]   # v1, apps/v1, 
  resources: ["deployments", "replicasets", "pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"] # You can also use ["*"] , these are action words that permit a particular task to b executed

e.g  what is the api version for pod?
#apiVersion: v1
#kind: Pod

*********************************************so we can create a role and bind it to a user , group, process ,, and that is role binding
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: deployment-manager-binding
  namespace: office
subjects:
- kind: User
  name: employee
  apiGroup: "*"
roleRef:
  kind: Role
  name: deployment-manager
  apiGroup: ""

  ******************37:00
RBAC                            *********** it is imp to knw that  k8 does nt hv any resource that deals directly with Authentication, howevr we can integrate k8 with 
Authentication (Identity)                                                                                                   LDAP,IAM -eks , X-509 for identification
when we are doing authentication generally where someone is identified, we can use smt like:
x-509 certificate
LDAP
IAM - EKS
these can be used for authentication

AUthorisation (Permission)
we use:
Role
RoleBinding

37:47
################################ HOW TO DO  RBAC using EKS   ,,,,.. this is my EKS cl8 ,  ####################################################

WE AR goin to be dealing with 
Clusterrolebindingss
clusterroles : are created foe the entire cluster
rolebindings  : Assigning the role to a subject (users, groups, certain applications)
role : Resourece we create wich is perimtting certain action to be carried out in your cl8
                     A role is created for a namesapce

41:00
How to cobfigur reoles and Cluster roles to easily permit who can perform what in our k8 cluster
our EKS cluster was deployed using Terraform
ubuntu@demo:~/eks/EKS$ terraform show
this displays some imp resourec including a very imp resource , we can see the kube config file and also our config map 
the canfigmap o scalled : name: aws -auth      ..... this is what will get you authenticated, will auth users
the map is created in kubectl namespace
ubuntu@demo:~/eks/EKS$ kubectl get configmap        *********** this is in the default ns 
ubuntu@demo:~/eks/EKS$  kubectl get configmap -n kube-system        ***************** to get it in the kube system ns
i hv my cl8 runing, if i want to get it :
ubuntu@demo:~/eks/EKS$  aws eks list-clusters
ListClusters
clusters
terraform-eks-demo              ******** this is my cl8, wich is ruing, i v deployed the cls8
ubuntu@demo:~/eks/EKS$
to knw the authorixation that any user has 
ubuntu@demo:~/eks/EKS$  kubectl auth can-i delete pods
yes                                        *********************** so yes this user can
ubuntu@demo:~/eks/EKS$  kubectl auth can-i create pods
yes
ubuntu@demo:~/eks/EKS$  kubectl auth can-i " *" "*"          ************this means can i do evrytin in this cl8 ? 
yes                                                       ************this means this person is a super user, he can do evrytin
ubuntu@demo:~/eks/EKS$                               you are working in a team, you are nt working alone

we are going to aws account n we wil perform certain key task  like,  last weekin an 
########################### INTERVIEW SOMEONE WAS ASKED WHAT IS YOUr IAM EXPERIENCE

47:00
 in the iam console in aws
we create a grp: fintech grp 
we hv nt assigned any role/policy to the grp
lets also create fintech engrs  no policy assigned too
create a user : bode , the user can hv programmatic acess(aws api, cli, sdk n other development tools ) or console access( aws mgt console)
hes given only programamtic access  , no permission is assingned
hes only assigned to the fintech develpers
copy the access key n sacred access key for bode
we are granting him restricted access
we go to users in aws
we copy his ARN   ...... ....... Amazon resource name  ...   
bode is identified with his ARN
we hv to confirm the region our eks cl8 is ruing in
now i wil try to access the cl8 usin bode , bc we hv created a subject 

now using his laptop
he used another server
in his windown server , the local treminal .............. 52:40
***********************pls ensue u hv aws cli installed on ur laptop or any othet server u want to use
i wnat to log into my sever as bode
i have a local terminal here 
who am i 
landmark technologies
i wnat to log into my sever as bode
aws configure
its asking for acess key    .. copy n paste 
also secret key   ..... copy n paste
aws s3 ls
access denied
aws eks list-clusters
access denied
so we go to aws , IAM and grant  access , in policy        ********* 55:40
we create policy , click JSON
 service : eks
can tick all EKS actions  OR manually select what u want 
it takes us to resources
lets assume that you hv 10 eks cls8 for this coy u ar managing  , e.g dev env, stage env , etc
you can cm her n dceide wich eks cl8 u want to mg8, in the region i can assign the region a user is allowed to work in 
even the particular account can be specified, if u wrk in a country that has many accounts bc in aws we hv what is called org wher if a coy hv like 5account they grp them
to become an organisation  or jst tick any if u dnt want to state the account name  
you can also specify the cl8 name , e,g u hv many cl8 in the region i can choose  aparticualr cl8
************** for now we can select all resources
we are assigning him full eks accsess 
nxt
Review Policy :  my-eks25policyfor developers
description :   my-eks25policyfor developers
 we see its full access
create 
this policy has been created, now we assign it to user/group 
its similar to role binding
we tick on the policy and and in action  select attach
select bode
attach policy
now in mobaxterm  ( i bliv the aws cli)
befoer bode was denied access , bt now bode is able to list cl8
aws eks list-clusters
Listclusters
clusters
Terraform-eks-demo
 ************** ****** but stil bode cant run kubectl get pod 
this is bc he need sthe kube congif file bsfeor he can query/access the cl8
Terraform-eks-demo
kubeconfig    .... file is needed
******************to import the kubeconfig file 
aws eks update-kubeconfig --name \
***************then add the cl8 name 
terraform-eks-demo \
************************ then the aws region where the cl8 is running in
--region us-west-1 \
 ########### now run the command : 
aws eks update-kubeconfig --name terraform-eks-demo --region us-west-1
  *********** we can now mk API calls 
kubectl get pod 
error
################ so i will remove this kube/config file
rm -rf ~/.kube/
************************* so the file does nt exists anymore
 ########### now run the command : 
aws eks update-kubeconfig --name terraform-eks-demo --region us-west-1
updated
so the file has been created
cat ~/.kube\config
error
kubectl get pod
error: you must be logged in to the server (unauthorized)
at this tim ethis user is nt authorized to access the cl8

~~~~~~~################   remember we have our administrator   ##########
ubuntu@demo:~/eks/EKS$  kubectl auth can-i " *" "*"          ************this means can i do evrytin in this cl8 ? 
yes                                                       ************this means this person is a super user, he can do evrytin
so we go bk to this server, this is like the adminstrator of our k8 cl8
ubuntu@demo:~/eks/EKS$ kubectl get configmap -n kube-system
NAME                       DATA          AGE
aws-auth                     1            76m
coredns                      1            79m
kube-proxy                   1            79m

********** so we hv this config map : aws-auth
we can also edith the config map and add mapUsers, bc its the config map that contains users that want to access our cl8 , but w eneed Bode to get access
ubuntu@demo:~/eks/EKS$  kubectl edit configmap aws-auth -n kube-system    *********** (its found in the kubectl namespace)
in the config map we add users info , so we add Bode info 
we hv mapRoles:
we create mapUsers
mapUsers:  
 - userarn:  paste the ARN  for bODE whcih we copied from AWs 
   username: BOde
exit
now the info has been updated

################ now going tbk to his laptop
kubectl get pod
Erorr from server (forbidden): pods is forbidden: user bode cannot list resourecs pods in API group in the default namespace

we hv used IAM to authenticate BOde
************* so now BODE IS ABLE TO access the cl8 but cant perform task in the cl8

####### lets see that he has right to list pod

lets create a role
vi role-dev.yml

kind: Role
apiVersion: rbac.authorization.k8s.io/v1 
metadata:
  namespace: default                ************ bc role is restricted to a namespace
  name: readonly
rules:
- apiGroups: [""]      *********** this represents API resources with v1     #v1 = pods services
  resources: ["pods"]
  verbs: ["get",  "list"]
apiGroups:["apps"]
resources: ["deployments", "replicasets", "daemonsets"]
verbs: ["get", "list"]

#### now we bind the role to the user, if we dnt bind it he wont still have access .. .... 

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1 
metadata:
  name: full_access_role_rolebinding 
  namespace: default
subjects:
  -	kind: User
    name: bode                                      #replace the map with your own username
    apiGroup: rbac.authorization.k8s.io 
roleRef:
    kind: Role
    name: readonly                            #this has to be the same as the role file
    apiGroup: rbac.authorization.k8s.io

kubectl apply-f dev-roles.yml

*************** now bk to the laptop sevrer
kubectl get pod 
we see he now has acess

########## lets deploy an appl, in the main server as an admin
kubectl apply -f app.yml
deployed

***************** bk to the laptop
kubectl get pod 
we see the pod we just deployed
*********************************************** lets see if he has access to services
kubectl get svc 
error

        ******************* TO MK THE USER GET ACCESS TO SVC#################################
#################### back to the admin server  , to allow the user access services, ther are 2ways we can do it 
vi role-dev.yml                                   in resources add  services

kind: Role
apiVersion: rbac.authorization.k8s.io/v1 
metadata:
  namespace: default               
  name: readonly
rules:
- apiGroups: [""]      
  resources: ["pods", "services"]                      ********* Here we add services
  verbs: ["get",  "list"]
apiGroups:["apps"]
resources: ["deployments", "replicasets", "daemonsets"]
verbs: ["get", "list"]

kubectl apply-f dev-roles.yml

*************** now bk to the laptop sevrer
kubectl get svc 
we see the svc

#################################   TO MK THE USER GET ACCESS TO READ ALL THE SERVICES ###################
vi role-dev.yml 

kind: Role
apiVersion: rbac.authorization.k8s.io/v1 
metadata:
  namespace: default               
  name: readonly
rules:
- apiGroups: [""]      
  resources: ["*]                 ************ here we put " *"  , therfor , everytin wich has v1 as an ap1 version, which includes pods, sevrivces etc
  verbs: ["get",  "list"]
apiGroups:["apps"]
resources: ["deployments", "replicasets", "daemonsets"]
verbs: ["get", "list"]

************************************** now bode can run 
kubectl get pod as well as kubectl get svc

this is k8 security and this is one thing you shud be able to explain, particularly since we hv done stuff like RBAC 

w eare goin on break , when we come bk we go to promethus and grafana, so u can go ahead and ask ur question 











RBAC Role

A Role example named example-role which allows access to the mynamespace with get, watch, list, etc. operations:

kind: Role
apiVersion: rbac.authorization.k8s.io/v1 
metadata:
  namespace: mynamespace
  name: example-role
rules:
- apiGroups: [""] 
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

In the rules above we:
1.	apiGroups: [""] – set core API group
2.	resources: ["pods"] – which resources are allowed for access
3.	["get", "watch", "list"] – which actions are allowed over the resources above


RBAC RoleBingding
To “map” those permissions to users we are using Kubernetes RoleBinding, which sets example-role in the mynamespace for the example-user user:
 
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1 
metadata:
  name: example-rolebinding 
  namespace: mynamespace 
subjects:
  -	kind: User
    name: example-user
    apiGroup: rbac.authorization.k8s.io 
roleRef:
    kind: Role
    name: example-role
    apiGroup: rbac.authorization.k8s.io


Here we set:

	subjects:
	kind: User – an object type which will have access, in our case this is a regular user
	name: example-user – a user’s name to set the permissions
	roleRef:
	kind: Role – what exactly will be attached to the user, in this case, it is the Role object type
	name: example-role – and the role name as it was set in the name: example- role in the example above

Role vs ClusterRole

Alongside with the Role and ClusterRole which are set of rules to describe permissions –
Kubernetes also has RoleBinding and ClusterRoleBinding objects.

The difference is that Role is used inside of a namespace, while ClusterRole is cluster-wide permission without a namespace boundaries, for example:
	allow access to a cluster nodes
	resources in all namespaces
	allow access to endpoints like /healthz

A ClusterRole looks similar to a Role with the only difference that we have to set its kind as ClusterRole:

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1 
metadata:
  name: example-clusterrole 
  rules:
  -	apiGroups: [""]
resources: ["pods"]
verbs: ["get", "watch", "list"]

And a ClusterRoleBinding example:

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1 metadata:
name: example-clusterrolebinding 
subjects:
- kind: User
  name: example-user
  apiGroup: rbac.authorization.k8s.io 
roleRef:
  kind: ClusterRole
  name: example-clusterrole 
  apiGroup: rbac.authorization.k8s.io


Keep in mind that once you’ll create a Binding you’ll not be able to edit its roleRef value – instead, you’ll have to delete a Binding and recreate 

•	Kubernetes uses RBAC to control different access levels to its resources depending on the rules set in Roles or ClusterRoles.

•	Roles and ClusterRoles use API namespaces, verbs and resources to secure access.
•	Roles and ClusterRoles are ineffective unless they are linked to a subject (User, serviceAccount...etc) through RoleBinding or             ClusterRoleBinding.
•	Roles work within the constraints of a namespace. 
    It would default to the “default” namespace if none was specified.
•	ClusterRoles are not bound to a specific namespace as they apply to the cluster as a whole.

 Goal	

As a Admin:
=============

1) Create IAM User With Polociy to List & Read EKS Cluster to get Kube Config File in AWS IAM Console.

2) Edit aws-auth to add userarn to aws-auth config map

  kubectl edit configmap aws-auth -n kube-system

apiVersion: v1
data:
  mapRoles: |
    - groups:
      - system:bootstrappers
      - system:nodes
      rolearn: arn:aws:iam::921483055369:role/EKS_Node_Role
      username: system:node:{{EC2PrivateDNSName}}
  mapUsers: |
    - userarn: arn:aws:iam::935840844891:user/Mithun          # Update your user arn here
      username: Mithun                                        # Update your user name.
kind: ConfigMap
metadata:
  creationTimestamp: "2020-10-19T03:35:20Z"
  name: aws-auth
  namespace: kube-system
  resourceVersion: "792449"
  selfLink: /api/v1/namespaces/kube-system/configmaps/aws-auth
  uid: 8135dcd1-90e6-4dfb-872f-636601475aca
	  
	  
RBAC:

kubectl auth can-i '*' '*'
kubectl auth can-i create ns  '*'


## Create Role/ClusterRole & RoleBinding & ClusterRoleBinding#####


kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: readonly
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get","list","create","delete","update"]
- apiGroups: ["apps"]
  resources: ["deployments","replicasets","daemonsets"]
  verbs: ["get","list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: full_access_role_binding
  namespace: default
subjects:
- kind: User
  name: Simon                           # Map with username
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: readonly
  apiGroup: rbac.authorization.k8s.io
================
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: readonly
rules:
- apiGroups: [""]  # v1 = pods services
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apps"]
  resources: ["deployments","replicasets","daemonsets"]
  verbs: ["get","list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: full_access_role_binding
  namespace: default
subjects:
- kind: User
  name: Bode
- kind: User
  name: Simon
  # Map with username
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: readonly
  apiGroup: rbac.authorization.k8s.io




Client Side:
===========
1) Install Kubectl & AWS CLI.

2) Configure AWS CLI(With Access Key & Secret Key of IAM User which you created in AWS IAM)

3) Get Kube-config file

   aws eks update-kubeconfig --name <EKSClusteName> --region <regionName>
   
   aws eks update-kubeconfig --name myeks25 --region us-west-1
   
   

4) try to access the cluster resources using kubectl ======	=====================================

==========
Prometheus Server 
- scrapes data/logs
- RULES Engine
   failedPods
   nodeDown 
   LowMemory
   Latency
- alertManager 

- NIH --  

landmarkfintech.com 

NYPD ==> 
  Black Friday 
    80% 
    scaling ==95%
  
--> 

ebs-blockStore
==============
Helm charts 
  custom app 
  open-source app 

  helm search repo

kubectl create ns monitoring
helm show values stable/prometheus 
helm install -f Prometheus.values.yml prometheus stable/prometheus -n monitoring

helm install prometheus stable/prometheus -n monitoring -f Prometheus.values.yml


helm install grafana stable/grafana -n monitoring -f grafana.values

helm upgrade -f prometheus.values prometheus stable/prometheus -n monitoring

kubectl edit deployment|service|rs|rr 
kubectl edit SERVICE:
   ClusterIP --> NodePort
   ClusterIP --> LoadBalancer
   NodePort  --> LoadBalancer
			
