

scaling in kubernetes:
   manual scaling:
      kubectl scale deployment/rs/rc/sts/ app --replicas 4      
   automated scaling:
      Horizontal Pod AutoScaling  - HPA  :
      ============================
POD AutoScaling --> Kuberenets POD AutoScaling Will make sure u have minimum number 
pod replicas available at any time & based on the observed CPU/Memory utilization
on pods it can scale PODS.
HPA Will Scale up/down pod replicas of Deployment/ReplicaSet/ReplicationController 
based on observerd CPU & Memory utilization base the target specified. 

What is difference b/w Kubernetes AutoScaling(POD AutoScaling) & AWS AutoScaling?
  AutoScaling group in aws :
     min     = 5
     desired = 5 
     max     = 100
 
 scaling policies aws :
    memory utilization   
       mem > 70% add servers      
    cpu utilization   
       cpu > 70% add servers 

  ScalingPolicy:
     memory utilization
       cpu -gt 80% 
       cpu -lt 40%     
     cpu utilization
difference b/w Kubernetes AutoScaling(POD AutoScaling) 
                   & AWS AutoScaling?


resources:
   requests:
     memory: "128Mi"
     cpu: "500m" 
deployment:
   replicas: 5  
hpa:
   min: 5 + 1 =   
   max: 50   
kubectl top pods  
kubectl top nodes  

error: Metrics API not available
    kubernetes addons/plugins:
      Metrics Server

Configure a Metrics Server on our Cluster4??
===========================================
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml


wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml


https://github.com/LandmakTechnology/metric-server
git clone https://github.com/LandmakTechnology/metric-server
kubectl apply -f metric-server/metrics-server-deploy.yml
=====================================================

ubuntu@master:
~$ kubectl apply -f metric-server/metrics-server-deploy.yml
serviceaccount/metrics-server unchanged
clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader unchanged
clusterrole.rbac.authorization.k8s.io/system:metrics-server unchanged
rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader unchanged
clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator unchanged
clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server unchanged
service/metrics-server unchanged
deployment.apps/metrics-server configured
apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io unchanged

metrics-server:
  nodes  
  pods 

RBAC objects:
  serviceaccount metrics-server 
     - user  
     - groups 
     - pods     
  clusterrole
     - pods/nodes [get/watch/list] 
  clusterrolebinding
     - 
  rolebinding
Deployment with HPA
==================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hpadeployment
spec:
  replicas: 2
  selector:
    matchLabels:
      name: hpapod
  template:
    metadata:
      labels:
        name: hpapod
    spec:
      containers:
        - name: hpacontainer
          image: k8s.gcr.io/hpa-example
          ports:
          - name: http
            containerPort: 80
          resources:
            requests:
              cpu: "100m"
              memory: "64Mi"
            limits:
              cpu: "100m"
              memory: "256Mi"

---
apiVersion: autoscaling/v2 
kind: HorizontalPodAutoscaler  
metadata:
  name: autoapp        
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment 
    name: hpaapp  
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 40
  - type: Resource
    resource:
     name: memory
     target:
      type: Utilization
      averageUtilization: 40
---
apiVersion: v1
kind: Service
metadata:
  name: hpaclusterservice
  labels:
    name: hpaservice
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: hpapod
  type: ClusterIP

-# Create temp POD using below command interatively and increase the 
-# load on demo app by accessing the service.

kubectl run -i --tty load-generator --rm  --image=busybox /bin/sh

-# Access the service to increase the load.

while true; do wget -q -O- http://hpaclusterservice; done  

Vertical Pod AutoScaling : 
Horizontal Pod AutoScaling  :
Cluster AutoScaling:


kubernetes = 15 hours   :
   kops / helm  /    
   stateless and stateful applications   
   volumes  
   configMaps and Secrets 
   EFK  / 
   Prometheus and Grafana  
   AMAZON EKS   
   Kubernetes Security     


Date  Local time  Change

Nov 05, 2023   2:00 am  -1 hour to standard time
Days: Mondays/Tuesdays/Saturdays  
Times: 7pm - 11pm EST Toronto/NewYork  Time     
Nigeria/Cameroon: 1am - 5am   
UK: 12am - 4am   




