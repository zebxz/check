CONFIG MAP AND SECRETS
ways to pass secret values so they are more secured.
****************************************************************************************************

there aew 2kinds of appl we generally deploy in k8
stateless
stateful   : we always need to maintain its state bc it captures data and we nid to ensure the data is stored and retrievable and vol concept in k8 is what we can use to achieve
that process

we also realize that why we v dif option when it cm to vol der are some other imp aspect to consider like:
diff vol option:
secret
nfs
hostpath
azuredisk
configmaps

4:48
env variables are  like secret variable ,, because the inf is stored in our source code mgt and so we shouldnt pass the env variable like this 
 env:
           - name: MONGO_DB_HOSTNAME
             value: mongosvc
           - name: MONGO_DB_USERNAME
             value: devdb
           - name: MONGO_DB_PASSWORD
             value: devdb@123


6:29      CONFIG MAP
######  HOW CAN WE DEPLOY THE ENV variable/file in a more secured way

kubernetes volumes :
==========================
==========================  by using:
Config Maps & Secrets
======================
We can create ConfigMap & Secretes in the Cluster using command or also using yml.
********************ConfigMaps:
  are used to passed non confidential information in key:value  pair that weren't 
  hardcoded/included in the Dockerfiles/code by Developers
   E.G we can use config map to pass stuff like 
    HOSTNAME
    USERNAME 
also if developers are required nt to code, we are then required to use config maps to pass the variables

e.g we are tryin to deloy an appl and we are using a kind of a tomcat image  n in that tomcat image hw do we access n manage tomcat
we hv a file called tomcat users.xml, so  we couldcreate a config map for our tomat users
   e.g  lets assume we hv diff users in diff , with diff rolesenv we are not hardcoding, these are dynamic variables
tomcat-users.xml  [  ]  
      dev = <user username="tomcat" password="tomcat" roles="admin-gui,manager-gui"/>
      uat = <user username="paul" password="admin123" roles="admin-gui,manager-gui"/>

****** we can now use config map such that when we wnt to deploy for each env we knw we hv diff users , in each of that env we can use configmap n secret for that purpose
bc we ar managing our appl n it has diff values for diff env 

tomcat-users.xml  
    <?xml version='1.0' encoding='utf-8'?>
      <tomcat-users xmlns="http://tomcat.apache.org/xml"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
                      version="1.0">
       
       <user username="tomcat" password="tomcat" roles="admin-gui,manager-gui"/>
    </tomcat-users>


****************************Secrets:
  are used to passed confidential information in base64 format e.g 
    PASSWORD
    SSH_PRIVATE_KEYS  
    dockerHub LOGIN password  
    tls certificate  
          
 *******************************OPTIONS FOR CREATING  CONFIGMAP:
1)Create ConfigMap Using Command:
  kubectl create configmap springappconfig --from-literal=db-username=devdb 
  kubectl create configmap springappconfig --from-literal=db-hostname=mongosvc 

should we use imperative or declarative approach to create config maps? we shud use file/declarative
2)
Create ConfigMap Using files/declarative approach:
yaml:
=====
kind: ConfigMap  
apiVersion: v1     
metadata:
  name: springappconfig   
data:
  db-hostname: mongosvc   
  db-username: devdb  
  db-password: devdb123       ************shud we create pw using configmap, ofcourse we can do that bt it is nt recommended;
                                                           ill just put here devd123, am creating pw here using configmap bt dis is nt recommended
      for us to create PW, WHICH OBJ SHUD WE be using ? kind , so we wnt shud we use to create secret, we can create secret using command like this:
Secret Using Command: 
kubectl create secret generic springappsecret --from-literal=mongodbpassword=devdb@123 

******************USING A FILE TO CREATE A SECRET
                  THIS IS A SECRET obj we are creating ............19:00
---                                                 
apiVersion: v1
kind: Secret
metadata:
  name: springappsecret
type: Opaque
stringData:   # We can define multiple key value pairs.
  mongodbpassword: devdb@123


kubectl api-resources                         16.15
kubectl api-resources | grep -i configmap           .... to get the api version for config map  

*************************************CREATING CONFIG MAP AND SECRET
***********************kubectl get secret  ............. to see our secrets
kubectl get cm   .... to get config maps

vi secret.yml    and paste  ,   

kind: ConfigMap  
apiVersion: v1     
metadata:
  name: springappconfig   
data:
  db-hostname: mongosvc   
  db-username: devdb  
  db-password: devdb123
-----
apiVersion: v1
kind: Secret
metadata:
  name: springappsecret
type: Opaque
stringData:   # We can define multiple key value pairs.
  mongodbpassword: devdb@123

....................to create the secret object9 : kubectl apply -f secret.yml
configmap/springappconfig created
secret/springapppsecret created
###########now we hv our secret n configmap for our configuration

we wnt deploy our springapp, we we hv our secret n configmap so we can mk some changes in the env of our manifaet file 
**************************************22:00
kind: Deployment
apiVersion: apps/v1
metadata:
   name: spingapp
spec:
   replicas: 2
   selector:
     matchLabels:
       app: springapp
   template:
      metadata:
         labels:
            app: springapp
      spec:
         containers:
         - name: app
           image: mylandmarktech/spring-boot-mongo
           ports:
           - containerPort: 8080
           env:
           - name: MONGO_DB_HOSTNAME               
             valueFrom: 
               configMapKeyRef:                        *************we dnt pass any values,
                  name: springappconfig
                  key: db-hostname                     it wil read the value frmthe config map that hv been created
           - name: MONGO_DB_USERNAME
             valueFrom: 
               configMapKeyRef:
                  name: springappconfig
                  key: db-username
           - name: MONGO_DB_PASSWORD   ************ even though we can create PW using configmaps but for best practice we use secret cos secret is for confidential data
             valueFrom:                   the value is coming frm the secret for best practice
               secretKeyRef:
                  name: springappsecret
                  key: mongodbpassword 

******************* now we can delete the previous springapp we deployed from previous class and deploy this file
vi spring.yml
kubectl apply-f spring.yml
now we can write data in the data base bc for us to deploy this appl we are making use of multiple objects  .....31:20

*****************************    APPLICATION DEPLOYMENT
if we are going to deploy an application what is involved????
LETS ASSUME the we are deploying the database as a stateful set , database stateful set or as we saw as a replica set
what else are we deploying as part of the database, we nid a storageclass, wich we wil be sseeing verysoon , thats part of vol, also persistent vol, pvc , this is one appl
we are deploying, we cud nid configmaps and secret ,  so one deployment requires all of this.. we'l also nid to deploy a service to mk this database discoverable
Stateful applications mongodb :
  - statefulsets/RS  
  - storageClass 
  - PersistentVolume 
  - PersistentVolumeClaim
  - configMaps 
  - Secrets   
  - service = ClusterIP   
stateless applications:  
  - deployment       .....recommended obj is deployment 
  - configMaps 
  - Secrets   
  - service - most of the time this could be NodePort / LoadBalancer     .......35:40

#######pls take note this is  very imp this is a key aspect  to underline and thats one thing that we are covering to mk sure u have a gud understanding when it cm to 
configmap n secrets


****************
WE AHVE ANOTHER EXAMPLE OF CONFIG MAP, THAT I WANT TO CREATE A CONFIGMAP WITH EXTERNAL VOLS, Create anoda configmap obj like this:
---
ConigMap As Volume Example
=========================
-# ConfigMap with file data
---  e.g am deploying an appl, i cud create a java webapp config like this, wher this tomcatuser.xml file,  am passing this as configmap, so u can deploy a configmap like
this and we ar goin to hv this config map in the system and if u want to access ur tomcat on the browser u can use this new pw and username to access it

apiVersion: v1
kind: ConfigMap
metadata:
  name: javawebappconfig
data:
  tomcat-users.xml: |
    <?xml version='1.0' encoding='utf-8'?>
      <tomcat-users xmlns="http://tomcat.apache.org/xml"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
                      version="1.0">
       <user username="devadmin" password="tomcat123" roles="admin-gui,manager-gui"/>
    </tomcat-users>


kops:
Ticket07: Install a kops cluster using company documentation
          https://github.com/LandmakTechnology/kops-k8s
kops

Suggestions:
 * validate cluster: kops validate cluster --wait 10m
 * list nodes: kubectl get nodes --show-labels
 * ssh to the master: ssh -i ~/.ssh/id_rsa ubuntu@api.class33.k8s.local

   kops export kubecfg $NAME --admin


# Complete Manifest Where in single yml we defined Deployment 
#& Service for SpringApp & PVC(with default  StorageClass),
#ReplicaSet & Service For Mongo.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springappdeployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      name: springapppod
      labels:
        app: springapp
    spec:
      containers:
      - name: springappcontainer
        image: mylandmarktech/spring-boot-mongo
        ports:
        - containerPort: 8080
        env:
        - name: MONGO_DB_USERNAME
          value: devdb
        - name: MONGO_DB_PASSWORD
          value: devdb@123
        - name: MONGO_DB_HOSTNAME
          value: mongo 
---
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodbpvc 
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodbrs
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
     metadata:
       name: mongodbpod
       labels:
         app: mongodb
     spec:
       volumes:
       - name: pvc
         persistentVolumeClaim:
           claimName: mongodbpvc     
       containers:
       - name: mongodbcontainer
         image: mongo
         ports:
         - containerPort: 27017
         env:
         - name: MONGO_INITDB_ROOT_USERNAME
           value: devdb
         - name: MONGO_INITDB_ROOT_PASSWORD
           value: devdb@123
         volumeMounts:
         - name: pvc
           mountPath: /data/db   
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017

a6773018340fe4c89b2cbc41d4db7611-1100378697.us-east-1.elb.amazonaws.com

nslookup 6773018340fe4c89b2cbc41d4db7611-1100378697.us-east-1.elb.amazonaws.com

DNS = Domain Name service to create A rcords  

app.com ---> 6773018340fe4c89b2cbc41d4db7611-1100378697.us-east-1.elb.amazonaws.com

kk --->  https://github.com/LandmakTechnology/kops-k8s 

landmarkapp.net---> 6773018340fe4c89b2cbc41d4db7611-1100378697.us-east-1.elb.amazonaws.com


https://github.com/LandmakTechnology/kops-k8s
remote add kk https://github.com/LandmakTechnology/kops-k8s 


managed or self managed  LB   

self managed =
   NGINX   


How does traffic get to the PODS/containers running in kubernetes.

IQ: Explain your experience in kubernetes? 
I have over 6 years experience in kubernetes performing the following;
- setting up a multi-node self managed kubernetes cluster using kubeadm 
- setting up a multi-node production ready kubernetes cluster using  kops    
- setting up a single-node self managed cluster using minikube and
  Docker Desktop for testing.
- setting up a multi-node managed production ready k8s cluster
  using amazon eks 
- troubleshooting issues from k8s setup/configuration or installation.
- maintaining, monitoring and upgrading the cluster components E.G   :
  scheduler, etcd, controllerManagers, kube-proxy, kubectl, kubelet,
  container-D, Kubernetes-cni[weave, flannel], kubectl-csi, apiServer  
  kops export kubecfg $NAME --admin 
- deploying applications and workloads using kubernetes objects:
    - pods/ReplicationControllers/ReplicaSets/DaemonSets,
      Deployments/StatefulSets/PersistentVolume/ConfigMaps 
      secrets
- using deployment as a choice kubernetes objects for stateless apps  
- using replicasets, volumes with persistenvolumes for Stateful apps  
- using statefulsets to deploy Stateful applications  
- rollouts and rollbacks of Deployments 
- deploying applications using controllerManagers [RC/RS/DS/STS/deploy]
- setting up Jenkins-kubernetes integration pipeline for full automation 
- deploying both Stateful applications and Stateless applications  
- making use of objects like; PV,PVC and dynamic storage classes to 
  persist data for Stateful applications [mongodb/ES/prometheus/jenkins]
- using configmaps and secrets for a secured application deployment   
- using probes for Health checks configuration in our deployments     
- using RBAC/namespaces/IAM for a secure access in the k8s. 

scheduler for scheduling pods on nodes   
- helm  [ helm create springapp ]  :
     charts-manifest files [ 
        deployment.yml, service.yml, ingress.yml, hpa.yml, rbac.yml 

- scheduling in kubernetes  [ NodeSelectors / NodeAffinity / PodAffinity ] 
- EKS  
- EFK   
- Prometheus/Grafana  

  

helm   
nginx-ingress1

















