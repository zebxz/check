frm pg 80
virtual private cloud
vpc is my isolated ntwrk within aws that i can control
subnets are created inside our vpc
am able to create an instance e.g a web sever in my subnet 
vpc is a regional service in aws
i can create my subnet in us west-2a  avai zone 
subnet is an avail zone resource
vpc ar global reource
its nt advisable to launch all my subnets in the same avail zones
 i needed a vpc so it can enable me to create other subnets wher i can place my resources

when i hv a vpc i hv to create a cyber block
we wnt to det hw many subnets can a vpc hv
when we created our resources wit aws it came wit a default vpc created by aws
so we hv:
aws default vpc created by aws .. its nt adviceable to launch my servers in the default
17:20 aws custom vpcs created by the user.. this has more security and more contrl over my resources
so far we hv been using default vpc


in aws we have:
1 global resources
2 regional resource
3 avail zones resource 
subnets


 AWS Regions: AZs  each region has avail zones
    us-east-1 =6 [ us-east-1a, us-east-1b, ... us-east-1f  ]  
    us-east-2 =3
    us-west-1 =3 
    us-west-2 =3


  vpc: virtual private network  
      cidr block    ip-addresses   
      10.0.0.0/16  =  65,536    
      172.0.0.0/24 =  256
      172.0.0.0/25 =  128
      172.0.0.0/26 =  64
      192.0.0.0/28 =   16
      192.0.0.0/32 =   1
      10.0.0.0/n where n is the subnet prefix [16, 17, 18,---32] 
      no of addresses = 2^(32-n) 
         n=16, = 2^32-16 =2^16 = 65,536
         n=24, = 2^32-24 = 2^8 =  256 
         n=28, = 2^32-28 = 2^4 =  16  
         n=32, = 2^32-32 = 2^0 =  1 
[140 ip addresses]
  vpc_tesla_dev 
     10.0.0.0/24  = 256 addresses 
    subnets:
       publicSN1 
         10.0.0.0/25 = 128 addresses 
           10.0.0.0, 10.0.0.1, 10.0.0.2, ... 10.0.0.127
       PrivateSN1
         10.0.0.128/25 = 128 addresses
         [10.0.0.128, 10.0.0.129, ..., 10.0.0.255]

AZ resources
  subnets  

   [0,1,2,3] = 4

  jumpserver = publicSN 192.0.0.0/25 
    192.0.0.24 
    52.91.72.142 
    ssh -i "dominion.pem" ec2-user@52.91.72.142
  webServer = = publicSN 192.0.0.0/25 
    192.0.0.10
    
    ssh -i "dominion.pem" ec2-user@54.84.126.250
  
  DBSERVER = privateSN, 192.0.0.128/25   
    192.0.0.186
    ssh -i "dominion.pem" ec2-user@192.0.0.186


Dominion Systems  
Oct 2021 to May 2022  
DevOps Engineer

Load Balancers/webservers:
  nginx  
  haProxy 
  http
  users ----> ELB/LB ---->appServers

    ssh simon@3.138.178.87    
    http://3.138.178.87:80
==============================================================================

frm pg 80
virtual private cloud
vpc is my isolated ntwrk within aws that i can control
subnets are created inside our vpc
am able to create an instance e.g a web sever in my subnet 
vpc is a regional service in aws
i can create my subnet in us west-2a  avai zone 
subnet is an avail zone resource
vpc ar global reource
its nt advisable to launch all my subnets in the same avail zones
 i needed a vpc so it can enable me to create other subnets wher i can place my resources

when i hv a vpc i hv to create a cyber block
we wnt to det hw many subnets can a vpc hv
when we created our resources wit aws it came wit a default vpc created by aws
so we hv:
aws default vpc created by aws .. its nt adviceable to launch my servers in the default
17:20 aws custom vpcs created by the user.. this has more security and more contrl over my resources
so far we hv been using default vpc
the vpc we are creating wil be a regional service


in aws we have:
1 global resources
2 regional resource
3 avail zones resource 
subnets


 AWS Regions: AZs  each region has avail zones

AWS ACCOUNT:
1. Global resources    
2. Regional  resources
     vpcs---
        aws default vpcs created by AWS 
          ec2 instances [jumpserver, appServer]
        aws CUSTOM vpcs created by the user   
          [secured and gives users more controls]  
          ec2 instances [jumpserver, appServer]    

3. Availability zones resources  
      subnets  

  AWS Regions: AZs 
    us-east-1 =6 [ us-east-1a, us-east-1b, ... us-east-1f  ]  
    us-east-2 =3
    us-west-1 =3 
    us-west-2 =3

  aws ec2 describe-regions
  aws ec2 describe-regions --all-regions
https://gist.github.com/karstenmueller/98381c897178a260be8c08f98ffe2c3e

26:00
Ticket0011:
  Create a VPC for paypal client with the 200 addresses   
  cidr block:  0 - 32 
    10.0.0.0/16. 
    172.0.0.0/16  
    192.0.0.0/16  
      subnet prefix [ 16, 17,..., 32 ] 
      10.0.0.0/n  where n is the subnet prefix  
 no of ipAddresses  = 2^32-n     
  cidr block:    no of ipAddresses    :  
1. 10.0.0.0/32    2^32-32=2^0   = 1   
2. 172.0.0.0/28   2^32-28=2^4   = 16  
3. 192.0.0.0/24   2^32-24=2^8   = 256  [ 0, 1, 2,..., 255 ]
4. 10.0.0.0/20    2^32-20=2^12  = 4096  
5. 172.0.0.0/16   2^32-16=2^16  = 65,536

Ticket0011:
  Create a VPC for paypal client with 200 addresses in 2 subnets  
    cidr block:      address range:
1. 10.0.0.0/32       [10.0.0.0]
2. 172.0.0.0/28      [172.0.0.0, 172.0.0.1, ..., 172.0.0.15 ]   
3. 192.0.0.0/24      [192.0.0.0, 192.0.0.1, ..., 192.0.0.255 ]
4. 10.0.0.0/20
5. 172.0.0.0/16

Ticket0011:
  Create a VPC for paypal client with 200 addresses in 4 subnets  
  vpc      = 10.0.0.0/24    = 256 [0, 1, 2, 3,..., 255 ]    
  subnet1  = 10.0.0.0/28    = 64 [ 0, 1, 2, ...,    63  ]   
  subnet2  = 10.0.0.64/28   = 64 [ 64, 65, ...      127  ] 
  subnet3  = 10.0.0.128/28  = 64 [ 128, 129,, ...,  191  ]   
  subnet4  = 10.0.0.192/28  = 64 [ 192, 193, ... 255  ] 

    2*2*2*2*2*2=2
    32-28 = 4 
  256/4 = 64  



Ticket0012:
  Create a VPC for paypal client with atleast 1024 addresses in subnets  
  NB: The maximum no of addresses a subnet can have is 256  
      1024/256 = 4  
  vpc      = 172.0.0.0/22    = 1024    
  subnet1  = 172.0.0.0/24    = 256  [ 0, 1, 2, ..., 255  ] :
      172.0.0.0, 172.0.0.1, 172.0.0.255  
  subnet2  = 172.0.1.0/24    = 256  [ 0, 1, 2 ...,  255  ] :
     172.0.1.0, 172.0.1.1, 172.0.1.2, 172.0.1.255
  subnet3  = 172.0.2.0/24    = 256  [ 0, 1, 2, ..., 255  ] :
      172.0.2.0, 172.0.2.1, ...,  172.0.2.255  
  subnet4  = 172.0.3.0/24    = 256  [ 0, 1, 2 ...,  255  ] :
     172.0.3.0, 172.0.3.1, 172.0.3.2, ... , 172.0.3.255


  10.0.0.0/25  
jumpserver:
  privateIP = 10.0.0.54  
  publicIP  = 18.191.89.63
  ssh -i awskey33.pem ec2-user@18.191.89.63
  ssh -i awskey33.pem ec2-user@10.0.0.54

 security is inherent in our environment    

dbserver:
  privateIP = 10.0.0.156
  ssh -i awskey33.pem ec2-user@10.0.0.156
  ssh -i "awskey33.pem" ec2-user@10.0.0.156

Webserver:
    10.0.0.220
    13.59.100.138
    ssh -i "awskey33.pem" ec2-user@13.59.100.138
    ssh -i "awskey33.pem" ec2-user@10.0.0.220  


  users ---->http/80, https/443 webserver [13.59.100.138]    
  admin ---->ssh/22 
