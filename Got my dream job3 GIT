 LINUX , scripting, git , maven, tomat, sonar, nexus, jenkins , aws, docker, k8, terraform, ansible, k8/helm 

     
    ******* bc this file was too long,  Use the "Got my dream job3, GIT. REAL...
 

LINUX , scripting, git , maven, tomat, sonar, nexus, jenkins , aws, docker, k8, terraform, ansible, k8/helm 
In our env, we use LINUX OS for file,process,package,security mgt, GIT FOR VERSIONING, MAVEN FOR BUILD




                                                     GIT 1

GIT, VC- VERSION CONTROL, DVC, SCM, creating git account & initialize it,  GIT SHOW, GIT COMMIT ,  PULL , CLONE , GIT COMMANDS , GIT INSTALLATION, DEBUGGING
   WORKING AREA (workshop) git add to move to staging >>> STAGING AREA (show room) git commit  to move to local repo >>>> LOCAL REPOSITORY AND THE (git push) >>>>> REMOTE REPO 

1;30;49 developers carry out their job in the working area
1:39:27  Dvelopment takes place in the working area 



Git and SCM 
============
Landmark-SS -                 Paypal:
===========                   =======

Applications are the output of softwares
Applictaions are developed by developers
******* SOFTWARE Engineers and developers develop applications


******** we are deploying a web application for our client paypal , once it is developed, tested, built, we monitor the application for paypal so the customers can connect to
paypal website and carryout transactions
Develops, Tests, Builds, deploys & monitors applications 
    Applications are the output from Softwares   

paypal:
  Releases:
   Releasing an application is taking/deploying it to the client
   In realtime we have multiple Releases.     

*** once the app are developed they are released to the client 
release1 = version1   = 1000lines of code  
   echo 'Welcome to LandmarkTech'

release2 = version2  = 2000lines of code  
   echo 'Welcome to Paypal'
   echo "Your convenient payment gateway"

Release3  = version3  = 1000 lines of code  
echo "Paypal the best payment gateway"

**** but if The client is not happy with the latest version of the application.   
What can be done??? RollBack
eg we can roll back from "version2" to "version1"

for us to be able to rollback to version1 will depend on if we have the record of version1 (versioning) 
we need versioning, 
version is also important for us to move from versin1 to version2 and from version2 to version3

Rollout   --> version1 --> version2 ---> version3  
RollBack  --> version3 --> version2




                                            GIT
Git is a Distributed Version Control systems. DVCS
In our environments (Landmark) we use Git for Versioning


                                                                    VERSIONING
In the diff VCS , WE have a local system and in the local system there are developers writing code

Version control systems come in three main types: 
1)Local
2)Centralized
3)Distributed
Local systems are simple, used for individual projects and changes are tracked locally. 
Centralized systems maintain a central repository where all changes are stored, providing quick access for teams.
Distributed systems allow each developer to have a local copy of the
repository, fostering collaboration and redundancy. 
In engineering and systems theory, redundancy is the intentional duplication of critical components or functions of a system with the goal of increasing reliability of the system,
usually in the form of a backup or fail-safe, or to improve actual system performance, such as in the case of GNSS receivers, or multi-threaded computer processing.




      Versioning in Software Development:   ( THE PROS & CONS OF the 3types of VCs)
        ===================================
Version control systems = VCS:
A local version control system is a local database located on your local computer, in which every file change is stored as a patch. Every patch set contains only the changes made to the 
file since its last version. In order to see what the file looked like at any given moment, it is necessary to add up all the relevant patches to the file in order until that given moment.

  Local = version1, 
          version2,[5000LINES ] 
          version3 [2000LINES ] 

   cons: Single point of failure                 **** no other option available to access its data or to resolve the issue
         lacks collaboration                   ******** bc developers cant relate
         in-efficient use of resources including time  
         can't RollBack        *** ie , if the local environment goes down its a serious problem

  
  Centralised:     *** here we create a server, All changes are stored in a central repository
    cons: can't RollBack
          The central server can fail    ** the server wher developers have saved data can fail 

  pros:  
developers can collaborate to an extent



Distributed VCS:  Each developer has a complete copy of the repository ,Can be more complex to set up and use. 
===============
GIT: DVCs 
  Distributed Version Control system 
  - Git manage data as snapshots. 0 / 10 / 20 / 30 / 40 / 50 / 60 / 
  - It takes a picture of what all your files look like 
     at that moment and stores 
    a reference to that snapshot.

  Benefits: Nearly every operation is local
            git has data intergrity
            Git generally only adds data
            Rollout and RollBack  
other DVCs:
SVN --> Sub Version
CVS --> Concurrent Version system
TFS --> Team Foundation Server
Git --> 95% plus of companies are using GIT   


Git is a Distributed Version Control systems. DVCS
In our environments (Landmark) we use Git for Versioning.  



                                                         SCM
git comes with source code managers
in each loCAL environment gitbash is installed so it captures everything that is done with relative ease
so before we even submit the codes from our local env to scm, GIT  is already installed
 *** meeeee.... gitbash can be installed directly on our windows computer or remotely on linux using mobaxterm    ... my understanding from git2; 14;35
 MobaXterm is a versatile and powerful tool for interacting with Linux systems from a Windows machine, its a windows app designed for remote computing.
 



SCM = Source Code management
=======================-====  
SCM service plaforms :
  GitHub - MS
  GitLab
  BitBucket (Stash) - A
  awsCodeCommit 

IQ: As a DevOps Engineer, what are your roles & responsilities
    in Versioning with Git?
Answer:
  our main task is project onboarding
  1. We ensure that Developers environments are configured and secured 
     We create an enabling environment for Developers to code/Develop ( to get to work)
       and that includes: setting up DevelopmentServers are created in AWS/GCP.  
       share login details with Developers/Team [ userName/password ]   ( so they can connect and get to work)
       Ensure that git package/Software is installed 

*** at this point we realise that our main task is project onboarding if approached by a cx to help mange their applications with git 

2.  Project Onboarding:   we onboard projecs by;
   1. create a github account for your organisation or self              ***** if necessary or in rare cases you may hv to create a github account for the org or yourself
   2. Create organisations where applicable in a SCM ['GitHub']  
       url =  https://github.com/landmarkss
   3. Create teams in SCM/github and assign members[Developers, etc.]                   ***** 54:30
       Team url = https://github.com/orgs/landmarkss/teams/paypalteam
        assigning members to teams using GitHub account userName/email
           oogunbiyi22, amambua, pride22, Anyong87,    Ngohtez,  angeltemmy 

     go to teams and then select settings
       Grant permissions/roles to team members and collaborators:           ******** excess priviledge which is security vulnerability
           read  -- you can view codes   
           write -- you can view codes and make changes  
           admin/maintainer - ownership  

******* after accounts, organisation and teams have been created we then create repositories and assign members/write permission

   4. Create repositories in SCM [GitHub] 
      repo url = https://github.com/landmarkss/paypal

   5. login into github
       website = https://github.com/                   ********website to create git account  and info needed
            name      = Amambua Ivoline Nkimih
            email     = amamivoy@gmail.com
            userName  = amambua
            password  = Admin@123.. 
            https://github.com/landmarka  

       website = https://github.com/
       login url = https://github.com/login
            userName  = amambua
            password  = Admin@123.. 


login url = https://github.com/login
url =  https://github.com/landmarkss
Team url = https://github.com/orgs/landmarkss/teams/paypalteam
repo url = https://github.com/landmarkss/paypal

6. Ensure that Git and relevant IDEs (integrated development environment) are installed by Developers 
IDEs with Git integration offer a range of features that enhance the development workflow.These integrations allow developers to perform Git operations directly within the IDE, such as committing changes,switching branches, 
and managing branches. 
They also provide tools like visual diff viewers and merge tools to facilitate the merging of different branches. Popular IDEs with Git integration include Visua
An IDE (Integrated Development Environment) is software that combines commonly used developer tools into a compact GUI (graphical user interface) application. 
It is a combination of tools like a code editor, code compiler, and code debugger with an integrated terminal

                                    

                                 GIT INTSTALLATION
   GIT INTSTALLATION

Git Installations
-----------------
Git Installations differs depending on your operating system:
Pre Requisite Software Download/ Registration :
Install git in Windows   :  
  Install gitbash @ https://git-scm.com/downloads [git.exe]
  $ git -v  OR git --version
    git version 2.38.1.windows.1

Install in RedHAT Linux servers:
    sudo yum install git  -y      
                            
ipaddress  52.10.100.198     9:06,   with this information am able to access my server bc this server was configured for password authentication...
username   ec2-user                      with the ipaddress from aws i login to mobaxterm & to install git: run sudo yum install git -y
password   admin123

Install in ubuntu Linux servers:
    sudo apt install git  -y 
=============================
remote repository in github 
https://github.com/landmarkss/paypal
mkdir paypal && cd paypal


                        ****** the project we want to manage is paypal

1)
************   Assume the role of a Developer
We are developing for our paypal FinTech client. [Pp       -
1. create a directory for Development   
   mkdir paypal && cd paypal  
paypal is out project dir 
git2.... 11:40 on git inmobaxterm we first cd document then mkdir but on git in windows we mkdir and cd into it

2. Initialise this directory to keep track of 
   any change or changes in the files/codes       ... by running git initM
2:25:00 Git init creates a local repository and initializes the project directory
so we are now in the local repository

******** whenevr we add a file or make changes to a file, we comment-m


2)                                       GIT COMMANDS 


Git Commands:
  git status --- tells us if our local repository/project directory we are creating has been initialized as a repository or not and also if any file has beeen commited to our repository
  git init   --- the first command       
    creates a Local repository [.git]  
    initialises the git repository
****without git init command, that is not a development repository, it  will not support any git command
git log           = to list the number of commit that we have 
                     ( so we git commit  -m "first version", then git log) then we get the commit id 

then next


3) the next stage is to move our files form our working area to the staging area   1:30:31( bc the command "git status" shows us "nothing added to commit but untracked files present, meaning that when the file is like this its inthe working area)
developers carry out their job in the working area
TO create a file : touch filename
so we touch a file in our working area
(in orderwords, task in our working environment is not tracked by git)
 for it to be tracked by git, we move it from our working area where development is taking place to our staging area
     ( next video 46.39, git add. can be used to add 1file)
git add filename : git add boo
       OR 
   git add.

one file 
git add filename
few files
git add.
many files
git add*

   ****** files in the working area appear in RED

working area to staging area   
 (workshop)       (staging room)



4)      TO COMMIT the changes

In our staging area  >>>>>>>>>>>> local repository
     git commit -m  "   "

2.06  
git commit -m "first commit" (our msg bc it is our first version)
the git commit  will move the changes to ( i bliv this shud be frm) the working area and create  a new commit with a commit id and that new commit is like a new version created 
but you cant run this commit if we dnt knw who you are ( for data intergrity) for trcaking who did what
SO you have to be authenticated with the command;
  global configuration  ==  git config -- global usre.email "your email address'
                            git config  --- global user.name "yourname"
then we run git log to check , after which we run git commit -m  and git log again to check


5) local repository   >>>> Remote repository
       git push ( push changes from local environment to remote repository)



[obim@demo22 paypal]$ 
 git config --global user.email "legah2000@gmail.com"
 git config --global user.name "Simon Legah"

1:37:00
with THE "git commit command -m " a version is created with a version number[commitID]  

git init          = to initialised a git empty repository
                    create the default branch[master, main]
git status        =  shows the state of the working directory and staging area,to know if the project directory has been initialized, helps to track files location  *** to check if our working tree is clean or not 
                      tells eher files are located are all the files being trcaked by git or not 
git log           = list all commits  ( with their id) all versions
1:36:20 git add           = move files to staging area from working area
git commit -m     = move files to the local repository FROM STAGING AREA , it creates a new version of the application
                    good commit message for tracking changes created by authors are recommended
git push            = from the local repo to the remote repo
git reset        = to go back to working area form staging area
git show commit   =

git2 :  1;07;00
git clone   =     dodwnloads a version of the entire development work/project in your work environment
git pull   = pulls the changes to your local env

       GIT SHOW COMMIT 

git show - shows  what happened in a commit after we  run git log (to get the commit id)

eg with the id of a commit = 138dccf
       git show 138dccf

and it tells us this ocmmit wa sfirst done by simon and on this particular day, it was a new file, and thers was no changes to the file 
the next thing for us to ensure is that the job that we can see in simon local environment, has a version been pushed to our SCM (where we hv a repository paypal)
is oke able to collaboarate with simon?
for them to be able to collaboarate the job simon has done has to be pushed to our SCM 

1:39
git remote -v    = to tell us if we have any repository detail in our local environment 
Tells us how many remote repository we are managing 

1:40


5i) to add a repository  URL in our local environment 
      git remote add paypal https://github.com /zebxz/paypal
 git remote add paypal https://github.comzebxz/paypal    
     i just realised that the "paypal i" before https thats the aiiasname not the last paypal

( the repository url in my local environment is being replaced by paypal, so i am using an alias paypal name with the repo url )

******* git remote add is done so that other collaborators can have access to the task in the SCM 
we hv the paypal repo in the SCM so i have to add it in my local environment so i push commit from my local repo to remote repo in SCM 




 git push aliasName branchName  
eg;  git push pp master                   ***** Pushing to the master banch

6)   GIT PUSH      (alias Name )master
                
            (alias name)
  git push  paypal master (from my local environment to general SCM)
  username for https://github.com:ceekeh
password for https://\legal 2045@github.com: token
we have to create a token bc git no longer accepts password

 *** meee*** GIT4, 1:20;40  eithergenerate token or create ssh key 

 ******* go to github 
select settings aand developers settings 

                   token classic
select personal access token and generate token    (less than 30days )
selecet all repository 


7)   GIT PULL  to see the work others have added to the project i have to pull to my env

After the task i pushed has been executed/worked on by other developers
 === GIT PULL paypal master 

remote repository in github 
https://github.com/landmarkss/paypal

  git remote -v 
  git remote add aliasName repoURL  
  git remote add paypal https://github.com/landmarkss/paypal
 git push aliasName branchName  
  git push paypal master  
  [obim@demo22 paypal]$ git push paypal master
Username for 'https://github.com': legah2045
Password for 'https://\legah2045@github.com': 


TO  PULL OR CLONE   ( am nt sure what i was tryin to say here)

1) mddir
2) init
3) gitadd (working to staging) OR git reset (staging back to working)
git commit "m / config
git remote add
git push
pull or clone
config
git add
commit
push


                    DEBUGGING
git reset: moves files from staging area back to the working area
git revert commit ID: Deletes the latest committed files in d local repo for a specific commit (deletes the files even in d working area from wher they were sent to staging
git clean  -n: indicates files to be deleted in the working area
git clean  -f: cleans the working area 



##########

  git add 
  git init  

 touch list  
 echo simon >> list 

 workingArea  stagingArea LocalRepo RemoteRepo  :
   git add *   
              git commit  
                           git push 

  git add fileName  
  git add .   
  git add *  



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

                                        
                                                                      GIT 2
MANAGING APPLICATIONS, STAGES OF DEVELOPMENTAL PROCESS, GIT PULL/CLONE,  GIT BRANCH,  PULL REQUEST , TO BRING THE CHANGES FROM THE REMOTE REPO TO THE LOCAL REPO

                                                  MANAGING APPLICATIONS
* the master branch is the most most critical branch bc production goes to the market from the master branch therfore, it is better for development to start in development
branch so if there are any changes in the dev branch that needs to be applied in the master branch then more work has to be done. so before we deploy from dev to master
we need to ensure that its actually what is wanted .
make sure the work is reviewed before its merged in the master branch



MY QUESTION:

                                    watch the video again and verify no. 9  **** bt i can also ask prof  , in what branch do we run git push ??  .. the working/develo branch
No. 9       
 git merge dev               = if we are satisfied with the changes (done in master in local repo)     ****** i think this is an error cos i thought the push was to master
10) git push aliasName --all     = git push pp --all      ******* in what case scenario can dis happen, to push to all, and frm what branch is this command ran



jenkins 1&2 
5:30 ...... commit is a function of branches


whatever paypal is going to do is captured as releases



we hv to ensure that we have a local repository in our env by runing :
git remote add paypal https://github.com/zebxz/paypal
ie we choose any alias name of our choice in this case' paypal' and with the url of our remote repo , we create/add a local repo in our environment 

****** to check if we have a local repo in our env we run:   git remote -v 
to push from our local repo to remote repo = git push (aliasName) master



from the diagram below, i bliv in each developers local env there is a working area, staging area and local repo/master (i bliv also called master)
so working area, the files are moved to the staging area then to the local repo and from there to the dev branch in the  remote repo in github
from his diagram of github,  i bliv since we push frm our local repo which we called paypal ( paypal signifies the pushes that were made from our local repo which we called 
paypal). while master is the master branch which is the final stage that leads us to production 




                                                  MANAGING APPLICATIONS
             APPLICATIONS ARE THE OUTPUT FROM SOFTWARES


This process includes develops, tests, builds, deploy and monitors applications
our main focus is on development and when applications are developed multiple versions of the application can be developed

we need to use a version control system that brings all the advantages of version control and that is a distributed version control system bc it keeps and tracks record
There are other platforms we can use for SCM like git lab, git hub, git bucket and aws code commit


a good example of DVCs is git
in our environment (landmark) WE USE git for versioning 


  29.10   STAGES OF DEVELOPMENTAL PROCESS


  working area        staging     localRepo     RemoteRepo[GitHub]    :
  -----------        -------      ---------     ------------------  
  Untracked files    git commit    git push >>>
    red                green     https://github.com/LandmakTechnology/paypal.git
git add

                   GIT PULL/CLONE
Git pull: pulls changes to your local environment
git clone: downloads a version of the entire development work to your local environment

repoURL =  https://github.com/zebxz/paypal
 git clone  = https://github.com/the peson's organisation name/repository name

this is done to be able to pull  the task done by others to my own local environment/working area
then i have to config to be able to execute the same commit/ be part of the project
this is to be done by each member/collaborator of the project


                   OR 
Git pull (the persons repo name) master

                                                  github
                                                Remote/repo
                                                 paypal/
production environment  >>>>>>>...               master
                                                  stage   branch                          <<<<<< staging/QA  environment  
                                                   dev  branch                         <<<<<<<<< dev development
1:12:00 whatsoever is in dev branch is deployed to dev environment, from stage branch to  staging/testing/QA  and from master to production/market
                                                ^                ^
                                                ! !              ! ! 
                                         git    ! !              ! !   
                                         push   ! !git           ! ! git
                                                ! !pull          ! !pull
                                                ! !              ! !
                                                   
                                            Norbert              legal
                                         working area            working area
                                         staging area            staging area
                                           local repo             local repo





                                            GIT BRANCH
        **** 1:53:04       ( our branch rule is that we dnt work directly in the master branch, bc master branch deploys to production)

GIT4, 57;03... by default Git has a master branch, which is same as trunk in Subversion (SVN), usually a branch is created to work on a new feature 
once the feature is completed, it is merged back with the master branch and we delete the branch
****meeeeee****  but a branch is a line of production so what does it mean " a branch is created to work on a new feature"
***** FROM THEIR DIFFERENCES, I realise that; TAGS are recommneded to be created from Master branch    WHILE   BRANCHES can be created from any branch 
  SO technically, a branch created from the master branch is a 'feature*


  one branch = 1line of production
A branch is a line of development 
 A file must have been moved to the staging area before it can be pushed

dvelopment branch : writing our code
stage branch : then moved to stage and once its done 
master branch: deployed to production environment , taken to the market



***** in development its good to have multiple dev lines so that if there is an issue with on line, it can be resolved from the other line
 
******* The master branch is the upstreamBranch for the dev Branch  
  The dev branch is the downstream of the master branch   

 


******* i think this was me summarizing the steps
    first ensure you are in the project directory

1) git branch               = to confirm we have created dev
2)git branch dev             =  we run this command to create dev branch
3) git switch dev             =  change from master to dev and vice versa
4) we vi into app.java file
5)we git add.
6) we commit "m"
7) git switch :                 = move from dev to master
8)git diff dev (commit ID )    = we run this in master to review the changes that happened in dev             
                                  git diff (b0f7fcf) ie ID of the commit done in dev branch                by d push command, i bliv  we can push to either branches
     GIT4;  git diff (dev or stage) to see the changes then vi into the file & delete the conflict ie (the errors>>> & its lines)
         GIT4: Git diff pp/master   = to see the changes we are bringing over  (from the "master&dev branch" in the remote repo)+++
9) git merge dev               = if we are satisfied with the changes (done in dev in local repo)    
10) we ls  / get log    ( we see head >master,dev)   = to ensure all changes  from (git merge dev ) were applied in the master branch (ie we hv all the files/commit in the master )
11) git push aliasName --all     = git push pp --all ( this is done in master in our local repo )        ******* in what case scenario can dis happen, to push to all
                                     creates dev branch in remote repo and pushes the chnages from local repo to dev/master in remote repo

git push aliasName branchName       to push to a particular branch


**********************   The master branch is the upstreamBranch for the dev Branch  
  The dev branch is the downstream of the master branch   



Git fetch         =  it brings changes in the code from the remote repo to the local repo 
Git pull alias name branchname   =   it brings changes in the code from the remote repo to the local repo and working area
Git clone         =   it brings the entire code to the working area


                                               


github
                                              Remote repo
                                                paypal
                                                master
                                               bugfix         >>>>> whenever ther is an error/bug in the code, we create a bug fix branch from the master
if the org say they want a new feature >>>>     feature
we create a feature branch  from                 stage
 the master branch                                 dev



1:49:00 ********To expand more on Ticket001 above:
                        PULL REQUEST : PR ( in the remote repo)
1:33:00  in the remote repo in github, in the dev branch, we added a new line to the app.java file , after which in both branches we see the "compare & pull request" notification, i can add a branch protection rule, eg  
PR is used to review changes in one branch b4 merging in another branch                                                                               the senior software engr must review before any merge is completed
this is recommended for any merge in the master/release branch

eg
compare and pull request:  when a change is done in dev branch , to create a a review, we can see this option in the master branch informing us of a change , so we use the 
option



***********
git push aliasName branchName  
eg;  git push pp master                   ***** Pushing to the master banch

git branch           = list the branchless 
git checkout/switch branch name =  git switch dev
git push aliasName --all  = push changes to all branches  ie to the master and dev branch in github (automatically creates a  dev branch if there was no dev branch before)
git push pp --all 
git branch - v             =  display all branches in your repo and also tell you what branch your currently working i
git remote remove alias Name    =  remove repo from the local environment 
git remote remove repo URL 




**************** 1:52:27   TO SEE THE DIFF BTW GIT PULL & GIT FETCH, WE will use the illustration below;
   git fetch --> It brings changes in the code to the LocalRepo   *** 2:10:00 ( this requires a review before merging) , MOSTLY recommended
  git pull --> It brings changes in the code to the localRepo and & Working area    ( this merges without a review)

    
     TO SYNCHRONIZE/BRING THE CHANGES FROM THE REMOTE REPO TO THE LOCAL REPO
         so for us to merge the changes in the remote repo to the local repo 
for us to update the changes we can run git fetch or git pull
git fetch pay = git fetch
but when we cat the app.java file we see its not yet updated bc git fetch doesnt merge the changes (bc git fetch brings the changes to only the local repo) so we run git diff
git diff pp/master = git diff to review the changes ( pp is prof repository alias name) 
git merge pp/master = to merge the changes


1:53:48******* in the remote repo in github, he also created a stage branch from the master branch, then updated the app.java file 
         got the pull req in the master baranch, accepted reQ 
     finally in the local repo, he run the git pull (git pull pay master) command to bring the changes from the remote repo to both the local rep & working env.

   
 ********  git push alias name --all          (so i created a new repo with aliasname "ok")
this will create the branches in other repositories that didnt have such branch **** but first, you have to specifically push to the master branch in that/those repo
eg in the local repo when the stage /dev branch is created in the master branch and you run git push alias name --all , (alias name ie the new repo) all the repositories will equally have a dev and stage branch and all
other effected changes/commit  



  ************** END*************

git pull pp (ie alias name)
                 OR
git fetch (aliasName) ie PP    
Git diff pp/master   = to see the changes we are bringing over  (from the "master&dev branch" in the remote repo)
then git merge pp/master    = form local repo to workin area bc we used git fetch & git fetch brings the changes to only the local repo


 the master branch is the most most critical branch bc production goes to the market from the master branch therfore, it is better for development to start in development
branch so if there are any changes in the dev branch that needs to be applied in the master branch then more work has to be done. so before we deploy from dev to master
we need to ensure that its actually what is wanted .
make sure the work is reviewed before its merged in the master branch

codes form the dev branch is deployed to the development branch env, code from the staging branch to testing/QA/UAT env and from the master they are deployed to production
from the master we can create a feature branch or a bug -fixed branch 
           


QUESTION 
are we going to be pushing and deploying these codes , also developers are going to be using diff terminals or if they are already using github wil they be obligated to use gitbash bc its a by product of github
ANS;
gitbash is a git terminal that can be uased to preocess git processes frm end to end & run git commands, to install git inur env is to install gitbash
if ur using windows u can use a package manager to install git like yum or apt for ubuntu
we are trying to manage tasks as if we are developers, trying to perform the functions of developers
now what will developers be doing & what wil devops engr do at work?
developers wil be using git for version to write code, using github to push their code for collabortaion
however, as devops engr, most of our work will be on git bc we will be cretaing stufffs like teams & adding memebers, creating repositories when we hv a project, & if need be creating organisations.
that is the work of devops engr, we are nt going to be writing codes, but there are other kinds of codes which we are goin to be writing which we will see eventually
they wnt be hard core coding, its going to be more of like diff scripting languages like bash shell , we hv a git hub repository with a lot of bash shell which you can just modify.
and when we fet to k8, we are going to do k8 manifest files, writing files that are used to deploy app in k8
when we get to docker we will write docker files, when we get to ansible we will write ansible play books, those play books will be committe dto our github account

   //////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

                       GIT 3

User@LandmarkTech MINGW64 ~/Documents/paypal (master)
$ git remote -v
pp      https://github.com/LandmakTechnology/paypal.git (fetch)
pp      https://github.com/LandmakTechnology/paypal.git (push)


  git push aliasName branchName  
  git push pp master  


 repoURL = https://github.com/LandmakTechnology/paypal
 git clone https://github.com/LandmakTechnology/paypal  

git config --global user.email "mary@gmail.com"
git config --global user.name "Mary"

[ec2-user@demo33 paypal]$ git remote -v
origin  https://github.com/LandmakTechnology/paypal (fetch)
origin  https://github.com/LandmakTechnology/paypal (push)

  git push aliasName branchName  
  git push origin master 

[ec2-user@demo33 paypal]$  git push origin master
Username for 'https://github.com': legah2045
Password for 'https://legah2045@github.com': [Admin@123] PersonalAccessToken   
Password for 'https://legah2045@github.com': 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


 
with THE "git commit command -m " a version is created with a version number[commitID]  

git init          = to initialised a git empty repository
                    create the default branch[master, main]
git status        = to track files location
git log           = list all commits/versions     
git add           = move files to staging area from working area
git commit -m     = move files to the local repository FROM STAGING AREA
                    Creates a new version of the application
                    good commit message for tracking changes created by authors are recommended

Legah 
Mary  
  paypal-01 = Legah = git commit -m "First commit"    
  paypal-02 = Mary  = git commit -m ""    
  paypal-03 = Mary  = git commit -m    
  paypal-04 = Legah = git commit -m  


git show commitID  
Git commands:
  git init/show/add/commit/status/log/clone/pull/push/remote -v/ remote add/config/version  

Git Branch :
  In git a branch is a line of Development  
    development branch
    stage branch 
    master branch

        dev    [ rich / list.txt / deploy.sh  ] 
        stage  [ rich / list.txt / deploy.sh  ] 
        master branch [ rich / list.txt / deploy.sh  ] 

        dev   branch   ---> development environment  
        stage branch   ---> testing/UAT/QA environment  
        master branch  ---> production environment  



git branch -help  
==================

git branch branchName   = creates a new branch
git branch development  = created the development branch 

master branch is the upstream of the Development branch  

upstream branch = development :
  development branch =  usermgt.java  = 10,000 lines  
downstream branch = stage :
  git branch stage   =  usermgt.java  = 10,000 lines    


git switch master
git diff development 
git merge development





  git branch  = list all the branches [lines of development]
  git branch branchName   = create a new branch     
  git checkout branchName = switch branches 
  git switch branchName = switch branches 

  git fetch --> It brings changes in the code to the LocalRepo
  git pull --> It brings changes in the code to the localRepoand & Working area 
  git clone --> It brings the entire code to the working area 





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&&&887&*(????????//////////////////////////////////////////////////////////////////

                                                      GIT 4 (WHY GIT REBASE IS BETTER THAN GIT MERGE)                                   
GIT BASH, COMMITING TO AN EXISTING MODIFIED FILE, resolving conflict, GIT CHERRY, HOW TO MERGE CHANGES IN GIT, WHY GIT REBASE IS BETTER THAN GIT MERGE, DEBUGGIN ISSUES/UNDO CHANGES IN GIT, DIFF BETWEEN TAGS & BRANCHES,  
What is the difference between Git & Github: Branch security, SWITCHING BRANCHES, BRANCH SECURITY, CONNECTING TO SCM/GITHUB USING SSH KEY/PUBLIC KEY, more COMMANDS, CONNECTING TO SCM/GITHUB USING SSH KEY, IDE, .gitignore, 
GIT BEST PRACTICES



   GITBASH ( commiting to an already modified file)

git commit -a -m "commit message"
To add and commit at once (the new changes in an already existing files) 
git add.&& git commit -m "commit message"


  RESOLVING CONFLICT (when there is a conflict, we hv to merge manually ie in master ,you have to run git diff (dev or stage) to see the changes then vi into the file & delete the conflict ie (the errors>>> & its lines)
we resolve merge conflict by merging manually 
however avoid merge conflict for best practices


example
we git switch to destage frpm master
vi app.java & edit , add and commit 
when we git log we can see the recent commit
then we switch back to master 
also, we vi app.java, edit, add & commit 
when we git log we can see only the commit done in the master branch, we dnt see the commit done in the stage branch
 we git diff stage to see the changes in stage
BUT When we run "git merge stage" , we see an error "conflict"
vi app.java we see the merge conflict in app.java


    TO RESOLVE THE CONFLICT
Vi app.java, delete  <<< HEAD  &  >>>>>>>>   stage
we git status : show us both files have been modified 
                        " both modified"

******* we resolve merge conflict by merging manually 
finally we run: git commit -a -m "merge conflict resolved"  , the recommndation is to write good commit messages



17;00
Git cherry - pick commitID 
we merge a particular commit among many commits

eg
WE have several commits in the dev or stage branch
we can select a particular commit to merge in master
so we run = git - cherry  - pick commitID

But when we try to merge the dev or stage branch to master we will get a merge conflict bc of the other commits that have not been merged manually 

therfore, we vi into the file and delete  <<<<< HEAD
FINALLy, git commit -a -m "conflict fixed"


                     HOW TO MERGE CHANGES IN GIT
HOW TO MERGE CHANGES IN GIT
 git merge
git cherry pick
git rebase


WHY GIT REBASE IS BETTER THAN GIT MERGE
FOR git merge:
 stage commit 1    ie sc1
  sc1 [this is git tracking the changes like version1] -->sc2 [version2] --->sc3 [version3] 
                  = mc1 [master version1]          ******* when we merge, we get jst one version 

ie when we have several commits in the stage /or dev branch and try to merge to master branch , it gives merge conflict, so we have to commit it maually
and when we that is done it commits  (git commit -a -m) it as one version in the master branch (master version)



   BUT FOR REBASE ( When we use git rebase in place of git merge )

git rebase
     sc1 [version1] -->sc2 [version2] --->sc3 [version3] 
                   = mc1 [version1] -->mc2 [version2] --->mc3 [version3]  
        **** when we merge, we get 3 versions
 
   ******** for rebase:
when we have several commits in the stage / or dev branch and run git rebate stage or dev, it gives us the various versions in master
just as it was in the stage  / or dev barnch 
therfore rebase gives us the actually benefits of git which is for versioning bc in future, if we need to refer back to the commits the rebase makes it easy for us to see each commit/versions

**** 40;40 ., when he tried it there was still merge conflict,  so he merged it manually & he didnt say if we got just 1 version or multiple versions (as is the case if we run git merge)
26:00
How can we merge a particular commit among many commits in git??
By using the;

git cherry-pick   = merging specific commits



******* 41;20  DEBUGGING ISSUES ( started again in 46:00)
46:00         UNDO CHANGES IN GIT

IN THE WORKING AREA , to clean a code we are not satisfied with
git clean
git clean -n : tell you the files/changes that would be deleted in working working area
git clean -f : cleans the working area
git reset   : to move a file back to the working area from the staging area
git revert commitID :  to delete the latest commited files in the local repo for a specific commit
                        eg, he created a file, added it & commited, then ran "git revert the commitID" to delete the committed files both from the local repo & the working area, therefore the file no longer exists.


How to see/determine what happened in a commit
to see the details;           git show commitID
to merge a specific commit;   git cherry-pick 518110e  
good commit msg:"conflict fixed"  git commit -a -m "CONFLICT fixed"



               **** 56:15, check out the pdf file for the git commands
TAGS: Are similar to branches but the diff is that tags are immutable, it means tag is a branch which nobody intends to modify. Once a tag is created for a particular commit,
even if you create a new commit, it will not be updated.  usually, developers create tags for produdct releases.

55:30 ***********    DIFF BETWEEN TAGS & BRANCHES
difference b/w tags and branches :
=== Tags                                                  ==Branch
immutable                                                   mutable
Tags are unmodifiable                                      branch can be modified/modifiable
Tags are created After Production, once thers 
a release, it creates a tag                                creates while development is still -WIP 
recommneded to be created from Master  branch              can be created from any branch 
 to se aour tags: git tag                                   git branch
to create a tag: git tag TagName                           git branch BN
git push an (an alias Name)--tags                         to push to all branches; git push an --all           
git push AliasName tag TN                                 to push to a particular branch; git push an (alias Name) BM              
git tag -d TN                                              git branch -d BN




   ******59:00     CREATING TAGS
 git tag TagName
******meee******  TAG WITH version & patch 
create tag: git tag paypal - 1.0.02
1 = 1 represents a higher version
2 = 2 represents a lower version
3 = 3 represents the patch



  ****** 1:02                    ENDS



What is the difference between Git & Github:
Git is an open source Distributed Version Control System(DVCS) which records changes made to files (codes) laying emphasis on speed, data integrity in a
distributed non-linear workflows.  
GitHub is a source code management[SCM] tool



Explain your branching strategy in LandmakTechnology ?? 
Explain your branching strategy in Dominion systems ??
Explain your branching strategy in your Environment ?? 

1. Number of branches = WE maintain 3 branches
  dev branch    ---> develoment Environment
  stage branch  ---> Testing/QA/UAT Environment
  master branch ---> PRODUCTION 
    feature 
    bug_fixed



2. Branch security = 
   All commits in the master branch must go through PR 

we also have branch security in our branching strategy 
our branch security is such that no one can commit directly to the master branch, all commit in the master branch must go through  PR (pair review) or there must be a pull
request

3. Switching branches =  working tree should be clean 
    DevOps Engineer [dev branch / master--bugfixed]
    If neccesary backup incomplete tasks before switching  
      git stash command,  do not commit yet because your task is incomplete at the momemt

1:12
therfore always run git status to check and then git stash to backup the files/WIP , after which you can switch branch
to get back to the WIP files, run switch to the initial branch 
then git stash list : to list all the backups
then git stash apply,  then we can continue working on the file 


4. git rebase over git merge
5. review changes [git diff] before merging
6. Use PR before committing to the master branch 
7. avoid merge conflicts  



 1:14;00 *************

git stash        =     to take backup
git stash  list  = to list all the backups 

eg we have a number of backups 

stash@{0}
stash@{1}
stash@{2}
stash@{3}

git stash apply            = resume wip for the most recent backup
git stash apply stash@{0}  = resume wip for the 1st backup
git stash apply stash@{5}  = resume wip for 6th backup
git stash drop stash@{0}   = will delete backup
git stash pop stash@{1}    = It apply & drop backup 1.
git stash pop



the private key is like a lock, so you slot the public key in ito the lock and it gives you access
we copied the public key and added it to our github account so when you try to access your github account, the private key will be authenticated against the public key 


******** 1;20;50  .... CONNECTING TO SCM/GITHUB USING SSH KEY to automate your authentication access into github  ( and copy to your github account) *** **** 1:50:00, you can use the key with any of your rrepositories
         1:49;14  ****  he said the ssh key can work for any of the repositories bc it was notadded under any repository, we just went to settings and added it 

This automates your authentication access to github ie no need for password PAT

        CEATING SSH KEY  ( and copy to your github account) *** **** 1:50:00, you can use the key with any of your rrepositories
ls/home/ec2-user/.ssh      **** he said he has a file called .ssh
 to create ssh key:   ssh-keygen  
the key has been created
then  ls/home/ec2-user/.ssh  
 then copy /home/ec2-user/.ssh/id_rsa.pub
cat  /home/ec2-user/.ssh/id_rsa.pub
*** 1:23:03 copy the key and paste in SSH tray in github then add the key 
*** 1:24:37 copy ssh url in github (find it in "code" in github)
****1:26;19 create an alias name for ssh url = Ada
ssh url = Ada git@github.com:zebxz/paypal.git
git remote add Ada git@github.com:zebxz/paypal.git
to push = git push ada master ( Ada now replaces the repo aliasname which we used that requested for pw initially)


****1:30:00 
   we can also create for https but for ssh its kinda automated



github - webhook --jenkins( we will look at it when we get to jenkins)

IDES: integrated development environment ( are sofwares that eases code writing)

.gitignore file
developers use IE to write code
IDE include = vscode, esclipes, atom etc
 it will create a .class modules

******me
1:35:00 ****** git will not track changes in .gitignore file
 ls -a  = to list files in the .gitignore file

1:37
IQ:
   WHAT IS THE USE OF .GITignore file
this is used to list files that should not be tracked by git
most of the time these files are file sthat are craeted by the software, the integrated dev environment, the IDE or any files that we dnt want git to track changes in the
file or directory , we use the .gitignore file to list them there.


  Git Best Practices:
    Use branching strategy and pull requests
    Commit once you finish your task. 
    Avoid merge Conflicts.
    Don’t Commit Half-Done code - backup with git stash
    Test your code before committing.
    Write Good Commit Messages before committing 
    Try to use git commands rather than GUI tools.
    use ssh url and PAT over https url  
    use rebase over git merge
    use branch protection strategy  
    use best branching strategy



QUESTIONS


 *** 1;45:59 PUBLIC KEY & PRIVATE KEY
  The private key is authenticated against the public
the public is like the key while the private is the lock
you slot the key in the lock & you have access



1:27;26 ***********   DIFF BTW GUI & COMMAND LINE
e.g  when i go into github and create a branch, i am using GUI tool bc am creating it directly from my console
i can also create the branch directly from my command line


****** the PAT prevents unauthorized users from cloning our projects
it can prevent unauthorized access bc you can deceide what the PAT can and cant do 
eg can clone public or private repository/modify/push code
with PAT you can determine the scope of what can be done 
eg
i can create and assign a PAT to a personnal user as well as define the scope for which it can be used for.

in the past password was used but that will grant everyone full admin access, thats why they removed passwd support to PAT so that access can be defined, the scope can be 
restrited




####################################   END




IDEs = Integrated development environment
 are software that eases code writing  

[ec2-user@demo33 paypal]$ ls /home/ec2-user/.ssh/
authorized_keys  
id_rsa       = ssh-private-key
id_rsa.pub   = ssh-public-key  
known_hosts  
known_hosts.old



Maven / Tomcat / apache Webserver / SonarQube / Nexus / Jenkins : 
==========================================================




                                           MAVEN

































