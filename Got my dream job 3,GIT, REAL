
**** THIS IS THE MORE SUMMARIZED GIT FILE TO USE *** 


LINUX , scripting, git , maven, tomat/nginx, sonar, nexus, jenkins , aws, docker, k8, terraform, ansible, k8/helm 
In our env, we use LINUX OS for file,process,package,security mgt, GIT FOR VERSIONING, MAVEN FOR BUILD


jenkins
WHAT is github
it is a web based hosting service for version control using git



GIT 1
**** windows is an operating system as linux and they all have commnd line 
in windows we can install Git (our DVCs) by downloading it while for linux; we login to mobaxterm and use package manager while utilizing sudo "sudo yum install git" to install git
 MobaXterm is a versatile and powerful tool for interacting with Linux systems from a Windows machine
git2.... 11:40 on git in mobaxterm we first cd documents/ then mkdir but on git in windows we mkdir and cd into it


* the master branch is the most most critical branch bc production goes to the market from the master branch therfore, it is better for development to start in development
branch so if there are any changes in the dev branch that needs to be applied in the master branch then more work has to be done. so before we deploy from dev to master
we need to ensure that its actually what is wanted .
make sure the work is reviewed before its merged in the master branch



The steps as a developer for our fintech client
   WORKING AREA (workshop) git add to move to staging >>> STAGING AREA (show room) git commit  to move to local repo >>>> LOCAL REPOSITORY AND THE (git push) >>>>> REMOTE REPO 
   Dvelopment takes place in the working area 

( i confirmed that the name of the directory you initialize must not be the same as the alias name you added as the name of the remote repo url in the local env/repo)
 the alias name make s it easy so u dnt have to type the enter repo url each time you wnat to push or pull

Our main task is project onboarding:
1)Project Onboarding: we onboard projects by;
   1. create a github account for your organisation or self & Create organisations where applicable
. Create organisations where applicable in a SCM ['GitHub']  
       url =  https://github.com/landmarkss
   3. Create teams in SCM/github and assign members[Developers, etc.]                   
     then create repositories, either public or private  .... git2.. 13.54
4. share login details with Developers/Team [ userName/password ]

2  Git installation ... DVCS
In our env, we use Git which is a Distributed Version Control systems. we use Git for Versioning
Git Installations differs depending on your operating system:

nxt step
A) create a directory for Development   
***   mkdir paypal && cd paypal  
paypal is out project dir
B) Initialise this directory to keep track of 
   any change or changes in the files/codes  ... by running git init
*** Git init creates a local repository and initializes the project directory
so we are now in the local repository

***** Git status;  shows the state of the working directory and staging area, eg to know if the project directory has been initialized, to check if our working tree is clean or not
It lists: Tracked files (modified, staged, or deleted).

        TO MOVE THE FILE (a new file) FROM THE WORKING AREA TO THE STAGING AREA 
C) For git to track our work (In the working area we run git add)
 To move our files form our working area ( file appears in RED)to the staging area (File appears in GREEN)
**** git add.filename   TO ENSURE THAT OUR WORK IS TRACKED BY GIT, ((in orderwords, task in our working environment is not tracked by git)
TO create a file : vi OR touch filename
so we touch a file in our working area and move it
        GIT4:  ( commiting to an existing modified file)
git commit -a -m "commit message"        ****'a' stands for add
To add and commit at once (the new changes in an already existing files) 
git add.&& git commit -m "commit message"


D)  TO COMMIT the changes
In our staging area  >>>>>>>>>>>> local repository
 ***    git commit -m  "   "
( for data intergrity) for trcaking who did what
SO you have to be authenticated with the command;
  global configuration  ==  git config -- global usre.email "your email address'
                            git config  --- global user.name "yourname"
then we run git log to check , after which we run git commit -m  and git log again to check

E) we have To add a repository for git push
  To move files from local repository   >>>> Remote repository
   ***    git push ( push changes from local environment to remote repository)
***** git remote -v    = to tell us if we have any repository detail in our local environment 
Tells us how many remote repository we are managing 
to add a repository  URL in our local environment 
 *****     git remote add paypal https://github.com/zebxz/paypal     ( ie this repository url is been replaced by paypal "the alias name i created in  in my local enveiroment )
i had to use: git remote add pay https://github.com/bibiblee/pay    (Because zebxz/paypal refushed to accept the push 
  ***frm git4 1.21*    i just realised that it sthe "pay" before https thats the aiiasname not the last pay
************* at this point when we check in github, we cant see anything like the new version of the app in github/remote repository
we want our developers to collab with each other so we have to push

GIT PUSH      (alias Name )master
****** git push pay master 
will request for username and pssword but we hv to go to github and generate token because git doesnt accept password again  **** this was the case when we were still in class but when in 2025 the authenticatin wa sychronized by the system 
ie i was directed straight to github to be authenticated
***********  Now when we check in github, we can see the new version of the app in github/remote repository
***TO; automate the authentication/verification process there are 3 options but ssh url is the best; 1)generate a token classic in github(lasts >30days) OR 2)generate ssh key and use ssh url or 3) http url
F)7)   GIT PULL : to see the work others have added to the project i have to pull to my env

After the task i pushed has been executed/worked on by other developers
 *****=== GIT PULL paypal master 


GiT 2
    MANAGING APPLICATIONS
             APPLICATIONS ARE THE OUTPUT FROM SOFTWARES
We develops, tests, builds, deploy and monitors applications
our main focus is on development and when applications are developed multiple versions of the application can be developed
we need to use a version control system that brings all the advantages of version control and that is a distributed version control system bc it keeps and tracks record
There are other platforms we can use for SCM like git lab, git hub, git bucket and aws code commit


A branch is a line of development
                  

                        (GIT2) GIT BRANCH
              **** 1:53:04  ( our branch rule is that we dnt work directly in the master branch, bc master branch deploys to production)

 FROM THEIR DIFFERENCES(branch & tag), I realise that; TAGS are recommneded to be created from Master branch    WHILE   BRANCHES can be created from any branch 
  SO technically, a branch created from the master branch is a 'feature*


   one branch = 1line of production
A branch is a line of development    *** meeeee, if we main 3branches then that means 3lines of development..
 A file must have been moved to the staging area before it can be pushed
1:11:00 once we are done with the dev branch, we can create a new branch from dev called stage branch and whatsoever is in the dev branch will also be found in the dev and stage branch.  ***1:54:00

development branch : writing our code, once developers are satisfied they move it to the stage branch
stage branch : then moved to stage and once its done  
master branch: deployed to production environment , taken to the market

****whatsoever is in dev branch is deployed to dev environment, from stage branch to  staging/testing/QA  and from master to production/market

***** in development its good to have multiple dev lines so that if there is an issue with one line, it can be resolved from the other line
 
******* The master branch is the upstream Branch for the dev Branch  
  The dev branch is the downstream of the master branch   


Ticket01:  *** done
  Create a dev branch from the master branch  
  Switch to the dev branch and create the app.java file    **** so vi java application development
  Commit the changes and Switch to the master branch  
  Review the changes in dev and merge with the master branch  

----  i think this was me summarizing the steps to resolve the ticket

 ***** first ensure yu are in the project directory (still using paypal dir we created earlier)
1) git branch               = to confirm we have created dev
2)git branch branch name    = eg, git branch dev; we run this command to create dev branch
3) git switch dev             =  change from master to dev and vice versa
4) we vi into app.java file  ( ie create app.java file)
5)we git add.           = to move file to the staging area
6) we commit "m"
   git commit -a -m "commit message  = To add & commit at once
7) git switch :                 = move from dev to master
8)git diff dev (commit ID )    = we run this in master to review the changes that happened in dev             
                                  git diff (b0f7fcf) ie ID of the commit done in dev branch                by d push command, i bliv  we can push to either branches
 GIT4;  git diff (dev or stage) to see the changes then vi into the file & delete the conflict ie (the errors>>> & its lines)
Git diff pp/master   = to see the changes we are bringing over  (from the "master&dev branch" in the remote repo)
9) git merge dev               = (we run this in the master) if we are satisfied with the changes (done in dev in local repo)
10) we ls  / get log     ( we see head >master,dev)  = to ensure all changes  from (git merge dev ) were applied in the master branch (ie we hv all the files/commit in the master )
11) git push aliasName --all     = (we want to commit all the changes) git push pay --all ( this is done in master in our local repo )       
                                     it will creates dev branch in remote repo and pushes all the chnages from local repo to dev/master in remote repo
git push aliasName branchName  


1:26:40 Regarding this ticket**********************  bc am creating a dev branch from master  The master branch is the upstream Branch for the dev Branch  
  The dev branch is the downstream of the master branch bc the dev branch was created from the master.


1:31:53
Git fetch         =  it brings changes in the code from the remote repo to the local repo 
Git pull          = (git pull aliasname branchname)  it brings changes in the code from the remote repo to the local repo and working area
Git clone         =   it brings the entire code to the working area
                       git clone https://github.com/landmarktechnology/paypal

                                               

*********************************

github
                                              Remote repo
                                                paypal
                                                master
                                               bugfix         >>>>> whenever ther is an error/bug in the code, we create a bug fix branch from the master
if the org say they want a new feature >>>>     feature
we create a feature branch  from                 stage
 the master branch                                 dev


12)
1:49:00 ********To expand more on Ticket001 above:
                        PULL REQUEST : PR ( in the remote repo)
1:33:00  in the remote repo in github, in the dev branch, we added a new line to the app.java file , after which in both branches we see the "compare & pull request" notification, i can add a branch protection rule, eg 
PR is used to review changes in one branch b4 merging in another branch                                                                                 the senior software engr must review before any merge is completed
this is recommended for any merge in the master/release branch

eg
compare and pull request:  when a change is done in dev branch , to create a a review, we can see this option in the master branch informing us of a change , so we use the 
option
                       

13)************* 1:52:27   TO SEE THE DIFF BTW GIT PULL & GIT FETCH, WE will use the illustration below;
   git fetch --> It brings changes in the code to the LocalRepo   *** 2:10:00 ( this requires a review before merging) , MOSTLY recommended
  git pull --> It brings changes in the code to the localRepo and & Working area    ( this merges without a review)

    
     TO SYNCHRONIZE/BRING THE CHANGES FROM THE REMOTE REPO TO THE LOCAL REPO
         so for us to merge the changes in the remote repo to the local repo 
for us to update the changes we can run git fetch or git pull
git fetch pay = git fetch
but when we cat the app.java file we see its not yet updated bc git fetch doesnt merge the changes (bc git fetch brings the changes only to the local repo) so we run git diff
git diff pay/master = git diff to review the changes ( pay is our repository alias name) 
git merge pay/master = to merge the changes

14)
1:53:48 ******* in the remote repo in github, he also created a stage branch from the master branch, then updated the app.java file 
         got the pull req in the master baranch, accepted reQ 
     finally in the local repo, he run the git pull (git pull pay master) command to bring the changes from the remote repo to both the local rep & working env.


git push alias name --all   ****2:11:40        (so i created a new repo with aliasname "ok")
this will create the branches in other repositories that didnt have such branch **** but first, you have to specifically push to the master branch in that/those repo
eg in the local repo when the stage /dev branch is created in the master branch and you run git push alias name --all , (alias name ie the new repo) all the repositories will equally have a dev and stage branch and all
other effected changes/commit

 ********* END******


git pull pp (ie alias name)
                 OR
git fetch (aliasName) ie Pay   
Git diff pay/master   = to see the changes we are bringing over  (from the "master&dev branch" in the remote repo)
then git merge pay/master    = form local repo to workin area  



 the master branch is the most most critical branch bc production goes to the market from the master branch therfore, it is better for development to start in development
branch so if there are any changes in the dev branch that needs to be applied in the master branch then more work has to be done. so before we deploy from dev to master
we need to ensure that its actually what is wanted .
make sure the work is reviewed before its merged in the master branch

codes form the dev branch is deployed to the development branch env, code from the staging branch to testing/QA/UAT env and from the master they are deployed to production
from the master we can create a feature branch or a bug -fixed branch 
           


***********
git push aliasName branchName  
eg;  git push pp master                   ***** Pushing to the master banch

git branch           = list the branchless 
git checkout/switch branch name =  git switch dev
git push aliasName --all  = push changes to all branches  ie to the master and dev branch in github
git push pp --all 
git branch - v             =  display all branches in your repo and also tell you what branch your currently working i
git remote remove alias Name    =  remove repo from the local environment 
git remote remove repo URL 



****************                        GIT4
GIT CONFLICT, CHERRY PICKING, HOW TO MERGE CHANGES IN GIT,  WHY GIT REBASE IS BETTER THAN GIT MERGE

 RESOLVING CONFLICT (when there is a conflict, we hv to merge manually ie in master ,you have to run git diff (dev or stage) to see the changes then vi into the file & delete the conflict ie (the errors>>> & its lines)
we resolve merge conflict by merging manually 
however avoid merge conflict for best practices


example
we git switch to dev frpm master
vi app.java & edit , add and commit 
when we git log we can see the recent commit
then we switch back to master 
we vi app.java, add & commit 
when we git log we can see only the commit done in the master branch, we dnt see the commit done in the stage branch
BUT when we git diff dev to see the changes in dev & merge dev
vi app.java we see a merge conflict in app.java



               TO RESOLVE THE CONFLICT
Vi app.java, delete  <<< HEAD  &  >>>>>>>>   stage
we git status : show us both files have been modified 
                        " both modified"

******* we resolve merge conflict by merging manually 
finally we run: git commit -a -m "merge conflict resolved"  , the recommndation is to write good commit messages

  

    HOW TO MERGE CHANGES IN GIT
HOW TO MERGE CHANGES IN GIT
 git merge
git cherry pick
git rebase


WHY GIT REBASE IS BETTER THAN GIT MERGE

FOR git merge:
 stage commit 1    ie sc1
  sc1 [this is git tracking the changes like version1] -->sc2 [version2] --->sc3 [version3] 
                  = mc1 [master version1]                     ******* when we merge, we get jst one version 

ie when we have several commits in the stage /or dev branch and try to merge to master branch , it gives merge conflict, so we have to commit it maually
and when we that is done it commits  (git commit -a -m) it as one version in the master branch (master version)



   BUT FOR REBASE ( When we use git rebase in place of git merge )

git rebase
     sc1 [version1] -->sc2 [version2] --->sc3 [version3] 
                   = mc1 [version1] -->mc2 [version2] --->mc3 [version3]               
 **** when we merge, we get 3 versions

   ******** for rebase:
when we have several commits in the stage / or dev branch and run git rebate stage or dev, it gives us the various versions in master
just as it was in the stage  / or dev barnch 
therfore rebase gives us the actually benefits of git which is for versioning bc in future, if we need to refer back to the commits the rebase makes it easy for us to see each commit/versions


**** 40;40 ., when he tried it there was still merge conflict,  so he merged it manually & he didnt say if we got just 1 version or multiple versions (as is the case if we run git merge)


46:00         UNDO CHANGES IN GIT

IN THE WORKING AREA , to clean a code we are not satisfied with
git clean
git clean -n : tell you the files/changes that would be deleted in working working area
git clean -f : cleans the working area
git reset   : to move a file back to the working area from the staging area
git revert commitID :  to delete the latest commited files in the local repo for a specific commit
                        eg, he created a file, added it & commited, then ran "git revert the commitID" to delete the committed files both from the local repo & the working area, therefore the file no longer exists.


How to see/determine what happened in a commit
to see the details;           git show commitID
to merge a specific commit;   git cherry-pick 518110e  
good commit msg:"conflict fixed"  git commit -a -m "CONFLICT fixed"



               **** 56:15, check out the pdf file for the git commands
TAGS: Are similar to branches but the diff is that tags are immutable, it means tag is a branch which nobody intends to modify. Once a tag is created for a particular commit,
even if you create a new commit, it will not be updated.  usually, developers create tags for produdct releases.

55:30 ***********    DIFF BETWEEN TAGS & BRANCHES
difference b/w tags and branches :
=== Tags                                                  ==Branch
immutable                                                   mutable
Tags are unmodifiable                                      branch can be modified/modifiable
Tags are created After Production, once thers 
a release, it creates a tag                                creates while development is still -WIP 
recommneded to be created from Master  branch              can be created from any branch 
 to se aour tags: git tag                                   git branch
to create a tag: git tag TagName                           git branch BN
git push an (an alias Name)--tags                         to push to all branches; git push an --all           
git push AliasName tag TN                                 to push to a particular branch; git push an (alias Name) BM              
git tag -d TN                                              git branch -d BN




   ******59:00     CREATING TAGS
 git tag TagName
******meee******  TAG WITH version & patch 
create tag: git tag paypal - 1.0.02
1 = 1 represents a higher version
2 = 2 represents a lower version
3 = 3 represents the patch


Explain your branching strategy in your Environment ?? 

1. Number of branches = WE maintain 3 branches
  dev branch    ---> develoment Environment
  stage branch  ---> Testing/QA/UAT Environment
  master branch ---> PRODUCTION 
    feature 
    bug_fixed


 Branch security = 
   All commits in the master branch must go through PR 

we also have branch security in our branching strategy 
our branch security is such that no one can commit directly to the master branch, all commit in the master branch must go through  PR (pair review) or there must be a pull
request

3. Switching branches =  working tree should be clean 
    DevOps Engineer [dev branch / master--bugfixed]
    If neccesary backup incomplete tasks before switching  
      git stash command,  do not commit yet because your task is incomplete at the momemt 

1:12
therfore always run git status to check and then git stash to backup the files/WIP , after which you can switch branch
to get back to the WIP files, run switch to the initial branch 
then git stash list : to list all the backups
then git stash apply,  then we can continue working on the file 


4. git rebase over git merge
5. review changes [git diff] before merging
6. Use PR before committing to the master branch 
7. avoid merge conflicts  


CONNECTING TO SCM/GITHUB USING SSH KEY  *** meee*** bc a password is always requested when adding a repo
         1:49;14  ****  he said the ssh key can work for any of the repositories bc it was notadded under any repository, we just went to settings and added it 

This automates your authentication access to github ie no need for password PAT

    ***1.21.26    CEATING SSH KEY, to automate your authentication access into github  ( and copy to your github account) *** **** 1:50:00, you can use the key with any of your rrepositories
ls/home/ec2-user/.ssh      **** he said he has a file called .ssh
 to create ssh key:   ssh-keygen  
the key has been created
then  ls/home/ec2-user/.ssh  
 then copy /home/ec2-user/.ssh/id_rsa.pub
cat  /home/ec2-user/.ssh/id_rsa.pub
*** 1:23:03 copy the key and paste in SSH tray in github then add the key 
*** 1:24:37 copy ssh url in github (find it in "code" in github)
****1:26;19 create an alias name & add to the ssh url = my alias is; Ada
ssh url = Ada git@github.com:zebxz/paypal.git
Add url in git; git remote add Ada git@github.com:zebxz/paypal.git
to push = git push ada master ( Ada now replaces the repo aliasname which we used that requested for pw initially)


****1:30:00 
   we can also create for https but for ssh its kinda automated



github - webhook --jenkins( we will look at it when we get to jenkins)

****1:43:40  you can  install a lot of extensions, like pluggins, it will help your coding experince to be very easy
IDES: integrated development environment ( are sofwares that eases code writing)



 WHAT IS THE USE OF .GITignore file
this is used to list files that should not be tracked by git
most of the time these files are file sthat are craeted by the software, the integrated dev environment, the IDE or any files that we dnt want git to track changes in the
file or directory , we use the .gitignore file to list them there.


  Git Best Practices:
    Use branching strategy and pull requests
    Commit once you finish your task. 
    Avoid merge Conflicts.
    Don’t Commit Half-Done code - backup with git stash
    Test your code before committing.
    Write Good Commit Messages before committing 
    Try to use git commands rather than GUI tools.   ***1:47:10 ***  gui tool that is writing or adding lines/editing files or creating branches on the console in github (git commands ie run command in the CL in gitbash)
    use ssh url and PAT over https url  
    use rebase over git merge
    use branch protection strategy  
    use best branching strategy



QUESTIONS
WHY DO WE US ETHE PUBLIC KEY & NOT THE PRIVATE KEY 

 *** 1;45:59 PUBLIC KEY & PRIVATE KEY
  The private key is authenticated against the public
the public is like the key while the private is the lock
you slot the key in the lock & you have access






************************************************************************************************************************************************
    GIT SUMMARIZED FOR INTERVIEW


 
Authentication/Verification is only required each time to run "git push " command (nt sure if it request for passwd to add a repo for the first time)
***BUT; to automate the verification process there are 3 options but ssh url is the best; 1)generate a token classic in github(lasts >30days) OR 2)generate ssh key and use ssh url or 3) http url
*** to automate the verification process there are 3 options but ssh url is the best; 1)generate a token classic in github(lasts >30days) OR 2)generate ssh key and use ssh url or http url
 this was the case when we were still in class but when in 2025 during my revision, the authenticatin wa sychronized by the system ie i was directed straight to github to be authenticated(i think with authentication app code)

we run git add to move files from the WORKING AREA (workshop) to >>> staging >> & to move from the STAGING AREA (show room) to >>the local repo, we run git commit & a good commit msg is recommended as well & finally we run the git push to move from the local repo >> 
to the REMOTE REPO, and this enables collaboration between our developers
for data intergrity,ie for tracking who did what you have to be authenticated with the command; global configuration to do first commit
  global configuration  ==  git config -- global usre.email "your email address'

In our environment,we use git for versioning  & github for our SCM
We develops, tests, builds, deploy and monitors applications
our main focus is on development and when applications are developed multiple versions of the application can be developed
and so, we need to use a version control system that brings all the advantages of version control and that is a distributed version control system bc it keeps and tracks record( So that if the client is not happy with the latest version of the app, we ROLL BACK, from
"version2 to version1". ie the latest version to the previous version.
There are other platforms we can use for SCM like git lab, git hub, git bucket and aws code commit but In our environment,we use git for versioning

git comes with source code managers
in each loCAL environment(ie each developers env) gitbash is installed so it captures everything that is done with relative ease
 We ensure that Developers environments are configured and secured 
     We create an enabling environment for Developers to code/Develop ( to get to work)
       and that includes: setting up DevelopmentServers are created in AWS/GCP.  
       share login details with Developers/Team [ userName/password ]   ( so they can connect and get to work)
       Ensure that git package/Software is installed 
 we onboard our projects by;
   1. create a github account for the organisation or organisations where applicable
 i create Create organisations & teams where applicable in a SCM ['GitHub']  and assign members[Developers, etc.] 
 create repositories, then share login details with Developers/Team [ userName/password ]
NEXT with the Git already installed we create directories for dev, Initialise this directory to keep track of 
   any change or changes in the files/codes  ... by running git init, Git init creates a local repository and initializes the project directory
and we can start running commands
Our best practices include;
 for our Branch security = 
   1) Use PR before committing to the master branch
2) Before Switching branches =  working tree should be clean 
    If neccesary backup incomplete tasks before switching  
      git stash command,  do not commit yet because your task is incomplete at the momemt
3. git rebase over git merge
4. review changes [git diff] before merging
5. avoid merge conflicts  
6 Commit once you finish your task. 
 7   Avoid merge Conflicts.
 8  Write Good Commit Messages before committing 
 9  use ssh url and PAT over https url, bc ssh is automated
 10  use rebase over git merge
****skip**     Try to use git commands rather than GUI tools.   ***1:47:10 ***  gui tool that is writing or adding lines/editing files or creating branches on the console in github (git commands ie run command in the CLi in gitbash) command line interface.

   


**************************************************************************************************************************


Applications are the output of softwares
Applictaions are developed by developers
******* SOFTWARE Engineers and developers develop applications




In our environment,we use git for versioning. Git is a Distributed Version Control systems. DVCS
In our env, we use Git which is a Distributed Version Control systems. we use Git for Versioning
Git Installations differs depending on your operating system:


git comes with source code managers
in each loCAL environment(ie each developers env) gitbash is installed so it captures everything that is done with relative ease
so before we even submit the codes from our local env to scm, GIT  is already installed
***  skip *** meeeee.... gitbash can be installed directly on our windows computer or remotely on linux using mobaxterm    ... my understanding from git2; 14;35
 ***** skip*** MobaXterm is a versatile and powerful tool for interacting with Linux systems from a Windows machine, its a windows app designed for remote computing.


jenkins 1&2
WHAT is github
it is a web based hosting service for version control using git



GIT SUMMARIZED
Authentication/Verification is only required each time to run "git push " command (nt sure if it request for passwd to add a repo for the first time)
***BUT; to automate the verification process there are 3 options but ssh url is the best; 1)generate a token classic in github(lasts >30days) OR 2)generate ssh key and use ssh url or 3) http url
*** to automate the verification process there are 3 options but ssh url is the best; 1)generate a token classic in github(lasts >30days) OR 2)generate ssh key and use ssh url or http url
 this was the case when we were still in class but when in 2025 during my revision, the authenticatin wa sychronized by the system ie i was directed straight to github to be authenticated(i think with authentication app code)

we run git add to move files from the WORKING AREA (workshop) to >>> staging >> & to move from the STAGING AREA (show room) to >>the local repo, we run git commit & a good commit msg is recommended as well & finally we run the git push to move from the local repo >> 
to the REMOTE REPO, and this enables collaboration between our developers
for data intergrity,ie for tracking who did what you have to be authenticated with the command; global configuration to do first commit
  global configuration  ==  git config -- global usre.email "your email address'
                            git config  --- global user.name "yourname"


*** start

  APPLICATIONS ARE THE OUTPUT FROM SOFTWARES
In our environment,we use git for versioning  & github for our SCM
We develops, tests, builds, deploy and monitors applications
our main focus is on development and when applications are developed multiple versions of the application can be developed
and so, we need to use a version control system that brings all the advantages of version control and that is a distributed version control system bc it keeps and tracks record( So that if the client is not happy with the latest version of the app, we ROLL BACK, from
"version2 to version1". ie the latest version to the previous version.
There are other platforms we can use for SCM like git lab, git hub, git bucket and aws code commit but In our environment,we use git for versioning

git comes with source code managers
in each loCAL environment(ie each developers env) gitbash is installed so it captures everything that is done with relative ease
 We ensure that Developers environments are configured and secured 
     We create an enabling environment for Developers to code/Develop ( to get to work)
       and that includes: setting up DevelopmentServers are created in AWS/GCP.  
       share login details with Developers/Team [ userName/password ]   ( so they can connect and get to work)
       Ensure that git package/Software is installed 

Project Onboarding: we onboard our projects by;
   1. create a github account for the organisation or organisations where applicable
 i create Create organisations & teams where applicable in a SCM ['GitHub']  and assign members[Developers, etc.] 
       url =  https://github.com/landmarkss
       then create repositories, either public or private  .... git2.. 13.54
then share login details with Developers/Team [ userName/password ]
NEXT with the Git already installed we create directories for dev, Initialise this directory to keep track of 
   any change or changes in the files/codes  ... by running git init, Git init creates a local repository and initializes the project directory
create a directory for Development  and  inorder to To move files from our local repository  to >>>> the Remote repository we created in github, we run "git remote add and the remote repo url"
 we run git add to move files from the WORKING AREA (workshop)to >>> staging >> & to move from the STAGING AREA (show room) to >>the local repo, we run git commit & a good commit msg is recommended as well & finally we run the git push to move from the local repo >> 
to the REMOTE REPO, and this enables collaboration between our developers.& to do a push you must be authenticated so to avoid the continous prompt requesting for a PW, we automate the authentication by configuring an ssh key,so we CONNECTING TO SCM/GITHUB USING SSH KEY.
 Also for for data intergrity,ie for tracking who did what you have to be authenticated with the command; global configuration to do first commit.
  global configuration  ==  git config -- global usre.email "your email address'
                            git config  --- global user.name "yourname"
and to bring the chnages form ourremote repo to the local repo, we run either; git fetch, git, pull or git clone where applicaple.
Git fetch         =  it brings changes in the code from the remote repo to the local repo 
Git pull          = (git pull aliasname branchname)  it brings changes in the code from the remote repo to the local repo and working area
Git clone         =   it brings the entire code to the working area
                       git clone https://github.com/landmarktechnology/paypal

****skip *** We use the .GITignore files to list files we dnt want to be tracked by git     *most of the time these files are file sthat are craeted by the software, the integrated dev environment, the IDE
RESOLVING CONFLICT (when there is a conflict, we hv to merge manually
however, for best practices, we recommend to avoid merge conflict 
When we have several commits but want to merge a specific commit, we run the "git cherry pick command".
developers create tags for produdct releases.

A branch is a line of development 
In our env, we maintain 3branches of development our branch rule is that we dnt work directly in the master branch, bc master branch deploys to production),**in development its good to have multiple dev lines so that if there is an issue with one line, it can be resolved from the other line

development branch : writing our code, once developers are satisfied they move it to the stage branch
stage branch : then moved to stage and once its done  
master branch: deployed to production environment , taken to the market, from the master we can create a feature branch or a bug -fixed branch if theres a bug in the code & when its fixed we merge the feature branch back with the master branch

****whatsoever is in dev branch is deployed to dev environment, from stage branch to  staging/testing/QA  and from master to production/market

SO as a recap;
 for our Branch security = 
   1) Use PR before committing to the master branch
2) Before Switching branches =  working tree should be clean 
    If neccesary backup incomplete tasks before switching  
      git stash command,  do not commit yet because your task is incomplete at the momemt
3. git rebase over git merge
4. review changes [git diff] before merging
5. avoid merge conflicts  
6 Commit once you finish your task. 
 7   Avoid merge Conflicts.
 8  Write Good Commit Messages before committing 
 9  use ssh url and PAT over https url, bc ssh is automated
 10  use rebase over git merge
****skip**     Try to use git commands rather than GUI tools.   ***1:47:10 ***  gui tool that is writing or adding lines/editing files or creating branches on the console in github (git commands ie run command in the CLi in gitbash) command line interface.

   
******************************************************************************************************************
MY QUESTION, 
So bc i was confused as to why do we hv 3branches of development ( dev to dev, staging to QA & master to prod) but in his example, he merged dev with master without first creating the staging branch??

althoug in the example he did, in the dev branch, he worked on a file, & committed it, then he  git diff, & merged the changes to the master branch, then pushed to the remote repo, without first creating the staging branch frm the dev, having watched the whole video,
i then realised that:
in contrast to what was done above, i think based on what he taught in the remaining part of the video,( it stash command,  do not commit yet because your task is incomplete at the momemt), so once the task is completed in the dev branch,he was actually 
suppose to create the staging branch from the dev branch and whatsoever is in the dev branch will also be found in the stage branch. *** & 1:11:00
then from the dev branch, we push to the dev env in the remote repo, then from the staging branch pushed to QA/Testing in the remote repo, and when the testing?QA is finally completed, we git diff, then merge with master to be deployed to production.

**********************************************************************************************

