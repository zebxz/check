CREATING DODCKER FILES

docker ps  to list the runing containers
to stop the container u can execute 
   docker kill/stop  
and once the containeer is stopped, you can start the container
BUT DPCKER Stop is recommemnded bc it will give a warning b4 stopping whie docker kill doesnt give a warning

How to troubleshoot or debug applications running as docker containers?
1. docker ps -a =
= will check if the container is running, paused or exited
 docker start/unpause
﻿﻿﻿2) docker top = check resources
﻿﻿﻿3) docker stats containerNAME/ID
﻿﻿﻿4) docker logs containerNAME/ID
5) ﻿﻿﻿docker exec = run command inside the container
docker exec app 1s docker exec -it app
/bin/bash
7)﻿﻿﻿docker inspect containerNAME/ID
8)99﻿﻿﻿docker attach containerNAME/ID
﻿﻿﻿netstat -tulpn

26:24 , also is der ar issues in the container, we can track them frm the log files

  to TS 
the first command to run is docker ps to check if the container is running
1) then docker ps -a ,to check if it stopped
if its in stop state , u strt the container
but if it not stopped but the process is stopped u hv to unpause it
2) docker inspect  ... "will show us network ie is the container in a ntwrk" does it v ip adress, a container thats running we shud see the ip address in networks
and we can see the state as shown below that the container is nt running based on my inspeection, so we can start the container to solve the problem bc d container is exited
e.g
"State": {
"Status": "exited"
"Running": false,
"Paused": false,
"Restarting": false,
"OOMKilled": false,
"Dead": false,
"Pid": 0,
"ExitCode": 143,
"Error". ""
"StartedAt"? "2023-01-23T11:43:20.4499908057"
"FinishedAt": "2023-01-27Т00:14:15.

### most of the time when we look at networking after we kill a container n start a container, we ll see the ipaddresss will change

3) docker top container name/id  ...to check the process running inside a container 

4) docker stats ... resources being consumed by the cointainer process
5) docker update container name/id

13:13 to run command inside a container
﻿﻿﻿docker exec app pwd 
﻿﻿﻿docker exec app ls   .. to see the files
we can actually get into the container to execute command by accessing the container in intercative mode
docker exec -it app   .. for interactive mode
to interact with the container we nid a shell
so we can use a bash shell  .. : docker exec -it app bash
or bond shell sh
docker exec -it app sh
then pwd : 
/usr/local/tomcat      :shows me wher i am
but when i tried to exit it says not found
so we can see the bond shell is limited compared to the bash shell
now we change to bash shell
docker exec -it app bash
ls
pwd  ,, we can seee we ar inside the container

16:39 docker cp = used to copy files into the container from the dockerhost and vice versa
#### i can also get the commands online
docker cp foo.txt container_id:/foo.txt
docker cp , file name, container name/id: root dir 
docker cp web app:/usr/local/tomcat/

26:49##### to copy frm the container to the local host
we wnt to copy the log files to the home of ubuntu and  
docker cp app:/usr/local/tomcat/logs /home/ubuntu
if home/ubuntu is wher we ar currently carrying out our task, means we wnt to copy to our pwd so i can jst put a dot
docker cp app:/usr/local/tomcat/logs .
also if i dnt wnt to put a dot i can use the ¬ , the tilter sign

28:49 
#### when the process in a container is running der ar obviously some changes
when u deploy a container, der wil b some changes btw the container n the image wich was used to create the cointainer e.g we v copied some files into the container

**** TO KNOW THE CHANGES THAT V OCCURED IN THE CONTAINER
docker diff container name/id
its the diff btw the image used to create the container n the changes tahe v occurred in the container
 
###### to maintain the changes in future application , we can commiit the changes
docker commit 
enables us to extract an image frm a running container



**********(i copied this frm the previous video 5/5b )*************************************************
          webapp is the container name 
docker exec webapp ls webapps/tesla/jsps ... **** this is interacting with the container
home.jsp
i wnt to copy this file called home.jsp n modify smt 
docker exce webapp ls webapps/tesla/jsps/home.jsp
now ders a command called docker cp
we wnt to copy the filw called home.jsp to the container called webapp
  this relative path didnt wrk :.   docker cp webapp webapps/tesla/jsps/home.jsp .   ,, i bliv webapps is wher deployment takes place in tomcat
 WE run decker exec webapp pwd ,, we can see,  /usr/local/tomcat   ,   wich is the absolute path

1:40;34 **** so we use the absolute path 
docker cp webapp:/usr/local/tomcat/webapps ***** here we copied the webapps dir to the container webapp
and it says successfully copied to /home/ubuntu/.   ,, we wre unable to copy bc we wre using the relative path
ls n we can see /webapps  ...... i bliv this was copied to the pwd ,, i understand bt i can still ask ??????????????????????????????????????????????????????
now if i wnt to copy that exact file that is inside webapps (/tesla/jsps/home.jsp)
  docker cp webapp:/usr/local/tomcat/webapps/tesla/jsps/home.jsp . 
successfully copied , we can see /home.jsp ,,,, i bliv this was copied to the pwd ,, i understand bt i can still ask ??????????????????????????????????????????????????????
COPIED TO  /home/ubuntu/ .

*******1:45:28 copy file to a container:
docker cp home.jsp webapp:/usr/local/tomcat/webapps/tesla/jsps/ 
now we v successfully copied it to the webapp conatiner 
it shows :COPIED TO webapp:/usr/local/tomcat/webapps/tesla/jsps/ 
and when we check in the browser we can see the line that we changed
*********************************************************************************************************************************************************



******What is docker commit?
Using docker commit we can create image from a continer.
docker commit <containerId/Name> <imageName>
docker commit webapp newimage:1 

***** docker commit webapp mylandmarktech/maven-web-app:class34  
then when i run docker image, i can see the new image with tag class34
**** then push to my docker hub account so members of my team can understand/see the change
docker push mylandmarktech/maven-web-app:class34  ,, now if u go to my docker repo u wil find thi simage 
**** create a container wit the imge 
docker run -d --name app -p 8088:8080 mylandmarktech/maven-web-app

===============================================

Dockerfile running notes starts 

Watch and practive the video below paying attention on the
Dockerfile section of the video.
NB: Watch the dockerfile video before Saturday's class.

We shall start with docker networks and Micro-services on Saturday.
===================================================================


Dockerfiles:
============ 
Dockerfiles are input use to build docker images    
Docker images are input needed/used to create containerised applications  


FROM tomcat:8.0.20-jre8      e.g the this docker file is tryng to containerize this application using FROM tomcat:8.0.20-jre8  , as the base iamge
COPY target/*war /usr/local/tomcat/webapps/tesla.war


           

THE INTENTIONN OF ANY DOCKER FILE that we ar trying to create is to be able to package the application plus all its dependencies
DockerImage: --> It's package which contains application code 
        + all it's dependencies(Software+ENV Varibles + Config Files) 
        together.
so the docker file is written to achieve this objective

what type of projects do you support in your env ,,,, we support java base projects 
java-based projects:
                                                                                   59:49

53;40 #### this is another java or docker file
FROM tomcat:8.0.20-jre8  ....  tomcat is nt the ryt dependency
COPY target/app.ear /usr/local/tomcat/webapps/app.war
   in this example,  since we ar passing tomcat, the application code cannot be copied in a tomcat base image
bc its nt the right dependency , tomcat is nt the ryt dependency, we cannot deploy ear on a tomcat base image
we should be copying from  jboss/wildfly , as shown below and this is nt the home directory for jboss (/usr/local/tomcat), and (/webapps) is nt the deployment dir for jboss 
to deploy in jboss, its deployed in deployments dir
FROM jboss/wildfly ....  
ADD target/maven-web-app.war /opt/jboss/wildfly/standalone/deployments/


1#   .... this is correct
FROM tomcat:8.0.20-jre8     
COPY target/*war /usr/local/tomcat/webapps/tesla.war
2#
FROM tomcat:8.0.20-jre8   .. this is nt correct , we cannot deploy ear on a tomcat base image , the tomcat base image is nt the ryt dependency 
COPY target/app.ear /usr/local/tomcat/webapps/app.war  

3# this is correct
FROM jboss/wildfly:latest   .... when no tag is chosen, docker wil download the latest version
ADD target/maven-web-app.war /opt/jboss/wildfly/standalone/deployments/
ADD target/*war /opt/jboss/wildfly/standalone/deployments/   .. we can also deploy a *war file in jboss,, we can deploy web aplication in jboss



57:29
if we run docker pull jboss/wildfly
.... it shows : usinng default tag: latest
latest: pulling from jboss/wildfly
we can see it pulled the latest of the image 
cd web/
docker images
now we can seee the image was successsfully downloaded
### to check how to better use the image
we run docker inspect docker image id  
****** THINGS TO LOOK OUT FOR IN THE IMAGE, when we run docker inspect  *******************************   SCREEEN SHOT COPy n paste
58:25 
1) we can see java is installed
jbooss depends on java 
2) the working dir " /opt/jboss
3jboss hm dir /opt/jboss/wildfly
4) jboss image is exposed on : 
     "ExposedPorts": {
                "8080/tcp": {}      ... so this is the container port , it cannot be changed
the jboss is  now the base image 
i can use the image to containerize the appplication 

FROM jboss/wildfly:latest 
ADD target/*war /opt/jboss/wildfly/standalone/deployments/ 
am copying the file with the keyword ADD n am changing the file
ls 

1:01:30
vi Dockerfile_JB
CREATing a new dockerfile , i will containerize the application n what eva name was here before(tesla.war) is going to change to landmark.war ie deployed as landmark.war
FROM jboss/wildfly:latest (am copying this JBoss file we pulled n whateva name is here is going to change to landmark.war, bc dats wot we indicted it to deploy as when we created the new file
ADD target/*war /opt/jboss/wildfly/standalone/deployments/landmark.war  ,, whateva is here is going to be copied and deployed as landmark.war
am copying the file with the keyword ADD n am changing the name 
##### docker file created ,, exit
i wnt to build anod aimage , custom image that will v all my application .. the image name we ar building is jblandmark
docker build -t jblandmark:1 -f Dockerfile_JB .
1:03:09
#### earlier, we pulled the docker image n when we run docker image , we can see the docker file name is teslar.war
now after we build a new image frm the new file we created (name landmark.war) it will deploy as landmark.war
we run docker image, we can see the name for the new image we created as :
jblandmark********************************************************************************************** iMAGE HAS BEEN CREATED ......
SO I V CONTAINERIZE MY APPLICATION

### JBOSS/wildfly image... size is 742MB
jblandmark  image . ..  size is 736MB 
so i can delete  the jboss , i dnt nid it anymore ,, i only needed it to containerize my appl  , my appli has been containerized wit all its dependencies

1:04;30 
docker rmi -f jboss/wildfly  ,, we can delete without stating the tag, if it is latest and in this case , it is latest
bt i must stage the tag if its not latest
e.g  docker rmi -f image2:1

we ar deleting to free up my cpu space  
to check memory usgae :  df-h

### now i can deploy my application with the jblandmark image bc  i v containerize my appli , it has been packaged in an image 
                                container name:jbapp $ image name: jblandmark
docker run -d -p 6000:8080 --name jbapp jblandmark:1
we cant deploy anoda application on the same host port number, it has to change 
e.g 
docker run -d -p 8888:8080 --name jbapp2 jblandmark:1
docker run -d -p 8880:8080 --name jbapp3 jblandmark:1
docker run -d -p 81110:8080 --name jbapp4 jblandmark:1    ,, but thisa wil nt work bc the port range for addresses is (0-65535) ,, 81110, is out of range

of course at work u wnt be accessing application frm the console , it wil be frm the CLI
curl localhost:6000/landmark
the application path is /landmark as seen in the docker file we created ( cat Dockerfile_JB) ***** landmark.war but so the path is landmark
i can also run 
i can also make it to be verbose : curl -v localhost:6000/landmark
to access it externally,  on the browser publicip:6000/landmark  ,, 1:16:00 ,, site cant be reached on the browser
curl -v publicip:6000/landmark
curl -v 44.211.75.85:6000/landmark 

******** bt very soon i wont need to check stuffs externally bc am now a DEVOPS engr.
#### if i wnt to knw if my appl is running or nt i can run commands inside my docker container
 to knw the path to my application path, i can run: 
docker exec jbapp pwd
/opt/jboss
docker exec jbapp ls /opt/jboss
wildfly
docker exec jbapp ls /opt/jboss/wildfly   ,, inside wildfly, deployment is taking place in standalone
bin
READme.
docs
stanalone 
docker exec jbapp ls /opt/jboss/wildfly/standalone    ,, inside stanalone we v deployments
lib
configuration
log
deploymenbts
docker exec jbapp ls /opt/jboss/wildfly/standalone/deployments  ...******************************** now we can see landmark.war was deployed
landmark.war


1:16:30



Dockerfile keywords: in writing a docker file these ar the keywords we shud tk specific note of 
===================
FROM   ,, this defines the dependencies , this is the most imp key work 
MAINTAINER
COPY
ADD
RUN
CMD
ENTRYPOINT
WORKDIR
ENV
EXPOSE
USER
VOLUME
LABEL
ARG

Base image generally contains Libraries and dependencies  :
    java-standalone applications
FROM  openjdk11
   java-web applications
FROM  tomcat:9.0.7-openjdk11 
FROM  jboss/wildfly
  
  docker pull tomcat:9.0.71-jdk17-corretto-al2

FROM --> FROM indicates the  base image(Layers) such as OS(Libraries)
 like centos,alpine,ubuntu or any programatic language(java,python,node,go) 
 or some other sofwares like tomcat,nginx,mysql..etc. Using base image 
 we can create our own image. All sub subsequent instructions(Layers) 
 will be executed/created on top of base image
layers.


Syntax: 
FROM  <ImageName>
Ex:
FROM tomcat:8.0.20-jre8
FROM openjdk:8-alpine
FROM nginx
FROM node
FROM python

MAINTAINER --> It's will be used as comments to describe 
author/owner who is maintaning the docker file.
This instruction allows you to set the Author/Owner of the Image.

MAINTAINER <name>
MAINTAINER <LandmakTechnology mylandmarktech@gmail.com>
MAINTAINER <Docker Community>

COPY  --> Using COPY we can copy files/folders to the image. 
Files/Folders will be copied to the image while building an image.
Using COPY instruction we can COPY local(build context) files or directories(folders) to the image while building image.

COPY target/tesla.war /usr/local/tomcat/ 
COPY . . 

SYTNAX:
======
COPY <source>                <destination> 
      ServerFile/FolderPath   PathInsideImage

ADD -->
     ADD also can copy files to the image while creating image. 
     ADD can copy local files from host server(build context) 
     and also  can download files from remote HTTP/S locations 
     while creating a image.

     https://8.25.3.9:8081/repo/tesla/tesla.war  

ADD https://8.25.3.9:8081/repo/tesla/tesla.war /usr/local/tomcat/  

FROM ubuntu
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.71/bin/apache-tomcat-9.0.71.tar.gz /opt/


RUN, CMD, ENTRYPOINT:  instructions can be used to execute commands/scripts.
These RUN,CMD,ENTRYPOINT can be defined in 2 forms.

1) -#Shell Form

RUN <command> <arg1> <arg2>
     mkdir /opt/class  
CMD <command> <arg1> <arg2>
      catalina.sh  start  
ENTRYPOINT <commond> <arg1> <arg2>
      /bin/bash -c catalina.sh  start 
     /bin/bash -c catalina run 

2) -#Executable Form

RUN ["command/executable" , "arg1","arg2"]
    ["mkdir" , "/opt/class30"]

CMD ["commond/executable" , "arg1","arg2"]
    ["catalina" , "run"]

ENTRYPOINT ["commond/executable" , "arg1","arg2"]
           ["catalina" , "run"]

RUN --> RUN instruction will  execute commands/scripts.
        RUN commands or instructions will be executed while creating an image on top 
        of the previous layers(Image). 
        Next to run you can mention any command based on base os of image.
        We can have number of RUN instructions in a docker file 
        all the RUN instructions will be exectued one after the other from top to bottom.

  Dockerfile_RUN:  
  FROM tomcat:9.0.71-jdk8-corretto-al2
  ADD target/tesla.war  /usr/local/tomcat/   
  CMD sh catalina.sh run 
  CMD ["catalina", "run"]

Dockerfile_CMD:  
FROM ubuntu
RUN mkdir /opt/class30
RUN touch /opt/class30/jobs
ADD . /opt/class30
CMD pwd  
CMD ["echo", "I am rich"]

docker build -t image2 -f Dockerfile_CMD . 



What is difference b/w RUN & CMD?

RUN instructions will be executed while creating a image. 
CMD Instructions will be executed while creating a container.
We can have more than one RUN keyword in a docker file.
All the RUN keywords will be processed while creating an image in the defined order(top to bottom).

Can we have more than one CMD in dockerfile?
Yes you can have. But only the last one/recent one in the order will be proccessed 
while creating a container.



ENTRYPOINT --> ENTRYPOINT configures a container that will run as an executable.
           ENTRYPOINT is a command or script that is executed when you run the docker container.


Dockerfile_EP:  
FROM ubuntu
RUN mkdir /opt/class30
RUN touch /opt/class30/jobs
ADD . /opt/class30  
ENTRYPOINT ["echo", "I am rich from ENTRYPOINT"]

How is ENTRYPOINT different from CMD?
1. Both are command instructions executed while creating a container 
2. ENTRYPOINT can't be over riden while we can over ride CMD 

ENV --> ENV instruction sets the environment variable and this sets the environment for the subsequent build instructions. It takes two forms: one with a single variableENV <key> <value> and another with multiple variables ENV <key> =<avlue> <key> = <value>.



ARG -> ARG Instruction defines a variable that can be passed at build time. Once it is defined in the Dockerfile you can pass with this flag --build-arg while building the image. We can have multiple ARG instruction in the Dockerfile. ARG is the only instruction that can precede the FROM instruction in the Dockerfile.

ARG values are not available after the image is built. A running container won’t have access to an ARG variable value


EX:

ARG TAG=latest
FROM centos:$TAG
docker build -t <image-name>:<tag> --build-arg TAG=centos8 .


WORKDIR --> WORKDIR  is used to define the working directory of a Docker container at any given time. The command is specified in the Dockerfile.It is optional (default is / , but base image might have set it), but considered a good practice. Subsequent instructions in the Dockerfile, such as RUN , CMD and ENTRYPOINT will operate in this dir.

Ex:

WORKDIR /app


LABEL

The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. To include spaces within a LABEL value, use quotes and backslashes as you would in command-line parsing. A few usage examples:


LABEL branch=develop

LABEL description="This text illustrates"


An image can have more than one label. You can specify multiple labels on a single line.

LABEL label1="value1" label2="value2" other="value3"



USER 

The USER instruction sets the user name (or UID) and optionally the user group (or GID) to use when running the image and for any RUN, CMD and ENTRYPOINT instructions that follow it in the Dockerfile


  
  
EXPOSE

The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime.

The EXPOSE instruction does not actually publish the port. It functions as a type of documentation between the person who builds the image and the person who runs the container, about which ports are intended to be published. To actually publish the port when running the container, use the -p flag on docker run to publish and map one or more ports.

EXPOSE 8080  


Dockerfile Best practices:
==========================
1. We should use executable over shell form for CMDs and ENTRYPOINTs instructions 
2. Reduce the number of RUN instructions as much as possible. 
   This will reduce the number Layers and keep our images light weight.  
3. Use Official/Trusted docker base images in your Dockerfile 
    FROM ubuntu/tomcat 
4. Use light weight alpine linux where ever possible
   https://hub.docker.com/_/alpine
   ubuntu/centos/alpine   
5. scan images before usage 
     docker scan imageID/Name 

6) Don't install/have unnecassary packages(Softwares) & Don't
   copy unnecassary files & Folders .

7) Don't run container process as root user. Start container
   process(Application) as non root user. 

8) Try to Scan images for fulnerabilites(Clair ,Anchor or Trivy or Inbuilt Scaning in ECR/GCR/ACR).

9) Try to use multi Stage Docker files to reduce size of the image where ever it's applicable 
https://github.com/LandmakTechnology/Dockerfiles

10. Keywords should be in uppercase to distinguish it from arguments 

multi Stage Docker files:
1. Clone  
2. Build  
3. DeployAsContainer 

FROM ubuntu:git 
WORDIR /home/ubuntu/
RUN clone https://git/repo/webapps \ 
    && cd  webapps
    && mvn install 
FROM tomcat:71-jdk8-corretto-al2   


#git
FROM alpine/git as repo
MAINTAINER mylandmarktech@gmail.com
WORKDIR /app
RUN git clone https://github.com/LandmakTechnology/maven-web-application

#Maven
FROM maven:3.5-jdk-8-alpine as build
WORKDIR /app
COPY --from=repo /app/maven-web-application  /app
RUN mvn install

#Tomcat
FROM tomcat:8.0.20-jre8
#COPY  /app/target/*war /usr/local/tomcat/webapps/maven-web-app.war
COPY --from=build /app/target/*war /usr/local/tomcat/webapps/

ubuntu@docker:~/web/laps$ docker system prune
WARNING! This will remove:
  - all stopped containers
  - all networks not used by at least one container
  - all dangling images
  - all dangling build cache



FROM ubuntu:latest
RUN apt-get -y update && apt-get -y upgrade \
RUN apt-get -y install openjdk-8-jdk wget
RUN mkdir /usr/local/tomcat
RUN wget http://apachemirror.wuchna.com/tomcat/tomcat-8/v8.5.46/bin/apache-tomcat-8.5.46.tar.gz -O /tmp/tomcat.tar.gz
RUN cd /tmp && tar xvfz tomcat.tar.gz \
    && cp -Rv /tmp/apache-tomcat-8.5.46/* /usr/local/tomcat/
EXPOSE 8080
CMD /usr/local/tomcat/bin/catalina.sh run

FROM ubuntu:latest
RUN apt-get -y update && apt-get -y upgrade \
    && apt-get -y install openjdk-8-jdk wget \
    &&  mkdir /usr/local/tomcat \
    && wget http://apachemirror.wuchna.com/tomcat/tomcat-8/v8.5.46/bin/apache-tomcat-8.5.46.tar.gz -O /tmp/tomcat.tar.gz
    && cd /tmp && tar xvfz tomcat.tar.gz \
    && cp -Rv /tmp/apache-tomcat-8.5.46/* /usr/local/tomcat/
EXPOSE 8080
CMD /usr/local/tomcat/bin/catalina.sh run

Dockerfile keywords/instructions:
=================================
FROM  
COPY  
ADD 
RUN 
CMD 
ENTRYPOINT 
WORKDIR ENV  
LABEL  
ARG 
USER 
EXPOSE   
VOLUME  
MAINTAINER  

Micro-services and 
Docker networks   
volumes and 
Docker compose  
docker swarm

http://44.211.75.85:3000/landmarktechnologies

curl -v 44.211.75.85:3000/html  

docker run -d -p 30000:9981  mylandmarktech/nodejs-fe-app


FROM amazoncorretto:8-al2-jdk

ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
RUN mkdir -p "$CATALINA_HOME"
WORKDIR $CATALINA_HOME

ARG 
FROM 

ARG TAG=latest
FROM centos:$TAG

docker build -t <image-name>:<tag> --build-arg TAG=centos8 .

Docker networks & Micro-services:
===================================
What is a network ?
Group of servers/devices connected to each other in a specific network. If Servers
are in same network each one can talk to another server.

Docker network
=============
If One Container has to talk to another Container 
Using ContainerIP/Name(DNS) in Docker.
Both has to created under same docker network.

If Containers are in two different networks. 
They can't access each other.

How to list networks in docker?

ubuntu@docker:~$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
7403f6b74f30   bridge    bridge    local
f9f9a99c2c85   host      host      local
0f1d053a3f91   none      null      local

Default bridge network 

custom bridge network
host network
none network

ebay webapp: monolithic architecture 
   login/registration/cart/pay/order/return  

microservices architecture:
 ebay.war  = decoupled   
   login.jar
   registration.jar
   cart.jar
   pay.jar
   order.jar
   return.jar  

easy to manage/
  monolithic = ebay / 20,000 lines of code 

  microservices architecture:
   login 2,000 lines of code 
   registration 4,000 lines of code 
   cart 2,000 lines of code 
   pay 6,000 lines of code 
   order 2,000 lines of code 
   return 8,000 lines of code   
easy to  scale  :
    login=20m - 28m /
    reg=20 /
    cart=8m /
    pay=7m/
    order=7m /
    returns=1m ] 

better/efficient resource usage : 

versioning is easier to manage with microservices

We support Java based applications:
===================================
We support nodeJS and .net based applications:
==============================================
Ticket024:
  Deploy a microservice application for tesla.  
  - GitHub repository
    https://github.com/LandmakTechnology/spring-boot-docker
  - dockerHub repository
    mylandmarktech/sping-boot-mongo

spring:
  data:
    mongodb:
      host: ${MONGO_DB_HOSTNAME}
      port: 27017
      username: ${MONGO_DB_USERNAME}
      password: ${MONGO_DB_PASSWORD}
      database: users
      authentication-database: admin
server:
  port: 8080
spring:
  data:
    mongodb:
      host: dbserver
      port: 27017
      username: devdb
      password: devdb123
      database: users
      authentication-database: admin

we need to deploy the springapp and the database - mongo
vi sp.sh    
  docker pull mylandmarktech/sping-boot-mongo
  docker pull mongo
  docker network create tesla
  docker run --name springapp -d -p 8080:8080
  docker run --name mongodb    


vi sp.sh    
  docker pull mylandmarktech/sping-boot-mongo
  docker pull mongo
  docker network create tesla
  
docker run --name mongodb --network tesla -e MONGO_INITDB_ROOT_USERNAME=devdb -e MONGO_INITDB_ROOT_PASSWORD=devdb@123   

docker run --name springapp -d -p 8080:8080 --network tesla -e MONGO_DB_HOSTNAME=mongodb -e MONGO_DB_USERNAME=devdb -e MONGO_DB_PASSWORD=devdb@123  mylandmarktech/sping-boot-mongo

 database:  HOSTNAME      USERNAME       PASSWORD   network  
            mongodb       devdb          devdb@123   tesla    
1.spingapp: mongodb       devdb          devdb@123   tesla  


      host: ${MONGO_DB_HOSTNAME}
      port: 27017
      username: ${MONGO_DB_USERNAME}
      password: ${MONGO_DB_PASSWORD}


      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example


 3.22.217.29:8080/
docker run --name mongodb --network tesla -e MONGO_INITDB_ROOT_USERNAME=devdb -e MONGO_INITDB_ROOT_PASSWORD=devdb@123 -v /tmp/mydata:/data/db mongo 

docker run --name app -d -p 8000:8080 --network tesla mylandmarktech/java-web-app 
docker run --name webapp -d -p 7000:8080 mylandmarktech/maven-web-app 


ubuntu@docker:~$ docker network

Usage:  docker network COMMAND

Manage networks

Commands:
  connect     Connect a container to a network
  create      Create a network
  disconnect  Disconnect a container from a network
  inspect     Display detailed information on one or more networks
  ls          List networks
  prune       Remove all unused networks
  rm          Remove one or more networks

 docker network connect webapp tesla  

docker run --name app -d -p 8000:8080 mylandmarktech/java-web-app 

docker network create/inspect/ls/disconnect/connect/rm/prune:
============================================================

-# Remove unused networks
docker network prune 

-# Remove Network
docker network rm <networkNameOrId>

Docker Host Network.:
If we create containers in host network. 
Container will not have IP Address.
 Container will be created in a system network.

docker run --name webapp -d -p 7000:8080 mylandmarktech/maven-web-app 

docker run --name javaapp -d --network host mylandmarktech/java-web-app
   ContainerPort: 8080 

docker run --name apps -d --network host mylandmarktech/java-web-app
   ContainerPort: 8080 

docker run --name hello -d --network host mylandmarktech/hello  
  ContainerPort: 80



ContainerPort: 8080    

We can't create more than one container with same container port in host network.
   landmark-web-app  = containerPort,  EXPOSE=8080  
   java-web-app      = containerPort,  EXPOSE=8080  
   maven-web-app     = containerPort,  EXPOSE=8080  

Docker none/null network
========================
If we create container in none/null network. Container will not have IP Address.
We can't access  containers in this network  
docker run --network none                     
Internal or external 

docker run --name hello -d --network none mylandmarktech/hello   

Isolation
  docker run --ebay host -d --name hello mylandmarktech/hello   
  docker disconnect hello ebay  
  docker connect hello none  


docker volumes and docker compose:
