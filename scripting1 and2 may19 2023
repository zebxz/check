
DevOps/Cloud/SRE/DevSecOps/Application Engineering
Platform/Kubernetes/Infrastructure Engineering
============================================

Automating IT processes/workloads with GUI/CLI and Scripting
=============================================================                  (CLI is part of scripting)  
Automating IT:
   processes
   workloads 
   jobs    
   tasks  

****** with the help of scripting creating user is very simple

We need computer systems to carryout tasks:
===========================================
Computer/systems:
  1. Bare Metal / HardWare components 
      RAM - memory 
      Cpu 
      ROM - hard disk / volume / storage 
      MOUSE
      KEYBOARD
      Screen
  2. Software components 
      operating system = OS [This is the heart a computer] : 
        Windows OS [ 7/xp/8/9/10/11 ]
        MacOS 
        Solaris  
        Linux  OS: distributors
          Radhat 6/7/8/9 / 
          ubuntu  [16/18/20/22] / 
          centos 6/7/8/9 / 
          debain / amazon Linux / suse / etc.  
      and
      other softwares :
         shell 
         Sublime text
         mobaXterm / gitbash / telegram /    
         Microsoft word/Excell  




Examples of workloads:
  fileMGT :mg8 file
 userMGT: mange users
 packageMGT: manage the packages given to my system
 securityMGT : ensures my system is secure
 systemMGT : ensures the system is functioning very well
 etc.



******* for us to be able to achieve this workload and more what do we need 
for our workload to be deployed to production, workload mgt on computing systems 


Workload management on Computer systems [LINUX OS] :
    GUI: = Graphical user interface  -- 5%
    CLI: = command line interface    -- 
            aws ec2 describe-instances  
     Linux OS = Linux servers/systems
      ls:   = list the content of a directory
      touch test.txt



BUT NOW WE WANT TO TALK ABOUT SCRIPTING 
    scripts: a shell-script is a collection of one or more commands in a file 
             a script is a file containing commands  
    write a simple script that welcomes Engineers to work?
 

   welcome.sh    :       (name of my script)  
    ==========
     #!/bin/bash           ( the shell script starts with what is called a shebang !, to indicate the interpreter)
     echo "Good morning"
     whoami
     echo "Welcome to Landmark Technologies" 
     echo "Today is"
     date 

 ********* now the script has been created
we can cat the file to see the content
cat welcom.sh


     run the script by:
       ./scriptName = ./welcome.sh
       ./script1.sh

[oke@demo22 ~]$  ./welcome.sh
-bash: ./welcome.sh: Permission denied
[oke@demo22 ~]$ ll
-rw-r--r--. 1 oke oke 107 May 18 19:42 welcome.sh
 644 Permissions  
 The file/script need executable Permissions to run  

therfore assign executable permissions
    chmod 744 welcome.sh            .... executable permission only to the user
    chmod  u+x scriptName            ......... executable permission only to the user 
    chmod   +x scriptName              ........ will add executable permission to both the owner, the group, and others
     chmod +x fileName   
  chmod +x script1.sh
  chmod 775 fileName 
  chmod 700 fileName 

  
[oke@demo22 ~]$ ll
   -rwx-r--r--. 1 oke oke 107 May 18 19:42 welcome.sh

now the file ha executable permission

 
    shell: A shell is an interpreter that interpretes commands to the OS. 
its a program that takes commands from the keyboard and gives them to the operating system to perform (in a file) 


therfore an interpreter is needed when executing a script

40.00
shells command interpreters:
  Boune Shell  (sh)
  Boune Again Shell (bash)
  csh / ksh / tsh / zsh  


                                  HOW TO CHECK FOR THE INTERPRETERS RUNNING INMY SYSTEM OR THE ONE AM USING TO EXECUTE COMMAND 

  echo $SHELL       =  List your current shell
      /bin/bash
  cat /etc/shells   = List all shells in your system
     /bin/sh
     /bin/bash
     /usr/bin/sh
     /usr/bin/bash
     /bin/csh
     /bin/tcsh
     /usr/bin/csh
    /usr/bin/tcsh

  sudo yum install ksh zsh -y 
  [oke@demo22 ~]$ cat /etc/shells           
/bin/sh                                ******  WE CAN interprete our script using any of the interpreter
/bin/bash
/usr/bin/sh
/usr/bin/bash
/bin/csh
/bin/tcsh
/usr/bin/csh
/usr/bin/tcsh
/usr/bin/zsh
/bin/zsh
/bin/ksh
/bin/rksh
/usr/bin/ksh
/usr/bin/rksh

  bash -c ls  or ls   
  cat /home/oke/welcome.sh  [accessing the file using the absolute path]
  cat welcome.sh  [accessing the file using the relative path]


Running a script with interpreter doesnt require executable permission


                          Bash shell Scripting:
a shell script must end with .sh oR .sc

Naming convention:
Naming conventions best practices:
bash Shell-scripts   = script.sh or hello.sc  
Shell-scripts has '.sc' or '.sh' extensions 
    scriptname.sh  or 
    scriptName.sc or 
    *.sh or 
    *.sc 
  deploy.sh  = Shell-script [*.sh]
  test.txt   = text file    [*.txt]
  app.sc     = Shell-script [*.sc]
  app.java   = java code    [*.java] 
  monitor.py = python code/script [*.py] 
  app.yaml   = playbook or manifest file [*.yml] 
  main.tf    = terraform scripts/codes [*.tf]
==============================================


eg 
file name : script1.sh
then vi script1.sh  
#!/bin/bash
echo "Good morning Millionaire,"
whoami
echo Welcome to Landmark Technologies Millionaire Deployment
echo Today is,
date

now the script has been created

we can run the script = sh

[oke@demo22 ~]$ sh /home/oke/script1.sh
Good morning Millionaire,                         ********* the script wa sable to run bc we used an interpreter (sh)
oke
Welcome to Landmark Technologies Millionaire Deployment
Today is,
Thu May 18 20:13:41 EDT 2023
[oke@demo22 ~]$
[oke@demo22 ~]$ /home/oke/script1.sh
bash: /home/oke/script1.sh: Permission denied        ********* because it needs permission
[oke@demo22 ~]$
[oke@demo22 ~]$ sh script1.sh
Good morning Millionaire,
oke
Welcome to Landmark Technologies Millionaire Deployment
Today is,
Thu May 18 20:14:15 EDT 2023



                           Scripting or automation langauges :
 
1. Bash Shell Scripting
  2. Python       ( we will cover some python scripting)
  3. Groovy  (Jenkins)
  3. Ruby                ( we will nt cover the course)
  4. Yaml  
      (k8s, Ansible, CloudFormation)
  5. JSon / java                       (some projects)
  6. HCL - Terraform                      (configuration language)
  7. XML = 
  8. html 
  9. go/golang 
  10. powershell 

Tasks - ticket0014:
  TK-deploy-00123 
write a shell simple script to deploy applications 
1. Create a deployment directory  
2. create a deployment; app.java file  
3. assign read Permission to app.java file
4. changing ownership of app.java file 
5. copy the file to the app directory  


filename deploy


#!/bin/bash
echo" tesla project is ready fo rthe market"
echo" deployment started"
mkdir deployment
touch  deployment/app.java
chmod  744 deployment /app.java
mkdir app
cp deployment/app.java app
echo "deployment successful"
whoami                                                             ****** the backquote key (whoami)
echo"congratulations 'whoami' i am deployed as a millionaire"
echo'i will succeed in jesus name '
              

1:07:32
         #COMMENT
MEANS THE LINE IS commented and cannot be executed, commented lines start with #


comment.sh  
#!/bin/bash
echo 'single line comment starts'
echo 'deployment stsrted'
# This script welcome Engineers to Landmark.
# comented lines starts with #
# Only run this script on Linux systems
# Author: Prof. Simon
# Copyright C Landmark Technologies
# whoami
date
echo welcome to Landmark Technologies millionaire deployment
echo 'single line comment ends'


RUN :    sh comment.sh
our output doesnt display the ocmmented lines
'deployment started'
august 15
single line commend ends



MULTI LINE COMMENTS
Multi line comment starts with :<< and a word (<< boy)
the multiline script must end with  the same word after the two << which it started with 
only lines written before <<(boy) will display and lines written at the end after the starting word (boy) has been written will display as well when you run the script but
lines written after <<(boy) and before (boy) is written at the end will not display whne you run the script 


mlc.sh    (script name)
echo "Multi-line comment starts"
<<boy
This script welcome Engineers to Landmark.
Only run this script on Linux systems
Author: Prof. Simon
Copyright C Landmark Technologies
pwd
boy
echo "Multi-line comment ends"
date
whoami

******** when the script is run,as seen below , only line 1,8,9 and 10 will display bc any line written between the first (boy) and last (boy) wont display

[oke@demo22 ~]$ sh mlc.sh
Multi-line comment starts
Multi-line comment ends
Thu May 18 20:40:35 EDT 2023
oke




<<rich
This script welcome Engineers to Landmark.
Only run this script on Linux systems
Author: Prof. Simon
Copyright C Landmark Technologies
pwd
rich




                How to make your codes/scripts:
  easily readable/understandable 
  1. by adding notes/comments/explanations 
it gives meaning to a script, it gives more explnantion 
the script can easily be used again in the future
even people without IT knowledge can easily appreciate some technology documents


Who are the comments meant for?
  1. It make your script/code to be understood by you and others over time. 
  2. It make your script/code easily reusable in the future
  3. Facilitate/ease troubleshooting and debugging
  4. comments are Good for teams: Team of 14 
        6. developers writing codes/scripts 
        1. Scrum master 
        3. DevOps Engineers 
        1. DevOps Security Engineer 

Making your script portable.  
1. Hard coding 
2. soft coding   



 
using variables in scripting:
============================
name=SimonLegah
cpy=LandmarkTechnology
how to call variables in bash shell scripting:
  $variableName 
  ${variableName} 

var1.sh  
[oke@demo22 ~]$ cat var1.sh
#!/bin/bash
name=SimonLegah
cpy=LandmarkTechnology
echo "Good morning $name"
echo "Good morning ${name}"
echo Welcome to $cpy
echo Good morning ${name}, welcome to $cpy.

variables:
variables are defined by the either the user or the system 
we can refer/call a variable with $variable 

User defined variables   = UDV  : 
 Are defined/created by some admins  
udv.sh  
 name=SimonLegah
 cpy=LandmarkTechnology  
 city=Toronto
 country=Canada  
 echo $name works for $cpy located in $city, $country    

system defined variables   = SDV  : 
 SDV Are variables that comes with the OS  
 Such variables are in uppercase  
  SHELL=bin/bash
  echo $SHELL  = /bin/bash
  env = List all system defined variables  

sdv.sh 
city=Toronto
APP=TeslaApplication
echo $USER works for LandmarkTechnology, $city
echo $PWD
echo $SHELL
echo This $APP is the best version in the market.
# udv are or should be written in lowercase. Highly recomended
# sdv  are written in upper case

[oke@demo22 ~]$ env
SHELL=/bin/bash
HISTCONTROL=ignoredups
SYSTEMD_COLORS=false
HISTSIZE=1000
HOSTNAME=demo22
PWD=/home/oke
LOGNAME=oke
HOME=/home/oke

start writing your script with shebang [#!] /bin/sh]

MTN =    




