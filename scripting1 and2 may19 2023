
DevOps/Cloud/SRE/DevSecOps/Application Engineering
Platform/Kubernetes/Infrastructure Engineering
============================================

Automating IT processes/workloads with GUI/CLI and Scripting
=============================================================                  (CLI is part of scripting)
Automating IT:
   processes
   workloads 
   jobs    
   tasks  

****** with the help of scripting creating user is very simple

We need computer systems to carryout tasks:
===========================================
Computer/systems:
  1. Bare Metal / HardWare components 
      RAM - memory 
      Cpu 
      ROM - hard disk / volume / storage 
      MOUSE
      KEYBOARD
      Screen
  2. Software components 
      operating system = OS [This is the heart a computer] : 
        Windows OS [ 7/xp/8/9/10/11 ]
        MacOS 
        Solaris  
        Linux  OS:
          Radhat 6/7/8/9 / 
          ubuntu  [16/18/20/22] / 
          centos 6/7/8/9 / 
          debain / amazon Linux / suse / etc.  
      and
      other softwares :
         shell 
         Sublime text
         mobaXterm / gitbash / telegram /    
         Microsoft word/Excell  

Examples of workloads:
  fileMGT / userMGT / packageMGT/ securityMGT / systemMGT / etc.

Workload management on Computer systems [LINUX OS] :
    GUI: = Graphical user interface  -- 5%
    CLI: = command line interface    -- 
            aws ec2 describe-instances  
     Linux OS = Linux servers/systems
      ls:   = list the content of a directory
      touch test.txt

    scripts: a shell-script is a collection of one or more commands in a file 
             a script is a file containing commands  
    write a simple script that welcomes Engineers to work?
    welcome.sh
    ==========
     #!/bin/bash 
     echo "Good morning"
     whoami
     echo "Welcome to Landmark Technologies" 
     echo "Today is"
     date 
     run the script by:
       ./scriptName
       ./welcome.sh
       ./script1.sh
[oke@demo22 ~]$  ./welcome.sh
-bash: ./welcome.sh: Permission denied
[oke@demo22 ~]$ ll
-rw-r--r--. 1 oke oke 107 May 18 19:42 welcome.sh
 644 Permissions  
 The file/script need executable Permissions to run  
    chmod 744 welcome.sh  
    chmod  u+x scriptName 
    chmod   +x scriptName  
   [oke@demo22 ~]$ ll
   -rwx-r--r--. 1 oke oke 107 May 18 19:42 welcome.sh
Assign executable Permission:
  chmod +x fileName   
  chmod +x script1.sh
  chmod 775 fileName 
  chmod 700 fileName 

    shell: A shell is an interpreter that interpretes commands to the OS. 

shells command interpreters:
  Boune Shell  (sh)
  Boune Again Shell (bash)
  csh / ksh / tsh / zsh  

  echo $SHELL       =  List your current shell
      /bin/bash
  cat /etc/shells   = List all shells in your system
     /bin/sh
     /bin/bash
     /usr/bin/sh
     /usr/bin/bash
     /bin/csh
     /bin/tcsh
     /usr/bin/csh
    /usr/bin/tcsh

  sudo yum install ksh zsh -y 
  [oke@demo22 ~]$ cat /etc/shells
/bin/sh
/bin/bash
/usr/bin/sh
/usr/bin/bash
/bin/csh
/bin/tcsh
/usr/bin/csh
/usr/bin/tcsh
/usr/bin/zsh
/bin/zsh
/bin/ksh
/bin/rksh
/usr/bin/ksh
/usr/bin/rksh

  bash -c ls  or ls   
  cat /home/oke/welcome.sh  [accessing the file using the absolute path]
  cat welcome.sh  [accessing the file using the relative path]

Bash shell Scripting:

Naming convention:
Naming conventions best practices:
bash Shell-scripts   = script.sh or hello.sc  
Shell-scripts has '.sc' or '.sh' extensions 
    scriptname.sh  or 
    scriptName.sc or 
    *.sh or 
    *.sc 
  deploy.sh  = Shell-script [*.sh]
  test.txt   = text file    [*.txt]
  app.sc     = Shell-script [*.sc]
  app.java   = java code    [*.java] 
  monitor.py = python code/script [*.py] 
  app.yaml   = playbook or manifest file [*.yml] 
  main.tf    = terraform scripts/codes [*.tf]
==============================================
script1.sh  
#!/bin/bash
echo "Good morning Millionaire,"
whoami
echo Welcome to Landmark Technologies Millionaire Deployment
echo Today is,
date

[oke@demo22 ~]$ sh /home/oke/script1.sh
Good morning Millionaire,
oke
Welcome to Landmark Technologies Millionaire Deployment
Today is,
Thu May 18 20:13:41 EDT 2023
[oke@demo22 ~]$
[oke@demo22 ~]$ /home/oke/script1.sh
bash: /home/oke/script1.sh: Permission denied
[oke@demo22 ~]$
[oke@demo22 ~]$ sh script1.sh
Good morning Millionaire,
oke
Welcome to Landmark Technologies Millionaire Deployment
Today is,
Thu May 18 20:14:15 EDT 2023

Scripting or automation langauges :
  1. Bash Shell Scripting
  2. Python 
  3. Groovy  (Jenkins)
  3. Ruby
  4. Yaml  
      (k8s, Ansible, CloudFormation)
  5. JSon / java
  6. HCL - Terraform  
  7. XML = 
  8. html 
  9. go/golang 
  10. powershell 

Tasks - ticket0014:
  TK-deploy-00123 
write a shell simple script to deploy applications 
1. Create a deployment directory  
2. create a deployment; app.java file  
3. assign read Permission to app.java file
4. changing ownership of app.java file 
9. copy the file to the app directory  

How to make your codes/scripts:
  easily readable/understandable 
  1. by adding notes/comments/explanations 

comment.sh  
#!/bin/bash
echo 'single line comment starts'
# This script welcome Engineers to Landmark.
# comented lines starts with #
# Only run this script on Linux systems
# Author: Prof. Simon
# Copyright C Landmark Technologies
# whoami
date
echo welcome to Landmark Technologies millionaire deployment
echo 'single line comment ends'

mlc.sh 
echo "Multi-line comment starts"
<<boy
This script welcome Engineers to Landmark.
Only run this script on Linux systems
Author: Prof. Simon
Copyright C Landmark Technologies
pwd
boy
echo "Multi-line comment ends"
date
whoami

[oke@demo22 ~]$ sh mlc.sh
Multi-line comment starts
Multi-line comment ends
Thu May 18 20:40:35 EDT 2023
oke


<<rich
This script welcome Engineers to Landmark.
Only run this script on Linux systems
Author: Prof. Simon
Copyright C Landmark Technologies
pwd
rich

Who are the comments meant for?
  1. It make your script/code to be understood by you and others over time. 
  2. It make your script/code easily reusable in the future
  3. Facilitate/ease troubleshooting and debugging
  4. comments are Good for teams: Team of 14 
        6. developers writing codes/scripts 
        1. Scrum master 
        3. DevOps Engineers 
        1. DevOps Security Engineer 

Making your script portable.  
1. Hard coding 
2. soft coding   

using variables in scripting:
============================
name=SimonLegah
cpy=LandmarkTechnology
how to call variables in bash shell scripting:
  $variableName 
  ${variableName} 

var1.sh  
[oke@demo22 ~]$ cat var1.sh
#!/bin/bash
name=SimonLegah
cpy=LandmarkTechnology
echo "Good morning $name"
echo "Good morning ${name}"
echo Welcome to $cpy
echo Good morning ${name}, welcome to $cpy.

variables:
variables are defined by the either the user or the system 
we can refer/call a variable with $variable 

User defined variables   = UDV  : 
 Are defined/created by some admins  
udv.sh  
 name=SimonLegah
 cpy=LandmarkTechnology  
 city=Toronto
 country=Canada  
 echo $name works for $cpy located in $city, $country    

system defined variables   = SDV  : 
 SDV Are variables that comes with the OS  
 Such variables are in uppercase  
  SHELL=bin/bash
  echo $SHELL  = /bin/bash
  env = List all system defined variables  

sdv.sh 
city=Toronto
APP=TeslaApplication
echo $USER works for LandmarkTechnology, $city
echo $PWD
echo $SHELL
echo This $APP is the best version in the market.
# udv are or should be written in lowercase. Highly recomended
# sdv  are written in upper case

[oke@demo22 ~]$ env
SHELL=/bin/bash
HISTCONTROL=ignoredups
SYSTEMD_COLORS=false
HISTSIZE=1000
HOSTNAME=demo22
PWD=/home/oke
LOGNAME=oke
HOME=/home/oke

start writing your script with shebang [#!] /bin/sh]

MTN =    




