******** from bootcamp Dec26 
Interview :

 ANOTHER PROBLEM     ( ROLL BACKS, due to no code quality software )
we had a serious issue with one of our client where we managed a fintech appl, we kept having multiple rollbacks 
we will deploy the appl but the client will call back informing us that smt was wrong, there were multiple rolbacks , i was tasked to invetsigate what was the problem bc 
that doesnt give a good image abt our software cy, so i began researching, the build was successful, deployment has happend but thers still rollback
then i realise that in our pipeline, something was missing on the pipeline, a code quality checker, there was no tool that was been use to check for code quality to ensure 
that the applicatons we rae deploying ra deployed form quality sofware that the no. of testcases that developers are writing are commesorat to the no. of code that they are 
developer , so when i realised that was the problem , i immediately explained that to our team in one of our sprint review meeting and i instantly recommended that we shud
use sonarqube bc in my research that sonarqube will be a very good code quality checker and that was the problem we were facing and the recommendation was to use sonarqube 
so we use sonarqube .

and i was tasked again to know how sonarqube can be fully deployed in our env  and thats how i came up with the white paper on sonarqube setup in our env and frm that paper
i learned the steps on how to get sonarqube installed , whcih is very simple, u go to the sonarqube site, u download the latest version of the sonqrqube software via the wget
command and extract it and start sonar ,  sonar.sh start 
sonar starts,and once that is done we can now access it via the browser and frm ther we can now modify our project fie under the properties tag, we modify it with our sonarqube
aerver login credential details and frm ther sonarqube is now part of our pipeline, jenkins integrate with sonarqube for code quality analysis , we introduce sonarqube , we
strated setting up our own benchmark for code quality and as such today we dnt hv huge incidents where we hv to be rolling back on deployments bc before any deployment is done
we expect that the codes hv been qualified , its deployed from quality software, that is the problem we hv faced in our env and thats how we fixed it 





################################    START


SONARQUBE  

TYPES OF TESTING, CODE QUALITY TOOLS, CODE QUALITY BENCHMARK, COMPARING ACTUAL RESULT AGAINST BENCHMARK, CODE QUALITY, SONARQUBE COMPRISES OF, WHERE IS THE SONARQUBE HOME DIR
 VERSIONS OF SONARQUBE WE CAN INSTALL IN OUR ENVIRONMENT, 

sonarqube for code quality analysis.... sonar2 



********** java is a prerequisite for sonar
if java is not installed sonarqube cant run 


the theory 37:30, 

developers write testcases & unit 

log in with default username and password

1:25
1:13:18    copy package mgt link in running note 

1:32:30  After sonar installed, installed  sudo yum install tree


57:00 *******  duplication can be avoided by using function

***************************************************************************************************************************************

                             START



   sonarqube  home dir/opt/sonar


33:00    Sonarqube  has to do with software quality 

code quality with sonarqube & sonar cloud 

software testing :before application is deployed we have to do software testing 



                                                  TYPES OF TESTING 

UNit testing [Junit ) : Used to test individual ,  line , units or components of a code 

functional testing: we test how the code ( Application is functioning)

42:30 

REgression testing : frm v1, v2, v3,  
if we add 500 lines to v3, we use 
Regression testing to check if the entire application is working  well based on the addition to the app

eg
helloworld .java = 500 lines of code
helloword test.java = 500 Junit cases cases  expected 


performance testing : is it performing as desire 
penertration:    To test if anyone can break into  the system  using any username & password


                                         CODE QUALITY TOOLS

code quality  tools
sonarqube, sonarcloud , resheper, codacy, checkmarks



we have our java projects we are managing in git/github
src codes : app.java
JunitTests cases: appTEst.java         10,000 lines of code
build scripts - pom.xml:                 4,000 unit test cases


   maven   = mvn package 
1) validate 
2) compiles   [app.java >>> app.class]
3) testing (run unit testing) pass
4) pacakges will be created

  therfore: there is a quality gate in maven 
however, it runs unit testing on the number of testcase developers
have written but most of the time developers will not write the code as desired thats why we need code quality tool to check, but maven doesnt check if
developers have written the desired number of testcases

  Using code quality tool quality tool in the same example above 
 src                  = 10,000l
Junit -Test-Cases     = 4,000L
CODE COVERAGE         = 4,000/10000 * 100 = 40%
Developers have tested ONLY 40% of their job/softwares
This could result to poor quality software developed


                                               QUESTION

IQ: Tell us a project/change you introduce in your environment 
    which you are proud of.
    Answer = I introduce sonarqube for code quality and am proud of it because it has enabled us to develop quality software and it has reduced the number of code breaks ,
bugs and roll backs


                            CODE QUALITY BENCHMARK

CodeQuality Benchmarks:
sonarqube/Benchmarking for CodeQuality:
Standards for CodeQuality :
  1. code covergae   = 80% plus                  **** eg, 1000lines of code 
  2. code smells     = less than 5                             standard : 800 Junit -test-cases
  3. bugs            = 0                                        Actual: 900 Junit-test-cases
  4. vulnerabilities = 0  
  5. portability     = high   
  6. duplicate lines = less than 5%  [ functions ]  
 

54:50 example of cde smell, writing codes without following certain standards could result to cfe smell
example of hardcoding: 
name=paul 
echo "my name is$name"   ... this code lacks portability bc if u execute this code/run this script u will get "paul"
BUT
using a dynamic script
echo ' WHAT IS YOUR NAME'
 read name    .. *** this variable can take multiple values  (paul, joh, joe etc)
echo "welcome $name"  

**** so if u dnt make your code to be very dynamic it could result to code smell


57:00

eg OF code smell is not following the right syntax , writing bad codes with poor syntax, writing codes that are not dynamic , duplicate code or bad code, AVoid complex code0
duplication can be avoided by using function



                              COMPARING ACTUAL RESULT AGAINST BENCHMARK

comparing actual results against the benchmark/standards is analysis:
1. How many unit test cases were run?
   How many test cases should have been run? 

2. Is our code readable with ease?   ........ AVoid complex code
    ----> code smells 

3. Is our code portable [ environment independent ]?
portable code means the code is not environment indenpendent 
we can run the code in diff environment like diff environment , port environment & test environment
    -- if not code smells / hard coding 

4. Are there vulnerabilities in the code ?
    ---> if they are then --- 
     eg  password is only 4 characters can result in security breach

Therfore we can set our standard

Benchmark/standards for a quality Software/application:
1. Code coverage should be greater than 85%  
2. Dublicate lines should be less than 5% 
3. There should be no vulnerabilities in the code [pw=1234] 
4. Code smells should be less than 5  


                                              CODE QUALITY

Code Quality expectations:
• Duplicated code  --- Functions
• Coding standards ---  
• Unit tests
• Complex code --- 
• Comments
• Potential Bugs
• Architecture & Design

                                  SONARQUBE COMPRISES OF 

SonarQube comprises of:
  1. sonarqube Scanner: 
  2. sonarqube server :   This comprises of 
       Compute engine 
       database - h2 database
       search engine - elasticsearch
       web-server : means we can access sonarqube information on the browser

1:005

Databases:
1. mySQL = RDS   = Relational databases
  generally data is structured and stored in tables[rows and columns] format         ******* it uses rows and column
  SQL is a langague use to qwery  RDS.   :
  SQL = structured qwery langaguage  
  oracle
eg of structured databases
    oracle
    mySQL  - OS
    PostgreSql  - OS
    MSSQL (MicrosoftSQL)
    DB2
    Sybase
    MySQL, Oracle, Microsoft SQL Server, PostgreSQL 


    ***** it uses rows and column
the data is organised, following a specific pattern , where we have serial no, name ID 
This type of structured is used to prepare report if we are collecting structured data from end users

     USES ROWS AND columns :
SN    NAME       ID-no
1001  Paul       LT0147   user1
1002  Amaka      LT0155   user2  
1003  Simon      LT0163   user3  
1004  Landmark   LT0171   user4 
1005  Dominion   LT0179   user5
1006  Isaac      LT0187   user6
1007  James      LT0195   user7

2. noSQL = noRDS = non Relational databases, unstructured data and stopped in JSON format
  user1 = name/tel/address  
  user2 = name/ssn/date of birth  
  user3 = place of birth / profession / tel
   generally data is unstructured and stored in JSON format  

Examples of non Relational databases:
    MongoDB ---
    Cassandra
    CouchDB, 
    CouchBase, 
    HBase, 
    Redis, 
    Riak, 

Neo4J are the popular NoSQL databases.

eg UnStructured data:
  user1:   FirstName=Simon 
  user2:   ID=01245
  user3:   dob=01/01/1980 
  user4:   tel=12457861
  user1:   LastName=Amaka 
  user100: email=100@hotmail.com


USING Json format to store the users information/data
users{
  user1{
    FirstName: simon 
  }
  user2{
    ID: 01245
  }
  user3{
    dob: 01/01/1980 
  }
}


                           WHERE IS THE SONARQUBE HOME DIR 

The home dir is where the software is extracted and in my work environment its = /opt/sonarqube, its also where we extract the software
THe sonarqube was downloaded with wget and unzipped to extract the software

1:32
1:40

Bin dir: binary contains files like sonar.sh to start sonar
conf dir : conf file like sonar properties where we can change anything 



******* commands to install and check if sonar is running are in (package mgt link)
must be (sonar sonar) to start and check sonar status
sh/opt/sonarqube/bin/linux - x86-64/sonar.sh start/stop/status/restart
when sonar is restarted in AWS, we must start sonar sonar in CLI and after that 
we must vi pom.xml in maven server and change sonar public again 


                    VERSIONS OF SONARQUBE WE CAN INSTALL IN OUR ENVIRONMENT

 versions of sonarqube:

enterprise version 
datacenter version   
Free version  Supports :
  Java,  = 30,000 lines 
  JavaScript,
JavaScript,
  C#, 
  TypeScript,
  Kotlin,
  Ruby, Go, Scala, Flex, Python, PHP, HTML, CSS, XML and 
  VB.NET




  Project for TESLA0045:                  we have an application we are managing for Telsa
======================
https://github.com/LandmakTechnology/maven-web-application           **** this is the github repository

1:32:00
(cd /opt/ , cd sonarqube , in sonar server in CLI , sudo yum install tree -y, when we ls we see the content of sonarqube home dir )


The first step
1. Developers commit/push code to SCM = github   
2. Test + Build using maven   
    mvn package 

3. CodeQuality analysis with SonarQube  = mvn sonar:sonar   :
   Now my maven server needs to be ups and running then cd/web
   Then mvn clean package to create artifacts                               ******** 1:37:30
   Next is to execute code quality analysis therefore we need to integrate our sonarqube in maven using our project file pom.xml
     vi into pom.xml in the maven server and enter sonarqube server   
     credentials under the properties tag  
    connect to your sonarQube server from the browser: sonar public Ip : 9000
      login_username= admin 
      login_password= admin

  1:38:52    To execute  COde quality analysis = mvn sonar : sonar           *** mvn sonar:sonar  this is done for maven to connect to the sonar
comparing actual results against the benchnark/standards
    mvn sonar:sonar   
         1. goal = Sonar  
         2. plugin = sonar

***** sonar qube public ip and sonarqube portnumber = 9000

  First in sonar we install sonar and ensure its running

***** 1:36:26 
then we go into maven server
in maven, cd maven-web-application
we integrate sonaqube for code quality analysis
so we vi pom.xml and insert the public ip of sonar
                                private ip
then mvn sonar:sonar

nexus 1:54:00     mvn package , then restart sonar
mvn sonar:sonar,
mvn deploy 






Installation of sonarqube:
  https://docs.sonarqube.org/latest/requirements/requirements/
  https://www.sonarqube.org/downloads/
https://github.com/LandmakTechnology/package-management/tree/master/soarQube-Installation







~~~~~~~~~#################################### 




 server-IP = 34.213.64.100
 userName  = ec2-user  
 ssh-privateKey= c32.pem

 ssh -i c32.pem  ec2-user@34.213.64.100   

 34.213.64.100:9000
 http://34.213.64.100:9000/about

 publicIP:9000
 34.213.64.100:9000
curl -v localhost:9000

34.213.64.100:9000
default USERNAME: admin
default password: admin

/opt/sonarqube  
SonarQube Home directory = :
What is the sonarqube home directory?
This is where the sonarqube Software is extracted = /opt/sonarqube
wget and unzip 
    /opt/sonarqube  
   /opt/sonar
   /app/sonar

ls
bin:
  binary files / sonar.sh 
  sh sonar.sh [start|status|stop|restart ]  
  sh /opt/sonarqube/bin/linux-x86-64/sonar.sh [start|status|stop|restart] 
  sh /opt/sonarqube/bin/linux-x86-64/sonar.sh status     

conf:  
  sonar.properties
COPYING  
data  
elasticsearch  
extensions  
lib  
logs  
temp  
web





    publicIP  =   34.213.64.100  
    privateIP =   172.0.0.7
    SONARQUBEportNumber = 9000 


        <properties>
                <jdk.version>1.8</jdk.version>
                <spring.version>5.1.2.RELEASE</spring.version>
                <junit.version>4.11</junit.version>
                <log4j.version>1.2.17</log4j.version>
                <sonar.host.url>http:172.0.0.7:9000/</sonar.host.url>
                <sonar.login>admin</sonar.login>
                <sonar.password>admin</sonar.password>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        </properties>

 [ERROR] SonarQube server [http:54.175.245.26:9000] can not be reached

http error code 400 errors = client side     
  400 / 401 / 402 / 403  
Not authorized.
 Not authorized. 
Please check the properties sonar.login and sonar.password.

ANALYSIS SUCCESSFUL, you can browse http://172.0.0.7:9000/dashboard?id=com.mt%3Amaven-web-application

SonarQube 2b running notes starts  
==================================

results:
Coverage on New Code                 is less than  80.0%
Duplicated Lines on New Code         is greater than 3.0%
Maintainability Rating on New Code   is worse than A
Reliability Rating on New Code       is worse than A
Security Rating on New Code          is worse than A

[INFO] Quality profile for java: Sonar way
[INFO] Quality profile for jsp: Sonar way
[INFO] Quality profile for xml: Sonar way

SonarQube Reports depends on:
  1. Rules  
  2. Quality profile
  3. Quality Gates 

Quality Profiles are collections of rules to apply during an analysis.
For each language there is a default Quality profile  

Use tokens instead of passwords:

        <properties>
                <jdk.version>1.8</jdk.version>
                <spring.version>5.1.2.RELEASE</spring.version>
                <junit.version>4.11</junit.version>
                <log4j.version>1.2.17</log4j.version>
                <sonar.host.url>http://172.31.90.124:9000/</sonar.host.url>
                <sonar.login>class31</sonar.login>
                <sonar.password>admin123</sonar.password>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        </properties>





token = 0e25e7125d55f2799499cc871be2416d1fd766de 
userName/Password  

         <properties>
                <jdk.version>1.8</jdk.version>
                <spring.version>5.1.2.RELEASE</spring.version>
                <junit.version>4.11</junit.version>
                <log4j.version>1.2.17</log4j.version>
                <sonar.host.url>http://172.31.90.124:9000/</sonar.host.url>
                <sonar.login>0e25e7125d55f2799499cc871be2416d1fd766de</sonar.login>
                <!-- <sonar.password>admin123</sonar.password>  --> 
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        </properties>

Background:
  CodeQuality []  



SonarCloud = SaaS  
   https://docs.sonarcloud.io/  

GitHub = 

SonarQube  = IaaS  

Sonarqube 2b  — March 16, 2023


Running Background checks  :

sonarQube:

sonarQube2
==========
Please watch and practice Sonarqube 2  video above before next class.

SonarQube 2b running notes starts  
==================================

results:
Coverage on New Code                 is less than  80.0%
Duplicated Lines on New Code         is greater than 3.0%
Maintainability Rating on New Code   is worse than A
Reliability Rating on New Code       is worse than A
Security Rating on New Code          is worse than A

[INFO] Quality profile for java: Sonar way
[INFO] Quality profile for jsp: Sonar way
[INFO] Quality profile for xml: Sonar way

SonarQube Reports depends on:
  1. Rules  
  2. Quality profile
  3. Quality Gates 

Quality Profiles are collections of rules to apply during an analysis.
For each language there is a default Quality profile  

Use tokens instead of passwords:

        <properties>
                <jdk.version>1.8</jdk.version>
                <spring.version>5.1.2.RELEASE</spring.version>
                <junit.version>4.11</junit.version>
                <log4j.version>1.2.17</log4j.version>
                <sonar.ho



  ****************
  name=paul 
 echo "My name is $name"
 
 echo 'WHAT IS YOUR NAME'
 read name
 echo "welcome $name"
 code smells can be the duplicate code, dead code


Standards:
1000 lines of code, Developers should write and execute atleast 800 Junit-Test-Cases

actual results:
1000 lines of code, Developers wrote and executed atleast 900 Junit-Test-Cases
1000 lines of code, Developers wrote and executed atleast 600 Junit-Test-Cases



                 CodeQuality Reports:
                   Standard     actual   results
Code coverage        >85%        70%      Fail 
Duplicate Codes      <5%         15%      Fail  
Bugs                 3            10      Fail





