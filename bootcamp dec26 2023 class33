
12:36 to 16:12


XPLAIN THE K8 ARCHITECTURE

k8 is a grp of servers that are working together to be able to ochestrate containerize applications, its made up of a control plane & worker node, the control planee comes with
components line the API server which is the main adminstrative point and the entry point into the cl8 & it does generally authentication & authoriztion & it ensures that whatevr
Req GETS into the cl8 is been made by an authorized & authenticated individual, apart of the API server, we hv the etcd that persists data in the cl8, it acts as a database ,
whatevr reQ is been made by whoever engr that inf is stored and persisted in the etcd and frm there we also hv the scheduler, which is incharge of scheduling  eg if ports are
been REQuested to be scheduled the sheduler will schedule that considering the nodes that hv available resources for such a port to be hosted and if thers any other constrain
all the constraint are been factored in
we also hv the controler managers that is able to ensure that at all times we hv a  number of nodes running , pods running , deplyments are runing as expected
we also hv the worker nodes comes with the kublets which is the pry node agent, we equally hv the kube proxy, which is incharge of netwrk 
also the container run time, there are diff types of container run time that you can use, docker used to be one of them , also container-D, container runtime is any software in 
your node that is able to create and start containers bc k8 is all abt managing containerized appl n in our env we use containerD as our container run time, we cud hv as well 
choosen other run time but we are using containerD

Also the k8 architecture is such that calls are made into the cl8 and that happens using the k8 client like kubectl or k8 UI form there we can mk certain API calls either to 
create containers, namespaces, security like RBAC and for any of these to happen, authentication must happen via the kube config file

so thats the k8 architecture



your explanation when it comes to migration from monolecthic archited applications to micro services 

 how is your appl designed?? , what is the design of your application, in terms of architecture how is it designed
so we hv either a monolecthic design or a micro service design , 
fo a designed tha is monolized, u are working with an appl and all the components or modules are running as a sinle block of code so developers are working on an appl for 
e-commerce or ebay, that appl can permit a user to log into an ebay account, register , create a cart, select items, make payment etc...this is an appl
how is it designed, it cud either hv a micro service design or monolecthic design wher we hv a single block of code such that the same block of code will permit u to access
ebay, register , etc  thats a monolecthic design or aplication

PROBLEMS OF MONOLETHIC ....................... 20;11
if thers a spike  eg if 10million people are registering but only 1million is making payment, we will hv to scale up both the entire appl even though only 1m is making payment
so thers a lot of waste with resource usage in monolethic design 
also micro service appli are light weight but monelethic are larger and thats a problem

***** so that takes us to micro service applications, in our environment, we hv legacy appl that are running as monolectic which as a devops engr we are now decoupling 
monoletic appl into micro services

WHY DO WE NEED TO DO THIS  ? 
Again, we can run ., what we do is that if we hv an ecommerce appl, ebay.com/ebay.war we can break it down into smaller modules, where login is diff registration is adiff
so if thers a spike when it comes to registration, we will scale just registion .... we are goin to be runing this individual micro services as containers
we hv containers for registerin, container for ordring, container for cart, etc so if thers a spike we scale just that conatiner 



17:30 to 














