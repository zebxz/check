GIT, VC- VERSION CONTROL, DVC, SCM, creating git account,  GIT SHOW, GIT COMMIT , PULL , CLONE , GIT COMMAND , GIT INSTALLATION, DEBUGGING


Git and SCM 
============
Landmark-SS -                 Paypal:
===========                   =======

Applications are the output of softwares
Applictaions are developed by developers

******** we are deploying a web application for our client paypal , once it is devloped, tested, built, we monitor the application for paypal so the customers can connect to
paypal website and carryout transactions


    Develops, Tests, Builds, deploys & monitors applications 
    Applications are the output from Softwares  

paypal:
  Releases:
   Releasing an application is taking/deploying it to the client
   In realtime we have multiple Releases.     

*** once the app are developed they are released to the client 
release1 = version1   = 1000lines of code  
   echo 'Welcome to LandmarkTech'

release2 = version2  = 2000lines of code  
   echo 'Welcome to Paypal'
   echo "Your convenient payment gateway"

Release3  = version3  = 1000 lines of code  
echo "Paypal the best payment gateway"

**** but if The client is not happy with the latest version of the application.   
What can be done??? RollBack
eg we can roll back from "version2" to "version1"

for us to be able to rollback to version1 will depend on if we have the record of version1 (versioning) 
we need versioning, 
version is also important for us to move from versin1 to version2 and from version2 to version3

Rollout   --> version1 --> version2 ---> version3  
RollBack  --> version3 --> version2

                                            
                                          VERSIONING
I n the diff VCS , WE have  a local system and in the local system there are developers writing code


Versioning in Software Development:
===================================
Version control systems = VCS:
  Local = version1, 
          version2,[5000LINES ] 
          version3 [2000LINES ] 

   cons: Single point of failure                 **** no other option available to access its data or to resolve the issue
         lacks collaboration                   ******** bc developers cant relate
         in-efficient use of resources including time  
         can't RollBack        *** ie , if the local environment goes down its a serious problem

 
 
  
  Centralised:             *** here we create a server
    cons: can't RollBack
          The central server can fail    ** the server wher developers have saved data can fail 

  pros:  
developers can collaborate to an extent



Distributed VCS:
===============
GIT: DVCs 
  Distributed Version Control system 
  - Git manage data as snapshots. 0 / 10 / 20 / 30 / 40 / 50 / 60 / 
  - It takes a picture of what all your files look like 
     at that moment and stores 
    a reference to that snapshot.

  Benefits: Nearly every operation is local
            git has data intergrity
            Git generally only adds data
            Rollout and RollBack  
other DVCs:
SVN --> Sub Version
CVS --> Concurrent Version system
TFS --> Team Foundation Server
Git --> 95% plus of companies are using GIT   



******* SOFTWARE Engineers and developers develop applictaions


Git is a Distributed Version Control systems. DVCS
In our environments (Landmark) we use Git for Versioning.  


                                                         SCM
git comes with source code managers
in each loCAL environment gitbash is installed so it captures everything that is done with relative ease
so before we even submit the codes from our local env to scm, GIT  is already installed


SCM = Source Code management
=======================-====  
SCM service plaforms :
  GitHub - MS
  GitLab
  BitBucket (Stash) - A
  awsCodeCommit 

IQ: As a DevOps Engineer, what are your roles & responsilities
    in Versioning with Git?
Answer:
  1. We ensure that Developers environments are configured and secured 
     We create an enabling environment for Developers to code/Develop
       DevelopmentServers are created in AWS/GCP.  
       share login details with Developers/Team [ userName/password ]  
       Ensure that git package/Software is installed 

*** at thi spoint we realise that our main task is project onboarding if approached by a cx to help mange their applications with git 

2. Project Onboarding: 
   1. create a github account for your organisation or self              ***** if necessary or in rare cases you may hv to create a github account for the org or yourself
   2. Create organisations where applicable in a SCM ['GitHub']  
       url =  https://github.com/landmarkss
   3. Create teams in SCM/github and assign members[Developers, etc.]                   ***** 54:30
       Team url = https://github.com/orgs/landmarkss/teams/paypalteam
        assigning members to teams using GitHub account userName/email
           oogunbiyi22
           amambua
           pride22
           Anyong87
           Ngohtez
           angeltemmy                                                                  go to teams and then select settings
       Grant permissions/roles to team members and collaborators:           ******** excess priviledge which is security vulnerability
           read  -- you can view codes   
           write -- you can view codes and make changes  
           admin/maintainer - ownership  

******* after accounts, organisation and teams have been created we then create repositories and assign members/write permission

   4. Create repositories in SCM [GitHub] 
      repo url = https://github.com/landmarkss/paypal

   5. login into github
       website = https://github.com/                   ********website to create git account  and info needed
            name      = Amambua Ivoline Nkimih
            email     = amamivoy@gmail.com
            userName  = amambua
            password  = Admin@123.. 
            https://github.com/landmarka  

       website = https://github.com/
       login url = https://github.com/login
            userName  = amambua
            password  = Admin@123.. 


login url = https://github.com/login
url =  https://github.com/landmarkss
Team url = https://github.com/orgs/landmarkss/teams/paypalteam
repo url = https://github.com/landmarkss/paypal

  6. Ensure that Git and relevant IDEs are installed by Developers 



                                     GIT INTSTALLATION

Git Installations
-----------------
Git Installations differs depending on your operating system:
Pre Requisite Software Download/ Registration :
Install git in Windows   :  
  Install gitbash @ https://git-scm.com/downloads [git.exe]
  $ git -v
    git version 2.38.1.windows.1

Install in RedHAT Linux servers:
    sudo yum install git  -y 

Install in ubuntu Linux servers:
    sudo apt install git  -y 
=============================
remote repository in github 
https://github.com/landmarkss/paypal
mkdir paypal && cd paypal


                        ****** the project we want to manage is paypal

1)
************   Assume the role of a Developer
We are developing for our paypal FinTech client. 
1. create a directory for Development   
   mkdir paypal && cd paypal  
2. Initialise this directory to keep track of 
   any change or changes in the files/codes       ... by running git init

******** whenevr we add a file or make changes to a file, we comment-m
[obim@demo22 paypal]$ git --version
   git version 2.39.2




2)                                       GIT COMMANDS 


Git Commands:
  git status --- tells us if our local repository we are creating has been initialized as a repository or not and also if any file has beeen commited to our repository
  git init   --- the first command       
    creates a Local repository [.git]  
    initialises the git repository
****without git init command, that is not a development repository, it  will not support any git command
git log           = to list the number of commit that we have 
                     ( so we git commit  -m "first version", then git log) then we get the commit id 

then next


3) the next stage is to move our files form our working area to the staging area
so we touch a file in our working area
(in orderwords, task in our working environment is not tracked by git)
 for it to be tracked by git, we move it from our working area where development is taking place to our staging area
     ( next video 46.39, git add. can be used to add 1file)
git add filename : git add boo
       OR 
   git add.

one file 
git add filename
few files
git add.
many files
git add*

   ****** files in the working area appear in RED

working area to staging area   
 (workshop)       (staging room)



4)      TO COMMIT the changes

In our staging area  >>>>>>>>>>>> local repository
     git commit -m  "   "

2.06  
git commit -m "first commit" (our msg bc it is our first version)
the git commit  will move the changes to the working area and create  a new commit with a commit id and that new commit is like a new version created 
but you can run this commit if we dnt knw who you are ( for data intergrity) for trcaking who did what
  global configuration  ==  git config -- global usre.email "your email address'
                            git config  --- global user.name "yourname"
then we run git log to check , after which we run git commit -m  and git log again to check


5) local repository   >>>> Remote repository
       git push ( push changes from local environment to remote repository)



[obim@demo22 paypal]$ 
 git config --global user.email "legah2000@gmail.com"
 git config --global user.name "Simon Legah"


with THE "git commit command -m " a version is created with a version number[commitID]  

git init          = to initialised a git empty repository
                    create the default branch[master, main]
git status        = to track files location                    *** to check if our working tree is clean or not 
                      tells eher files are located are all the files being trcaked by git or not 
git log           = list all commits  ( with their id) all versions
git add           = move files to staging area from working area
git commit -m     = move files to the local repository FROM STAGING AREA , it creates a new version of the application
                    good commit message for tracking changes created by authors are recommended

git reset        = to go back to working area form staging area



       GIT SHOW COMMIT 

git show - shows  what happened in a commit after we  run git log ( and get the commit id)

eg with the id of a commit = 138dccf
       git show 138dccf

and it tells us this ocmmit wa sfirst done by simon and on this particular day, it was a new file, and thers was no changes to the file 
the next thing for us to ensure is that the job that we can see in simon local environment, has a version been pushed to our SCM (where we hv a repository paypal)
is oke able to collaboarate with simon?
for them to be able to collaboarate the job simon has done has to be pushed to our SCM 

1:39
git remote -v    = to tell us if we have any repository detail in our local environment 
Tells us how many remote repository we are managing 

1:40


5i) to add a repository  URL in our local environment 
      git remote add paypal https://github.com /zebxz/paypal

( the repository url in my local environment is being replaced by paypal, so i am using an alias paypal name with the repo url )

******* git remote add is done so that other collaborators can have access to the task in the SCM 
we hv the paypal repo in the SCM so i have to add it in my local environment so i push commit from my local repo to remote repo in SCM 




 git push aliasName branchName  
eg;  git push pp master                   ***** Pushing to the master banch

6)   GIT PUSH      (alias Name )master
                
            (alias name)
  git push  paypal master (from my local environment to general SCM)
  username for https://github.com:ceekeh
password for https://\legal 2045@github.com: token
we have to create a token bc git no longer accepts password

 ******* go to github 
select settings aand developers settings 

                   token classic
select personal access token and generate token    (less than 30days )
selecet all repository 


7)   GIT PULL

After the task i pushed has been executed/worked on by other developers
 === GIT PULL paypal master 

remote repository in github 
https://github.com/landmarkss/paypal

  git remote -v 
  git remote add aliasName repoURL  
  git remote add paypal https://github.com/landmarkss/paypal
 git push aliasName branchName  
  git push paypal master  
  [obim@demo22 paypal]$ git push paypal master
Username for 'https://github.com': legah2045
Password for 'https://\legah2045@github.com': 



ASSIGNMENT 

Class32Teams:
Project:
  1a. Create your GitHub account 
  1b. Onboard a new project for a FinTech Client
        organisation / teams / repository
  2. Managers and assistant
       Create a Team in your created organisation for paypal and add members of your 
       your group with write access 

 
TO  PULL OR CLONE   ( am nt sure what i was tryin to say here)

1) mddir
2) init
3) gitadd (working to staging) OR git reset (staging back to working)
git commit "m / config
git remote add
git push
pull or clone
config
git add
commit
push


                    DEBUGGING
git reset: moves files from staging area back to the working area
git revert commit ID: Deletes the latest committed files in d local repo for a specific commit (deletes the files even in d working area from wher they were sent to staging
git clean  -n: indicates files to be deleted in the working area
git clean  -f: cleans the working area 






##########

  git add 
  git init  

 touch list  
 echo simon >> list 

 workingArea  stagingArea LocalRepo RemoteRepo  :
   git add *   
              git commit  
                           git push 

  git add fileName  
  git add .   
  git add *  
