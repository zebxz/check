TYPES OF SCRIPT,   TEmporarily changing SDV, CHANGING SDV PERMANENTLY, HOW TO MAKE A VARIABLE DYNAMIC, (-S , for secured info), dynamic useful for user mgt
Command Line Arguments = CLAs , ARGUMENTS, WHAT is $ and $$ , ARGUMENTS WITH CONDITION



  export class=DevOpsMasterClass

system defined variables:
  echo sdv starts  
   echo $HISTSIZE  
   echo $USER 
   echo $HOME  
   echo $PATH  
   echo $LOGNAME
   echo $SHELL 
echo sdv ends   

[oke@demo22 ~]$  echo $HISTSIZE
                 1000
export HISTSIZE=2000
=============================



ls-a

                                     TYPES OF SCRIPT
  23:25  ********** a variable can be a static variable or a dynamic variable   


dynamic script  :
can have multiple usage by various  people 
  1. echo $name Welcome to $cpy  

static script:
can only be used by one person    ( i bliv bc our variable name = oke is static)
  1. echo Oke Welcome to MTN          ***** it doesnt give the option to change the variable 

$name Welcome to Landmark Technology



User defined variables:      udv

 name=cecilia ekeh
 cpy=LandmarkTechnology  
 city=Toronto
 echo $name Welcome to $cpy  
export class = devops master class        **** we are changing the value of the SDv ... class
echo $class = devopsmasterclass


                             TEmporarily changing SDV
******** we can also use export to change the value of SDV but the change value will only last for that given login session
eg SDV for HISTSIZE = 1000
to change it = export HISTSIZE = 2000
echo $HISTSIZE  =2000
   BUT once the user logs out the HISTSIZE changes to 1000


                CHANGING SDV PERMANENTLY

1) ls -a = to get our hidden files .bashrc
2) then vi .bashrc and change HISTSIZE value

  = export HISTSIZE = 1500 , Save & exit file 
3)To enforce the changes, we run the source command 
     = source.bashrc
4) check = echo $HISTSIZE . will give us 1500
so even when we log out this user/session  sudo su - ec2-user  HISTSIZE is still 1500


                     HOW TO MAKE A VARIABLE DYNAMIC 
  Variables help us to make a script dynamic, howevre we must make sure the variable is dynamic

(the read command is used to obtain dynamic variable or input variable from users)  ****** 28:00
read -s  = secret variable (security  is inherent in our environment)

      DYNAMIC SCRIPT

eg       write a script to authenticate bank users:         ***** 25:00
===========================================

                                           line   1,3,4,5,7 are  dynamic variables

echo 'Please enter your name'        ( we collect the variable from the cx)
read name
echo "$name, welcome to TD Bank"
echo 'please enter your card'
echo 'please enter your pin'
read pin
echo "$pin is the correct pin, $name, how may we help you today?"

bank.sh   
-------
echo "Please enter your name"
read name
echo "$name, welcome to TB Bank"
echo "Please enter your pin"
read -s pin  # -s pass a secret variable     ******* 54:00 ...  ******** when writing a script and you want to read a sensitive value pass the "-s"
echo "$name you entered an invalid pin"
[obi@sc ~]$

Security is inherent in our environment so we pass  (-s)

======================================

with the help of scripting , creating user becomes very simple , it easy to manage task like this ***** 49:50
            
TICKET0045: Write a scipt to dynamically create users. 
   userMGT commands: adduser / usermod / userdel /  groupadd / groupdel 
   root access:    sudo adduser/userdel/usermod/ groupadd / groupdel 
 

vi userCreate.sh  

[oke@demo22 ~]$ cat createuser.sh
#!/bin/bash
# This script requires root/sudo access
echo "Please enter the name of the newUser"
read newuser
echo "Now ready to create $newuser account "
sudo adduser  $newuser
echo "$newuser account is created successfully"         ****** WE want to get this message : successfully created
grep $newuser /etc/passwd                        # to verify  that user is created    
[oke@demo22 ~]$



IQ: Explain your experience in shell scripting  ?
1. using bash shell scripts for userMGT. 100% [New Graduate]    
2. In my environment/company/Landmark i use scripting for userMGT for over 5 years. 

vi userMGT.sh  :   

echo "creating a newuser account" 
echo "enter the new username's name"
read name  
sudo adduser $name 
sudo usermod -aG manager $name              48:25  *** the mangers grp shud hv been created already 
id $name 


.  
  ****** in bash shell scripting we hv what is called CLI argument 

Command Line Arguments = CLAs  
===============================
TICKET0047: write a script to backup databases in our environment.  
we can vi db_backup.sh  OR  touch db_backup.sh     ( touch to create an empty file)
 echo "echo database backup initiated" > db_backup.sh  ... > OR >> ,> redirect to replace the content/line of code  in the file OR append >> to add the line of code/content
 echo "echo database backup completed" >> db_backup.sh
****1:04:00 .. without quote, with single quote, or double quote , the script will run bt for  use double " for best practices ... 1:04:58


****** 1:05:31 .......... as part of comment run this script with 2 arguments [dataserver and admin]
                                              the dataserver is dbserver11 and the admin is simon

vi db.backup .sh
#!/bin/bash
#this bash shell script will back database in linux systems
#Author:cecilia ekeh
#run this srcipt with 2 arguments  [dataserver and admin]
#sh db_backup.sh dbserver11 simon
echo database backup initiated
echo database backup completed 
echo all backups successful
echo the 1st argument is $1
echo the 2nd argument is $2
echo the scriptname is $0


************  to run the script    ........ when we run the script, we see the arguments displayed : (db11 and simon)

[ec2-user@demo~] $ sh sd_backup.sh db11 simon    ......  (we run the script with the argument)
 database backup initiated
 database backup completed 
 all backups successful
the 1st argument is db11
the 2nd argument is simon
 the scriptname is db_backup.sh


***** 1:11:24 ..   
 
 -# sh script.sh  arg1  arg2  arg3 ...  agr10   ......... we can create as arguments as needed for the project
-#     $o         $1    $2    $3       $10




******1:13:24 ..... in the script cla.sh, we want to backup some files so we create a backup directory .. mkdir but he deleted it 


  **************************************************** get correct script
we are creating a new script called: cla.sh
#echo please pass 3 arguments with your script
echo "The 1st argument is  = $1"
echo "The 2nd argument is  = $2"
echo "The 10th argument is  = ${10}"
echo "The number of argument is  = $#
echo "The list of argument are = $@"
echo "The list of argument are $*
date
echo The status of the last run command is $?  
echo The process id is = $$  

    ###########################################

          


******* we can pass arguments depending on the project we are working on  (dev)
eg 
the 1st argument = dev
the 2nd argument = db11
the 3rd argument = cecilia 
dev= our environment 
db11 = server
Admin = cecilia




**** 1:18:50
****** the status of your last run command is respresented as : echo $?
its very imp when it comes to Command line argument  ..  


IQ
 What is the significance of $? in scripting.  ......    (and this can be the only interview question you are asked in scripting)
ANS:
  It gives the status of your last run command.

The value can be = 0 [Its okay]   or 
  The value can be = 1-127 [Its not okay]   



if we run ls and then echo $ to check our last command, its =0 , and thats correct:
[oke@demo22 ~]$ ls
app      cla.sh         db_backup.sh  mlc.sh      sdv1.sh  usermgt.sh
backup   comment.sh     deploy.sh     read1.sh    sdv2.sh  var1.sh
bank.sh  createuser.sh  deployment    script1.sh  udv1.sh  welcome.sh
[oke@demo22 ~]$ echo $? = 0           ******** correct

[oke@demo22 ~]$ LS
-bash: LS: command not found
[oke@demo22 ~]$ echo $? = 127            ***** wrong    ..... bc the command is wrong, we dnt use capital letters

[oke@demo22 ~]$ cat ss
cat: ss: No such file or directory
[oke@demo22 ~]$ echo $? = 1                 ***** wrong  .......... i cat a file that does nt exists




*********** 1:25:00

 we are creating a new script called: cla.sh
#echo please pass 3 arguments with your script
echo "The 1st argument is  = $1"
echo "The 2nd argument is  = $2"
echo "The 10th argument is  = ${10}"
echo "The number of argument is  = $#
echo "The list of argument are = $@"
echo "The list of argument are $*
date
echo The status of the last run command is $?  
echo The process id is = $$  

[oke@demo22 ~]$ ls
app      cla.sh         db_backup.sh  mlc.sh      sdv1.sh  usermgt.sh
backup   comment.sh     deploy.sh     read1.sh    sdv2.sh  var1.sh
bank.sh  createuser.sh  deployment    script1.sh  udv1.sh  welcome.sh

[oke@demo22 ~]$ echo $$ = 263701
    ********* this value is called the process id because ,anything that happens in linux is a process



***** 1:25:42

What is the significance of $$ in linux     ?
ANS:
This represents the process ID of the last command (because whatever wedo in linux there is a process ID created for it)


1:26:45         >>>> for exmaple 
[oke@demo22 ~]$ sh  cla.sh       .... (we pass the script without any argument)
 the 1st argument is 
the 2nd argument is 
the 10th argument is 
the number argument is 0
the list of argument are
the list of argument are 
cla.sh: line 8: Date: command not found         ******** error
the status of your last run command is 127           ******* 127 because the last command is error
the process id is 266170


************ we could have smt like this

 command Line arguments:
    The 1st argument is  = $1"
    The 2nd argument is  = $2"
    The 3rd argument is  = $3"
    The 6th argument is  = $6"
    The scriptName  is   = $0"
    The 10th argument is = ${10}"
    The number argument is $#
    The list of argument are $@          ******* $@ and $* are the same 
    The list of argument are $*
    The status of the last run command is = $?  
    The process id is = $$  


CLA = $? displays the status of your   
  last run command with 2 possible values       .********** (i bliv 0 & 1)
     $? = 0 = command ran successfully
     $? = 1-127 = something is wrong        

  1-127 are error codes :
      1   = 
      2   = 
      3   = 
      127 = 


  *********** 1:29:00

                                            ARGUMENT


An argument, also called command line argument, can be defined as input given to a command line to process that input with the help of given command. 
Argument can be in the form of a file or directory. Arguments are entered in the terminal or console after entering command




*** if asked whatelse can be done iwth $?
we cansay if [$/ = o ] then ... 

CLA are diff options we can use while running a script 



          ARGUMENTS WITH CONDITION
*** if asked whatelse can be done with $?  
         ( it can be used to run a command with conditions)


cat deploy.sc     
if [ $?==0 ] 
then
echo "We succeeded" 
else  
echo "We failed, please troubleshoot" 
fi  

cat deploy.sc     
if [ $#==3 ] 
then
echo "We succeeded" 
else  
echo "Please pass 3 arguments with your script" 
fi 


                             INEQUALITY SIGN


Inequality signs :
=================
-eq  or  == represent equals to 
           (( $? == 0 )) [ X -eq = y]
-ne  or  != represent not equals to 
-gt  or  >  represent greater than
-lt  or  <  represent less than 
-ge  or >= greater than or equals to
-le  0r <= less than  or equals to 

if [ votes -gt 50% ]
then 
echo he won the elections 
fi  


                                        CONDITIONS: 
conditions :
if statement  
Syntax:
if (( conditions ))
then 
commands 
else  
commands  
fi



if1.sh  

echo "welcome to Landmark DevOpsMasterClass" 
echo "How much are you willing to pay"
read price
if [ $price -ge 4000 ]
then 
echo "your are admitted"  
else  
echo "sorry you can't be admitted today "
fi  


if2.sh    ( to authenticate customers)
echo "Please enter for pin"
read pin  
if (( $pin == 4100 ))
then 
echo "You have entered the correct pin"
echo "Thank you for banking with TD Bank"
else  
echo "sorry you entered the wrong pin"
echo "your account is blocked for your protection"
echo "Please visit a branch for further assistance"
fi  


 from next video 

VI if2.sh

echo 'enter your GPA'
read gpa 
if [$gpa - gt 4]
then
echo "congratulation"
echo "you are a 1st class student"
elif [$gpa - ge 3 ]
then


echo "congrats you are a 2nd class student "
elif [$gpa -ge2]
then
echo congratulations
echo you are a 3rd class student
else 
echo "you an do better"
fi



---




                                       DEBUGGING ISSUES


Debugging problems in scripting  
===============================

IQ: 
hOw do you troubleshoot issues in scripting?

ANS:
 Run the script in debugging mode
sh -x scriptName  

Input output redirection  
=============================
 
Redirect Standard output --   :      (script name = debug.sh
  sh scriptName > log  
  sh debug.sh > log or sh debug.sh 1> log  

Redirect Standard errors --   : 
  sh scriptName 2>fileName   
  sh debug.sh 2>error.log  

Redirect Standard output & errors --   :
  sh scriptName  > fileName  2>&1 
  sh debug.sh  > all.log  2>&1 



Debugging issues:
vi debug.sh   
==========
whoami  
Date  
Pwd 
echo $?   
whatis ls  
echo $?  
echo $$ 


################    END 

 
cla.sh   
#echo please pass 3 arguments with your script
echo "The 1st argument is $1"
echo "The 2nd argument is $2"
echo "The 10th argument is ${10}"
echo The number argument is $#
echo The list of  argument are $@
echo The list of  argument are $*
Date
echo The status of your last run command is $?
mkdir backup
cp *  backup/
echo The process id is  $$


[oke@demo22 ~]$ echo $?
127
[oke@demo22 ~]$ cat ss
cat: ss: No such file or directory
[oke@demo22 ~]$ echo $?
1


